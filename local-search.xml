<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CUDA编译与NVCC编译器</title>
    <link href="/2021/08/12/CUDA%E7%BC%96%E8%AF%91%E4%B8%8ENVCC%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <url>/2021/08/12/CUDA%E7%BC%96%E8%AF%91%E4%B8%8ENVCC%E7%BC%96%E8%AF%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="CUDA编译与NVCC编译器"><a href="#CUDA编译与NVCC编译器" class="headerlink" title="CUDA编译与NVCC编译器"></a>CUDA编译与NVCC编译器</h2><p>NVCC是什么？</p><p>是一种编译器，对于C、C++等高级语言，需要通过编译器编译成可执行的二进制文件(binary)；</p><p><strong>nvcc对CUDA代码段(通常也是由C语言编写)进行编译</strong>，所有非CUDA的代码均交给通用的C编译器，windows下是C1编译器，Linux下是gcc编译器</p><span id="more"></span><h3 id="一、nvcc命令"><a href="#一、nvcc命令" class="headerlink" title="一、nvcc命令"></a>一、nvcc命令</h3><p>Nvcc的选项命令形式大概有以下3类：boolean (flag-)选项，单值选项和列表(multivalued-)选项。</p><p>下面是使用规则举例：</p><p>  -o file</p><p>  -o=file</p><p>  -Idir1,dir2 -I=dir3 -I dir4,dir5</p><p>  每一个选项命令都有两个名字，全称和简写，例如<em>–I</em>就是*–include-path*的简称，注本文后面的选项命令说明均只列出简称，详细见参考资料1。一般来说，全称多用于述，简称多用于实际使用。</p><p>编译选项可按用途分为以下8大类：</p><p>１．指定编译阶段</p><p>主要指定编译的阶段以及要编译的输入文件。</p><p>-cuda -cubin -fatbin -ptx -gpu -E </p><p><strong>-c :最常使用，编译每个输入文件.c/.cc/.cpp/.cxx/.cu为object文件</strong></p><p>-dc -dw -dlink -link </p><p>-lib ：编译所有的输入文件为object文件，并且把结果添加到指定的library输出文件</p><p>-run</p><p>２．文件和路径配置</p><p><strong>-o :指定输出文件的位置和名称</strong></p><p>-include ：指定预处理和编译时预先需要包含的头文件</p><p>-l ：指定链接时需要的库文件</p><p>-D ：指定预处理和编译时需要的宏</p><p>-U ：取消宏定义</p><p>-I ：指定包含文件的搜索路径</p><p>-isystem ：指定系统包含的引用文件的搜索路径</p><p>-L ：指定库文件的搜索路径</p><p>-odir ：指定输出文件的目录</p><p>-ccbin ：指定host编译器所在路径</p><p>-cudart ：指定CUDA runtime library使用类型（none,shared,static），默认为static</p><p>-ldir :指定包含libdevice库文件目录</p><p>３．指定编译器、连接器的行为</p><p>-pg </p><p>-g :产生可调式代码，调试模式下必须的</p><p>-G ：产生可调式的设备代码</p><p>-lineinfo ：为设备代码产生行number信息</p><p>-O ：产生优化代码 ，包括O0,O1,O2,O3，用于产生不同的指令集</p><p>-ftemplate-backtrace-limit -shared -x -std -nohdinitlist -nohdmoveforward -expt-relaxed-constexpr </p><p>-m :指定平台结构32 vs 64</p><p>４．编译工具内部选项</p><p>-Xcompiler -Xlinker -Xarchive -Xptxas -Xnvlink</p><p>-Xptxas -v:显示代码生成的统计结果</p><p>-Xptxas -dlcm=cg:关闭L1cache</p><p>-Xptxas -dlcm=ca:将L1cache增加到48KB(默认为16KB，和shared memory一共64KB)</p><p>５．编译驱动引导选项</p><p>-noprof -dryrun </p><p>-v :列出nvcc产生的编译命令，不影响其执行</p><p>-keep ：保留各步骤产生的中间文件，用于调试</p><p>-keep-dir -save-temps </p><p>-clean ：逆转nvcc的行为</p><p>-run-args -idp -ddp -dp -MT -nodlink</p><p>６．CUDA编译方式选项</p><p>-default-stream</p><p>７．驾驭GPU代码生成选项</p><p>-arch :指定GPU架构</p><p>-code -gencode -rdc -e </p><p>-maxrregcount ：指定GPU函数可使用的最大寄存器数量</p><p>-use_fast_math -ftz -prec-div -prec-sqrt -fmad</p><p>８．ptxas选项</p><p>-allow-expensive-optimizations -c -dlcm -dscm -g -disable-optimizer-consts -e -fmad -flcm -fscm -lineinfo -arch -h -m -maxrregcount -O -optf -o -preserve-relocs -sp-bound-check -v -V -Werror -warn-double-usage -warn-spills</p><h3 id="二、举例"><a href="#二、举例" class="headerlink" title="二、举例"></a>二、举例</h3><p>以Faster-RCNN的源码为例，简介cuda编程等一些文件的架构和流程</p><h4 id="1-make-sh编译配置文件"><a href="#1-make-sh编译配置文件" class="headerlink" title="1.make.sh编译配置文件"></a>1.<code>make.sh</code>编译配置文件</h4><p>在使用源代码时，作者都会让我们先跑：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs linux">sh make.sh<br></code></pre></td></tr></table></figure><p><strong><code>.sh</code>文件</strong>是bash脚本，就是<strong>自动化我们的命令行</strong>而已，所以在<code>make.sh</code>会有<code>cd xxx</code>、<code>cd ..</code>等命令的出现；</p><p>这一步实际上是在做所有与编译相关的工作，编译包括：</p><p><strong>1）cuda程序：<code>.cu</code>文件</strong></p><p><strong>2）python程序的C扩展：通过<code>build.py</code>编译<code>.c</code>文件</strong></p><p>注：cuda程序只是其中的一些实现，python的C扩展编译相当于是最后的总装！！</p><p><code>make.sh</code>文件的内容通常包括：</p><p>先用nvcc编译cuda程序 —&gt; 再执行build.py文件编译c程序     例子项目中的<code>make.sh</code>如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env bash</span><br><br><span class="hljs-comment"># CUDA_PATH=/usr/local/cuda/</span><br><br>export CUDA_PATH=/usr/local/cuda/<br><span class="hljs-comment">#You may also want to ad the following</span><br><span class="hljs-comment">#export C_INCLUDE_PATH=/opt/cuda/include</span><br><br>export CXXFLAGS=<span class="hljs-string">&quot;-std=c++11&quot;</span><br>export CFLAGS=<span class="hljs-string">&quot;-std=c99&quot;</span><br><br>CUDA_ARCH=<span class="hljs-string">&quot;-gencode arch=compute_30,code=sm_30 \</span><br><span class="hljs-string">           -gencode arch=compute_35,code=sm_35 \</span><br><span class="hljs-string">           -gencode arch=compute_50,code=sm_50 \</span><br><span class="hljs-string">           -gencode arch=compute_52,code=sm_52 \</span><br><span class="hljs-string">           -gencode arch=compute_60,code=sm_60 \</span><br><span class="hljs-string">           -gencode arch=compute_61,code=sm_61 &quot;</span><br><br><span class="hljs-comment"># compile NMS</span><br>cd nms/src<br>echo <span class="hljs-string">&quot;Compiling nms kernels by nvcc...&quot;</span><br>nvcc -c -o nms_cuda_kernel.cu.o nms_cuda_kernel.cu \<br> -D GOOGLE_CUDA=<span class="hljs-number">1</span> -x cu -Xcompiler -fPIC $CUDA_ARCH<br><br>cd ../<br>python build.py<br><br><span class="hljs-comment"># compile roi_pooling</span><br>cd ../<br>cd roi_pooling/src<br>echo <span class="hljs-string">&quot;Compiling roi pooling kernels by nvcc...&quot;</span><br>nvcc -c -o roi_pooling.cu.o roi_pooling_kernel.cu \<br> -D GOOGLE_CUDA=<span class="hljs-number">1</span> -x cu -Xcompiler -fPIC $CUDA_ARCH<br>cd ../<br>python build.py<br></code></pre></td></tr></table></figure><h4 id="2-进入cuda程序：nms-cuda-kernel-cu中"><a href="#2-进入cuda程序：nms-cuda-kernel-cu中" class="headerlink" title="2.进入cuda程序：nms_cuda_kernel.cu中"></a>2.进入cuda程序：<code>nms_cuda_kernel.cu</code>中</h4><p>截取部分代码进行体会：</p><p>可以理解为：实际就是用C语言造的轮子，外面用nvcc进行编译后就可以拿来使用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdbool.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;vector&gt;</span><br><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &quot;nms_cuda_kernel.h&quot;</span><br><br><span class="hljs-comment">#define CUDA_WARN(XXX) \</span><br>    do &#123; <span class="hljs-keyword">if</span> (XXX != cudaSuccess) std::cout &lt;&lt; <span class="hljs-string">&quot;CUDA Error: &quot;</span> &lt;&lt; \<br>        cudaGetErrorString(XXX) &lt;&lt; <span class="hljs-string">&quot;, at line &quot;</span> &lt;&lt; __LINE__ \<br>&lt;&lt; std::endl; cudaDeviceSynchronize(); &#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#define CUDA_CHECK(condition) \</span><br>  /* Code block avoids redefinition of cudaError_t error */ \<br>  do &#123; \<br>    cudaError_t error = condition; \<br>    <span class="hljs-keyword">if</span> (error != cudaSuccess) &#123; \<br>      std::cout &lt;&lt; cudaGetErrorString(error) &lt;&lt; std::endl; \<br>    &#125; \<br>  &#125; <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#define DIVUP(m,n) ((m) / (n) + ((m) % (n) &gt; 0))</span><br><span class="hljs-built_in">int</span> const threadsPerBlock = sizeof(unsigned long long) * <span class="hljs-number">8</span>;<br><br>__device__ inline <span class="hljs-built_in">float</span> devIoU(<span class="hljs-built_in">float</span> const * const a, <span class="hljs-built_in">float</span> const * const b) &#123;<br>  <span class="hljs-built_in">float</span> left = <span class="hljs-built_in">max</span>(a[<span class="hljs-number">0</span>], b[<span class="hljs-number">0</span>]), right = <span class="hljs-built_in">min</span>(a[<span class="hljs-number">2</span>], b[<span class="hljs-number">2</span>]);<br>  <span class="hljs-built_in">float</span> top = <span class="hljs-built_in">max</span>(a[<span class="hljs-number">1</span>], b[<span class="hljs-number">1</span>]), bottom = <span class="hljs-built_in">min</span>(a[<span class="hljs-number">3</span>], b[<span class="hljs-number">3</span>]);<br>  <span class="hljs-built_in">float</span> width = <span class="hljs-built_in">max</span>(right - left + <span class="hljs-number">1</span>, <span class="hljs-number">0.</span>f), height = <span class="hljs-built_in">max</span>(bottom - top + <span class="hljs-number">1</span>, <span class="hljs-number">0.</span>f);<br>  <span class="hljs-built_in">float</span> interS = width * height;<br>  <span class="hljs-built_in">float</span> Sa = (a[<span class="hljs-number">2</span>] - a[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>) * (a[<span class="hljs-number">3</span>] - a[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>  <span class="hljs-built_in">float</span> Sb = (b[<span class="hljs-number">2</span>] - b[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>) * (b[<span class="hljs-number">3</span>] - b[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">return</span> interS / (Sa + Sb - interS);<br>&#125;<br><br>__global__ void nms_kernel(<span class="hljs-built_in">int</span> n_boxes, <span class="hljs-built_in">float</span> nms_overlap_thresh,<br>                           <span class="hljs-built_in">float</span> *dev_boxes, unsigned long long *dev_mask) &#123;<br>  const <span class="hljs-built_in">int</span> row_start = blockIdx.y;<br>  const <span class="hljs-built_in">int</span> col_start = blockIdx.x;<br><br>  // <span class="hljs-keyword">if</span> (row_start &gt; col_start) <span class="hljs-keyword">return</span>;<br><br>  const <span class="hljs-built_in">int</span> row_size =<br>        <span class="hljs-built_in">min</span>(n_boxes - row_start * threadsPerBlock, threadsPerBlock);<br>  const <span class="hljs-built_in">int</span> col_size =<br>        <span class="hljs-built_in">min</span>(n_boxes - col_start * threadsPerBlock, threadsPerBlock);<br></code></pre></td></tr></table></figure><h4 id="3-nvcc编译完后，执行build-py文件："><a href="#3-nvcc编译完后，执行build-py文件：" class="headerlink" title="3.nvcc编译完后，执行build.py文件："></a>3.nvcc编译完后，执行<code>build.py</code>文件：</h4><p>可见，程序中加载了<code>.c</code>和<code>.h</code>文件，实际上是对剩下的C程序进行编译，这里使用pytorch的<code>torch.utils.ffi</code>工具进行编译！</p><p>最后形成编译部分的总装，编译工作即完成了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils.ffi <span class="hljs-keyword">import</span> create_extension<br><br><span class="hljs-comment">#this_file = os.path.dirname(__file__)</span><br><br>sources = []<br>headers = []<br>defines = []<br>with_cuda = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Including CUDA code.&#x27;</span>)<br>    sources += [<span class="hljs-string">&#x27;src/nms_cuda.c&#x27;</span>]<span class="hljs-comment"># c</span><br>    headers += [<span class="hljs-string">&#x27;src/nms_cuda.h&#x27;</span>]<span class="hljs-comment"># c的头文件</span><br>    defines += [(<span class="hljs-string">&#x27;WITH_CUDA&#x27;</span>, <span class="hljs-literal">None</span>)]<br>    with_cuda = <span class="hljs-literal">True</span><br><br>this_file = os.path.dirname(os.path.realpath(__file__))<br><span class="hljs-built_in">print</span>(this_file)<br>extra_objects = [<span class="hljs-string">&#x27;src/nms_cuda_kernel.cu.o&#x27;</span>]<br>extra_objects = [os.path.join(this_file, fname) <span class="hljs-keyword">for</span> fname <span class="hljs-keyword">in</span> extra_objects]<br><span class="hljs-built_in">print</span>(extra_objects)<br><br>ffi = create_extension(<br>    <span class="hljs-string">&#x27;_ext.nms&#x27;</span>,<br>    headers=headers,<br>    sources=sources,<br>    define_macros=defines,<br>    relative_to=__file__,<br>    with_cuda=with_cuda,<br>    extra_objects=extra_objects<br>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    ffi.build()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Deep Learning-Objects Detection</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>WSDDN源码总结与收获</title>
    <link href="/2021/08/11/WSDDN%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93%E4%B8%8E%E6%94%B6%E8%8E%B7/"/>
    <url>/2021/08/11/WSDDN%E6%BA%90%E7%A0%81%E6%80%BB%E7%BB%93%E4%B8%8E%E6%94%B6%E8%8E%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="WSDDN源码总结与收获"><a href="#WSDDN源码总结与收获" class="headerlink" title="WSDDN源码总结与收获"></a>WSDDN源码总结与收获</h2><p>不完全，所有步骤与细节已经注释在源码当中。</p><span id="more"></span><h3 id="一、datasets-py"><a href="#一、datasets-py" class="headerlink" title="一、datasets.py"></a>一、datasets.py</h3><p>1.　所有文件的读取都用OS库中路径的方式的完成，放在<code>datasets.py</code>文件中<br>2.　<strong>EdgeBoxes</strong>等区域建议方法在经典数据集上（如VOC2007）上已经训练好，并且有每个proposal的类别得分，可以从网上下载**.mat文件<strong>；<br>   .mat文件用</strong>scipy.io库<strong>中的</strong>loadmat函数<strong>读取<br>3.　VOC2007数据集等官方标注都用</strong>.xml文件<strong>给出，xml语法由标签和子标签组成，可以看作树结构，所以用</strong>xml.etree.ElementTree库<strong>处理<br>4.　弱监督中，对于训练集而言，</strong>只有image-level标签，这是怎么获得的呢？**<br>   <strong>实际上是人工产生的！</strong>VOC2007这种数据集只有精细的instance-level标注，我们需要先将其转换为image-level标签，作为训练数据的target拿去训练；<br>   所以在datasets.py文件中，对训练集和测试集的处理是不同的，本源码中采用的方法是：用<code>self.split</code>变量存储”trainval”/“test”，后面搭配 <code>if </code>实现对不同分支的处理</p><h3 id="二、network-py"><a href="#二、network-py" class="headerlink" title="二、network.py"></a>二、network.py</h3><ol><li><p><code>__init__</code>函数的参数是实例化网络时需要传的</p></li><li><p>必须定义<code>forward</code>函数，以覆盖继承的nn.Module类方法</p></li><li><p>使用既定的网络作为backbone时，通常使用<code>torchvision.models</code>中的模型，如alexnet 、vgg16等；</p><p>通常在pytorch的源码实现中，<code>features</code>是完成特征提取的卷积网络，<code>classifier</code>是后面的全连接层</p><p>在此基础上fine-tune，通常需要<strong>修改最后一层的网络架构</strong>–&gt;通过切片实现，<strong>切片不包含第二个值</strong>，例如：features[:-1]表示去掉最后一层</p></li><li><p>SPP和roi_pool的本质相同，所以通常用<code>torchvision.ops</code>库的<code>roi_pool</code>方法进行实现</p></li><li><p><code>torch.nn.functional</code>模块中有<code>sotfmax()</code>、<code>binary_cross_entropy()</code>等函数</p></li><li><p>如果loss是自己设计的，那么可以定义在network架构中，用<code>cal_loss</code>函数</p></li></ol><h3 id="三、utils-py"><a href="#三、utils-py" class="headerlink" title="三、utils.py"></a>三、utils.py</h3><ol><li>通常在该文件里定义随机种子函数set_seed，要完成：random、np、torch、torch.cudnn的随机种子设置</li><li>数据增强的方法定义在此</li><li>评估函数<code>evaluate</code>定义在此</li><li>实际中的小<strong>tricks</strong>也可定义在这里，比如<code>filter_small_boxes</code>、<code>swap_axes</code>等函数</li></ol><h3 id="四、train-py"><a href="#四、train-py" class="headerlink" title="四、train.py"></a>四、train.py</h3><ol><li><p>通常要用argparse与终端进行交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">parser = argparse.ArgumentParser(description=<span class="hljs-string">&quot;Train&quot;</span>)<br>parser.add_argument(<span class="hljs-string">&quot;--base_net&quot;</span>,<span class="hljs-built_in">type</span>=xxx,default=xxx,<span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;xxx&quot;</span>)<br>parser.add_argument()<br>parser.add_argument()<br>parser.add_argument()<br><br>args = parser.parse_args()<br><br>xxx=args.base_net<br>xxx=args.epoch<br>xxx=args.seed<br><span class="hljs-comment"># 后续就用新定义的变量xxx</span><br></code></pre></td></tr></table></figure></li><li><p>用<code>DataLoader</code>完成batch的读取</p></li><li><p>养成习惯：train函数中，每定义完一个变量之后，就<code>.to(DEVICE)</code>存到GPU中</p></li><li><p>通常为了观察网络的中间结果，需要在一定的迭代次数时，保存模型，方便后面进行测试；<br>使用<code>torch.save()</code>函数，搭配<code>net.state_dict()</code>实现；<br>通常保存为**.pt** 或 <strong>.pth</strong>文件</p></li><li><p>通常不是只在最后才测试模型，而是在一定迭代次数时送入test：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在一定迭代次数时，保存模型！！！   预设state_period参数</span><br>        <span class="hljs-keyword">if</span> epoch % STATE_PERIOD == <span class="hljs-number">0</span>:<br>            path = os.path.join(BASE_DIR, <span class="hljs-string">&quot;states&quot;</span>, <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;net.base_net&#125;</span>_epoch_<span class="hljs-subst">&#123;epoch&#125;</span>.pt&quot;</span>)<br>            torch.save(net.state_dict(), path)  <br>            tqdm.write(<span class="hljs-string">f&quot;State saved to <span class="hljs-subst">&#123;path&#125;</span>&quot;</span>)  <br>        tqdm.write(<span class="hljs-string">f&quot;Avg loss is <span class="hljs-subst">&#123;epoch_loss / <span class="hljs-built_in">len</span>(train_ds)&#125;</span>&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> epoch % EVAL_PERIOD == <span class="hljs-number">0</span>:<br>            tqdm.write(<span class="hljs-string">f&quot;Evaluation started at <span class="hljs-subst">&#123;datetime.now()&#125;</span>&quot;</span>)<br>            evaluate(net, test_dl)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Deep Learning-Objects Detection</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Pytorch_Related（一）</title>
    <link href="/2021/08/10/Pytorch-Related%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/08/10/Pytorch-Related%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>h和python系列同理，本记录专门记录阅读源码过程中<code>Pytorch</code>相关的学习所得。</p><span id="more"></span><h2 id="pytorch-学习率衰减策略"><a href="#pytorch-学习率衰减策略" class="headerlink" title="pytorch 学习率衰减策略"></a>pytorch 学习率衰减策略</h2><p>所有策略参见：<a href="https://www.jianshu.com/p/9643cba47655">Pytorch中的学习率衰减方法 - 简书 (jianshu.com)</a></p><p>重点介绍<strong>MultiStepLR</strong>，又称“<strong>三段式lr</strong>”，这种衰减方式也是在学术论文中最常见的方式，一般手动调整也会采用这种方法。</p><p>epoch进入milestones范围内即乘以gamma，离开milestones范围之后再乘以gamma</p><p>需要注意：定义了scheduler实例后，训练时梯度下降迭代由optimizer.step()变为scheduler.step()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">lr_list = []<br>model = net()<br>LR = <span class="hljs-number">0.01</span><br>optimizer = Adam(model.parameters(),lr = LR)<br>scheduler = lr_scheduler.MultiStepLR(optimizer,milestones=[<span class="hljs-number">20</span>,<span class="hljs-number">80</span>],gamma = <span class="hljs-number">0.9</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    scheduler.step()  <span class="hljs-comment"># 迭代</span><br>    lr_list.append(optimizer.state_dict()[<span class="hljs-string">&#x27;param_groups&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;lr&#x27;</span>])<br>plt.plot(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>),lr_list,color = <span class="hljs-string">&#x27;r&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/images/steplr" alt="img"></p><h2 id="模型保存-torch-save"><a href="#模型保存-torch-save" class="headerlink" title="模型保存 torch.save"></a>模型保存 torch.save</h2><p>为了保存模型参数、优化器参数、迭代轮次等参数：</p><ol><li>先建立一个字典，保存上述参数：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">state = &#123;<span class="hljs-string">&#x27;net&#x27;</span>:model.state_dict(), <span class="hljs-string">&#x27;optimizer&#x27;</span>:optimizer.state_dict(), <span class="hljs-string">&#x27;epoch&#x27;</span>:epoch&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>调用torch.save()：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.save(state, <span class="hljs-built_in">dir</span>)   <span class="hljs-comment"># dir为保存的文件路径，通常保存为.pt或.pth文件</span><br></code></pre></td></tr></table></figure><h2 id="模型读取-torch-load"><a href="#模型读取-torch-load" class="headerlink" title="模型读取 torch.load"></a>模型读取 torch.load</h2><p>当你想恢复某一阶段的训练、或者进行测试时，那么就可以读取之前保存的网络模型参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">checkpoint = torch.load(<span class="hljs-built_in">dir</span>)<br>model.load_state_dict(checkpoint[<span class="hljs-string">&#x27;net&#x27;</span>])<br>optimizer.load_state_dict(checkpoint[<span class="hljs-string">&#x27;optimizer&#x27;</span>])<br>start_epoch = checkpoint[<span class="hljs-string">&#x27;epoch&#x27;</span>] + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Pytorch自带的NMS、RoIAlign、RoIPool方法"><a href="#Pytorch自带的NMS、RoIAlign、RoIPool方法" class="headerlink" title="Pytorch自带的NMS、RoIAlign、RoIPool方法"></a>Pytorch自带的NMS、RoIAlign、RoIPool方法</h2><p>参考：<a href="https://blog.csdn.net/shanglianlm/article/details/102002844">(1条消息) PyTorch学习之OPS (NMS, RoIAlign, RoIPool)_mingo_敏-CSDN博客_torchvision.ops.nms</a></p><ol><li>```python<br>torchvision.ops.nms(boxes, scores, iou_threshold)<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>- <span class="hljs-keyword">boxes </span>(Tensor[N, <span class="hljs-number">4</span>])) – <span class="hljs-keyword">bounding </span><span class="hljs-keyword">boxes坐标. </span>格式：(x1, y1, x2, y2)<br>- <span class="hljs-keyword">scores </span>(Tensor[N]) – <span class="hljs-keyword">bounding </span><span class="hljs-keyword">boxes得分</span><br><span class="hljs-keyword">- </span>iou_threshold (float) – IoU过滤阈值<br><br><span class="hljs-number">2</span>. ```python<br>   torchvision.ops.roi_pool(input, <span class="hljs-keyword">boxes, </span>output_size, spatial_scale=<span class="hljs-number">1</span>.<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></li></ol><p>input (Tensor[N, C, H, W]) – 输入张量<br>boxes (Tensor[K, 5] or List[Tensor[L, 4]]) – 输入的box 坐标，格式：list(x1, y1, x2, y2) 或者(batch_index, x1, y1, x2, y2)<br>output_size (int or Tuple[int, int]) – 输出尺寸, 格式： (height, width)<br>spatial_scale (float) – 将输入坐标映射到box坐标的尺度因子. 默认: 1.0</p><p>注：SPP和RoiPool没有本质区别，因此编程实现时可以用roi_pool实现SPP层</p><ol start="3"><li><p>```python<br>torchvision.ops.roi_align(input, boxes, output_size, spatial_scale=1.0, sampling_ratio=-1)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-tag">input</span> (Tensor<span class="hljs-selector-attr">[N, C, H, W]</span>) – 输入张量<br>boxes (Tensor<span class="hljs-selector-attr">[K, 5]</span> or List<span class="hljs-selector-attr">[Tensor[L, 4]</span>]) – 输入的box 坐标，格式：list(x1, y1, x2, y2) 或者(batch_index, x1, y1, x2, y2)<br>output_size (int or Tuple<span class="hljs-selector-attr">[int, int]</span>) – 输出尺寸, 格式： (<span class="hljs-attribute">height</span>, <span class="hljs-attribute">width</span>)<br>spatial_scale (<span class="hljs-attribute">float</span>) – 将输入坐标映射到box坐标的尺度因子. 默认: <span class="hljs-number">1.0</span><br>sampling_ratio (int) – 插值网格上用来计算池化后输出的采样点数量；如果sampling_ratio&gt;<span class="hljs-number">0</span>, sampling_ratio个采样点将会被使用，如果sampling_ratio&lt;= <span class="hljs-number">0</span>，自适应采样点数量,即<span class="hljs-built_in">ceil</span>(roi_width / pooled_w)和<span class="hljs-built_in">ceil</span>(roi_height / pooled_h)，默认： sampling_ratio =-<span class="hljs-number">1</span><br><br>### 随机种子<br><br>要有概念：不同库的随机种子要分别设置<br><br><span class="hljs-number">1</span>. pytorch权重初始化：<br><br>   ```python<br>   if torch.cuda.<span class="hljs-built_in">is_available</span>():<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;gpu cuda is available!&quot;</span>)<br>       torch.cuda.<span class="hljs-built_in">manual_seed</span>(<span class="hljs-number">1000</span>)   # GPU<br>   else:<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cuda is not available! cpu is available!&quot;</span>)<br>       torch.<span class="hljs-built_in">manual_seed</span>(<span class="hljs-number">1000</span>)   # CPU<br></code></pre></td></tr></table></figure></li><li><p>random库：random.seed(0)</p></li><li><p>numpy库：np.random.seed(0)</p></li></ol><h2 id="cudnn加速"><a href="#cudnn加速" class="headerlink" title="cudnn加速"></a>cudnn加速</h2><p>背景知识参考：<a href="https://zhuanlan.zhihu.com/p/73711222">torch.backends.cudnn.benchmark ?! - 知乎 (zhihu.com)</a></p><p>卷积的前向传播实现有80多种算法！</p><ol><li></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.backends.cudnn.benchmark = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>在迭代开始之前自动寻找<strong>最适合当前配置的卷积算法</strong>；在输入维度、网络结构在iteration之间<strong>变化不大时</strong>，可采用，以提升网络效率；</p><p>如果设置为<code>False</code>，则每次都生成相同的卷积算法；</p><ol start="2"><li>理解：每次生成相同的算法还不够，还固定下一种特定的算法：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>设置为<code>True</code> 可保证每次生成的都是固定的算法。</p><p>据此我们可以看出来，首先如果我们的网络模型一直变的话，那肯定是不能设置 <code>cudnn.benchmark=True</code> 的。因为网络结构经常变，每次 PyTorch 都会自动来根据新的卷积场景做优化：这次花费了半天选出最合适的算法出来，结果下次你结构又变了，之前就白做优化了。不仅如此，还得要根据这个新的结构继续做选择最高效的算法组合，又花费不少的时间。这样反而会大大降低效率。</p><p>不过一般的 CV 模型来说，网络的结构一般是不会动态变化的，其次，图像一般都 resize 到固定的尺寸，batch size 也是固定的。所以，在大部分情况下，我们都可以在程序中加上这行神奇的代码，来减少运行时间！</p><p>综上，为保持<strong>代码的可复现性</strong>，通常有以下组合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置随机种子</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>np.random.seed(<span class="hljs-number">0</span>)<br>torch.manual_seed(<span class="hljs-number">0</span>)<br>torch.cuda.manual_seed_all(<span class="hljs-number">0</span>)<br><br>torch.backends.cudnn.deterministic = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 固定一种算法</span><br>torch.backends.cudnn.benchmark = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 每次算法都一样</span><br></code></pre></td></tr></table></figure><h2 id="数据增强库albumentations"><a href="#数据增强库albumentations" class="headerlink" title="数据增强库albumentations"></a>数据增强库albumentations</h2><h2 id="Annotations文件——-xml文件"><a href="#Annotations文件——-xml文件" class="headerlink" title="Annotations文件—— .xml文件"></a>Annotations文件—— .xml文件</h2><p>和ROS里面的xml语法类似，标签+属性组成；所以通常可看作树状结构，用xml.etree.ElementTree功能包进行处理</p><p> 以一张图片的annotation为例：</p><p><img src="/images/image-20210720205929371.png" alt="image-20210720205929371"></p><p>1）可见，有两个object标签，每个标签下又有<code>name</code>、<code>difficult</code>、<code>bndbox</code>等子标签</p><p>其中<code>difficult</code>标签表示物体是否难以识别，0代表容易；</p><p>关于VOC数据集标注的具体说明，见<a href="https://blog.csdn.net/Terry_n/article/details/81000458">voc2012中xml文档代码简单说明_Terry_n的博客-CSDN博客</a></p><h2 id="torch-clamp-函数"><a href="#torch-clamp-函数" class="headerlink" title="torch.clamp()函数"></a>torch.clamp()函数</h2><p>将输入<code>input</code>张量每个元素的夹紧到区间 [min,max][min,max]，并返回结果到一个新张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">torch.clamp(<span class="hljs-built_in">input</span>, <span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>, out=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>实际操作如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">      | <span class="hljs-built_in">min</span>, <span class="hljs-keyword">if</span> x_i &lt; <span class="hljs-built_in">min</span><br>y_i = | x_i, <span class="hljs-keyword">if</span> <span class="hljs-built_in">min</span> &lt;= x_i &lt;= <span class="hljs-built_in">max</span><br>      | <span class="hljs-built_in">max</span>, <span class="hljs-keyword">if</span> x_i &gt; <span class="hljs-built_in">max</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Deep Learning-Objects Detection</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python_Related（一）</title>
    <link href="/2021/08/10/Python-Related%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/08/10/Python-Related%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本系列记录阅读源码过程中与<code>python内置库</code>相关的学习所得，遇到没见过的库、不懂的用法，都Google / 百度力求理解，然而好记性不如烂笔头，在take notes的过程中不仅加深印象，还能成为以后必要时的reference。</p><span id="more"></span><h2 id="python-os库"><a href="#python-os库" class="headerlink" title="python os库"></a>python os库</h2><p>参考：<a href="https://www.jb51.net/article/182302.htm">python标准库OS模块详解_python_脚本之家 (jb51.net)</a></p><h3 id="一、常用功能"><a href="#一、常用功能" class="headerlink" title="一、常用功能"></a>一、常用功能</h3><ol><li>os.name</li></ol><p>该属性宽泛地指明了当前 Python 运行所在的环境，可以理解为程序所在的系统名称；</p><p>目前有效名称为以下三个：posix，nt，java；</p><p>其中posix是 Portable Operating System Interface of UNIX（可移植操作系统接口）的缩写。Linux 和 Mac OS 均会返回该值；nt全称应为“Microsoft Windows NT”，大体可以等同于 Windows 操作系统，因此 Windows 环境下会返回该值；java则是 Java 虚拟机环境下的返回值。</p><ol start="2"><li>os.listdir()</li></ol><p>“listdir”即“list directories”，列出（当前）目录下的全部路径（及文件）。该函数存在一个参数，用以指定要列出子目录的路径，默认为“.”，即“当前路径”；</p><p>函数返回值是一个列表，其中各元素均为字符串，分别是各路径名和文件名；</p><p>通常在需要遍历某个文件夹中文件的场景下极为实用；</p><p>比如定义以下函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_filelists</span>(<span class="hljs-params">file_dir=<span class="hljs-string">&#x27;.&#x27;</span></span>):</span><br>  list_directory = os.listdir(file_dir)<br>  filelists = []<br>  <span class="hljs-keyword">for</span> directory <span class="hljs-keyword">in</span> list_directory:<br>    <span class="hljs-comment"># os.path 模块稍后会讲到</span><br>    <span class="hljs-keyword">if</span>(os.path.isfile(directory)):<br>      filelists.append(directory)<br>  <span class="hljs-keyword">return</span> filelists<br></code></pre></td></tr></table></figure><ol start="3"><li>os.mkdir()</li></ol><p>“mkdir”，即“make directory”，用处是“新建一个路径”。需要传入一个类路径参数用以指定新建路径的位置和名称，如果指定路径已存在，则会抛出FileExistsError异常。</p><p>相应地，在需要新建多级路径的场景下，可以使用os.makedirs()来完成任务。函数os.makedirs()执行的是递归创建，若有必要，会分别新建指定路径经过的中间路径，直到最后创建出末端的“叶子路径”。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.mkdir(<span class="hljs-string">&quot;test_os_mkdir&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>os.mkdir(<span class="hljs-string">&quot;test_os_mkdir&quot;</span>)<br>Traceback (most recent call last):<br> File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>FileExistsError: [WinError <span class="hljs-number">183</span>] 当文件已存在时，无法创建该文件。: <span class="hljs-string">&#x27;test_os_mkdir&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.mkdir(<span class="hljs-string">&quot;test_os_mkdir/test_os_makedirs/just/do/python/hello&quot;</span>)<br>Traceback (most recent call last):<br> File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>FileNotFoundError: [WinError <span class="hljs-number">3</span>] 系统找不到指定的路径。: <span class="hljs-string">&#x27;test_os_mkdir/test_os_makedirs/just/do/python/hello&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.makedirs(<span class="hljs-string">&quot;test_os_mkdir/test_os_makedirs/just/do/python/hello&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="4"><li><h3 id="os-remove"><a href="#os-remove" class="headerlink" title="os.remove()"></a>os.remove()</h3></li></ol><p>用于删除文件，如果指定路径是目录而非文件的话，就会抛出IsADirectoryError异常。删除目录应该使用<strong>os.rmdir()函数</strong>。</p><ol start="5"><li><h3 id="os-rename"><a href="#os-rename" class="headerlink" title="os.rename()"></a>os.rename()</h3></li></ol><p>该函数的作用是将文件或路径重命名，一般调用格式为os.rename(src, dst)，即将src指向的文件或路径重命名为dst指定的名称。</p><ol start="6"><li><h3 id="os-getcwd"><a href="#os-getcwd" class="headerlink" title="os.getcwd()"></a>os.getcwd()</h3></li></ol><p>“getcwd”实际上是“get the current working directory”的简写，顾名思义，也就是说这个函数的作用是“获取当前工作路径”。在程序运行的过程中，无论物理上程序在实际存储空间的什么地方，“当前工作路径”即可认为是程序所在路径；与之相关的“相对路径”、“同目录下模块导入”等相关的操作均以“当前工作路径”为准。</p><p>在交互式环境中，返回的就是交互终端打开的位置；而在 Python 文件中，返回的则是文件所在的位置。</p><ol start="7"><li><h3 id="os-chdir"><a href="#os-chdir" class="headerlink" title="os.chdir()"></a>os.chdir()</h3></li></ol><p>“chdir”其实是“change the directory”的简写，因此os.chdir()的用处实际上是<strong>切换当前工作路径为指定路径</strong>。其中“指定路径”需要作为参数传入函数os.chdir()，该参数既可以是文本或字节型字符串，也可以是一个文件描述符，还可以是一个广义的类路径（path-like）对象。若指定路径不存在，则会抛出FileNotFoundError异常。</p><p>有了这个函数，跨目录读写文件和调用模块就会变得非常方便了，很多时候也就不必再反复将同一个文件在各个目录之间复制粘贴运行，<strong>脚本完全可以坐镇中军</strong>，<strong>在一个目录下完成对其他目录文件的操作</strong>，正所谓“运筹帷幄之中，决胜于千里之外”也。</p><h3 id="二、os-path模块"><a href="#二、os-path模块" class="headerlink" title="二、os.path模块"></a>二、os.path模块</h3><p>其实这个模块是os模块根据系统类型从另一个模块导入的，并非直接由os模块实现，比如os.name值为nt，则在os模块中执行import ntpath as path；如果os.name值为posix，则导入posixpath。</p><p>使用该模块要注意一个很重要的特性：os.path中的函数基本上是纯粹的字符串操作。换句话说，传入该模块函数的参数甚至不需要是一个有效路径，该模块也不会试图访问这个路径，而仅仅是按照“路径”的通用格式对字符串进行处理。</p><p>该模块的作用是让我们在实现相同功能的时候<strong>不必考虑具体的系统</strong>，尤其是<strong>不需要过多关注文件系统分隔符的问题</strong>。</p><ol><li><h3 id="os-path-join"><a href="#os-path-join" class="headerlink" title="os.path.join()"></a>os.path.join()</h3></li></ol><p>这是一个十分实用的函数，可以将<strong>多个传入路径组合为一个路径</strong>。</p><p>实际上是将传入的几个字符串用系统的分隔符连接起来，组合成一个新的字符串，所以一般的用法是将第一个参数作为父目录，之后每一个参数即使下一级目录，从而组合成一个新的符合逻辑的路径。</p><p>但如果传入路径中存在一个“绝对路径”格式的字符串，且这个字符串不是函数的第一个参数，那么其他在这个参数之前的所有参数都会被丢弃，余下的参数再进行组合。更准确地说，只有最后一个“绝对路径”及其之后的参数才会体现在返回结果中。（<strong>会自动识别根目录</strong>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.join(<span class="hljs-string">&quot;just&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>)<br><span class="hljs-string">&#x27;just\\do\\python\\dot\\com&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.join(<span class="hljs-string">&quot;just&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;d:/&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>)<br><span class="hljs-string">&#x27;d:/python\\dot\\com&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.join(<span class="hljs-string">&quot;just&quot;</span>, <span class="hljs-string">&quot;do&quot;</span>, <span class="hljs-string">&quot;d:/&quot;</span>, <span class="hljs-string">&quot;python&quot;</span>, <span class="hljs-string">&quot;dot&quot;</span>, <span class="hljs-string">&quot;g:/&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>)<br><span class="hljs-string">&#x27;g:/com&#x27;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><h3 id="os-path-abspath"><a href="#os-path-abspath" class="headerlink" title="os.path.abspath()"></a>os.path.abspath()</h3></li></ol><p>将传入路径规范化，返回一个相应的绝对路径格式的字符串。</p><p>也就是说当传入路径符合“绝对路径”的格式时，该函数仅仅将路径分隔符替换为适应当前系统的字符，不做其他任何操作，并将结果返回。所谓“绝对路径的格式”，其实指的就是一个字母加冒号，之后跟分隔符和字符串序列的格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.abspath(<span class="hljs-string">&quot;a:/just/do/python&quot;</span>)<br><span class="hljs-string">&#x27;a:\\just\\do\\python&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 我的系统中并没有 a 盘</span><br>    <span class="hljs-comment"># 根本不会检测路径的有效性，只是当成字符串呆板地处理</span><br></code></pre></td></tr></table></figure><ol start="3"><li><h3 id="os-path-basename"><a href="#os-path-basename" class="headerlink" title="os.path.basename()"></a>os.path.basename()</h3></li></ol><p>该函数返回传入路径的“基名”，即传入路径的最下级目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.basename(<span class="hljs-string">&quot;/ityouknow/justdopython/IAmBasename&quot;</span>)<br><span class="hljs-string">&#x27;IAmBasename&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 我的系统中同样没有这么一个路径。可见 os.path.basename() 页是单纯进行字符串处理</span><br></code></pre></td></tr></table></figure><ol start="4"><li><h3 id="os-path-dirname"><a href="#os-path-dirname" class="headerlink" title="os.path.dirname()"></a>os.path.dirname()</h3></li></ol><p>与上一个函数正好相反，返回的是最后一个分隔符前的整个字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.dirname(<span class="hljs-string">&quot;/ityouknow/justdopython/IAmBasename&quot;</span>)<br><span class="hljs-string">&#x27;/ityouknow/justdopython&#x27;</span><br></code></pre></td></tr></table></figure><ol start="5"><li><h3 id="os-path-split"><a href="#os-path-split" class="headerlink" title="os.path.split()"></a>os.path.split()</h3></li></ol><p>哈哈实际上前两个函数都是弟弟，这个函数才是老大。</p><p>函数os.path.split()的功能就是将传入路径以最后一个分隔符为界，分成两个字符串，并打包成元组的形式返回；前两个函数os.path.dirname()和os.path.basename()的返回值分别是函数os.path.split()返回值的第一个、第二个元素。就连二者的具体实现都十分真实：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">basename</span>(<span class="hljs-params">p</span>):</span><br>  <span class="hljs-string">&quot;&quot;&quot;Returns the final component of a pathname&quot;&quot;&quot;</span><br>  <span class="hljs-keyword">return</span> split(p)[<span class="hljs-number">1</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dirname</span>(<span class="hljs-params">p</span>):</span><br>  <span class="hljs-string">&quot;&quot;&quot;Returns the directory component of a pathname&quot;&quot;&quot;</span><br>  <span class="hljs-keyword">return</span> split(p)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>通过os.path.join()函数又可以把它们组合起来得到原先的路径。</p><ol start="6"><li><h3 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists()"></a>os.path.exists()</h3></li></ol><p>用于判断路径<strong>所指向的位置是否存在</strong>。若存在则返回True，不存在则返回False：</p><p>一般的用法是在需要持久化保存某些数据的场景，为避免重复创建某个文件，需要在写入前用该函数检测一下相应文件是否存在，若不存在则新建，若存在则在文件内容之后增加新的内容。</p><ol start="7"><li><h3 id="os-path-isabs"><a href="#os-path-isabs" class="headerlink" title="os.path.isabs()"></a>os.path.isabs()</h3></li></ol><p>该函数判断传入路径是否是绝对路径，若是则返回True，否则返回False。当然，仅仅是检测格式，同样不对其有效性进行任何核验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.isabs(<span class="hljs-string">&quot;a:/justdopython&quot;</span>)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><ol start="8"><li><h3 id="os-path-isfile-和-os-path-isdir"><a href="#os-path-isfile-和-os-path-isdir" class="headerlink" title="os.path.isfile() 和 os.path.isdir()"></a>os.path.isfile() 和 os.path.isdir()</h3></li></ol><p>这两个函数分别判断传入路径是否是文件或路径，注意，<strong>此处会核验路径的有效性</strong>，如果是无效路径将会持续返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 无效路径</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="hljs-string">&quot;a:/justdopython&quot;</span>)<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 有效路径</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.isfile(<span class="hljs-string">&quot;./just/plain_txt&quot;</span>)<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 无效路径</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="hljs-string">&quot;a:/justdopython/&quot;</span>)<br><span class="hljs-literal">False</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># 有效路径</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>os.path.isdir(<span class="hljs-string">&quot;./just/&quot;</span>)<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>补充：os.environ()</p><p>在 python 中通过 os.environ 可以获取有关系统的各种信息.</p><p>通过 os.environ 获取环境变量，什么是环境变量呢？环境变量是程序和操作系统之间的通信方式。有些字符不宜明文写进代码里，比如数据库密码，个人账户密码，如果写进自己本机的环境变量里，程序用的时候通过 os.environ.get() 取出来就行了。这样开发人员本机测试的时候用的是自己本机的一套密码，生产环境部署的时候，用的是公司的公共账号和密码，这样就能增加安全性。</p><p><strong>os.environ 是一个字典，是环境变量的字典</strong>。</p><p>具体操作参考：<a href="https://blog.csdn.net/happyjacob/article/details/109279118"><a href="https://blog.csdn.net/happyjacob/article/details/109279118">os.environ模块环境变量详解_桑凯旋的博客-CSDN博客</a></a></p><h2 id="python字符串格式化"><a href="#python字符串格式化" class="headerlink" title="python字符串格式化"></a>python字符串格式化</h2><p>何谓字符串格式化？</p><p>1）将变量、对象的值填充到字符串中</p><p>2）在字符串中解析python表达式</p><p>3）对字符串进行格式化显示——左对齐、右对齐等、保留有效位数等</p><p>方法：</p><ol><li>%格式化</li></ol><p>1）使用变量来代替字符串中的%s</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;可优&quot;</span><br>lover = <span class="hljs-string">&quot;柠檬小姐姐&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s爱上了%s！&quot;</span> %(name, lover))<span class="hljs-comment"># 变量name与lover会以一一对应的形式来填充%s</span><br></code></pre></td></tr></table></figure><p>2）保留有效位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pi = <span class="hljs-number">3.14159265359</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率（%.5f）有多长，爱你就有多深！&quot;</span> %(pi, )) <span class="hljs-comment">#浮点类型的变量，保留5位小数</span><br></code></pre></td></tr></table></figure><ol start="2"><li>format格式化</li></ol><p>1）使用变量来替换字符串中的{}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;可优&quot;</span><br>lover = <span class="hljs-string">&quot;柠檬小姐姐&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;爱上了&#123;&#125;！&quot;</span>.<span class="hljs-built_in">format</span>(name, lover))<span class="hljs-comment"># 变量name与lover会以一一对应的形式来&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>2）保留有效位数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pi = <span class="hljs-number">3.14159265359</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;圆周率&#123;:.5f&#125;有多长，爱你就有多深！&quot;</span>.<span class="hljs-built_in">format</span>(pi, )) <span class="hljs-comment"># 将浮点类型的变量，保留5位小数 </span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>字符串对齐</p></li><li><p><strong>f字符串</strong>格式化</p></li></ol><p>在<strong>字符串前面添加了一个f之后</strong>，即为f字符串，可以在字符串中解析变量、运行python表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;可优&quot;</span><br>lover = <span class="hljs-string">&quot;柠檬小姐姐&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>爱上了<span class="hljs-subst">&#123;lover&#125;</span>！&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 运行python表达式</span><br><span class="hljs-keyword">import</span> random<br><br>love_times = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>name = <span class="hljs-string">&quot;可优&quot;</span><br>lover = <span class="hljs-string">&quot;柠檬小姐姐&quot;</span><br>sea = <span class="hljs-string">&quot;🌊&quot;</span><br>tortoise = <span class="hljs-string">&quot;🐢&quot;</span><br><span class="hljs-comment"># 可以在f字符串中，计算Python中的表达式</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;name&#125;</span>对<span class="hljs-subst">&#123;lover&#125;</span>的爱，犹如滔滔江水绵绵不绝！<span class="hljs-subst">&#123;sea * <span class="hljs-number">3</span>&#125;</span>\n如果实在要加一个期限的话，我想是<span class="hljs-subst">&#123;love_times + <span class="hljs-number">10000</span>&#125;</span>年！<span class="hljs-subst">&#123;tortoise * <span class="hljs-number">3</span>&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取字典的值</span><br>self_info = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;可优&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">17</span>, <span class="hljs-string">&quot;lover&quot;</span>: <span class="hljs-string">&quot;柠檬小姐姐&quot;</span>&#125;<br><span class="hljs-comment"># 在f字符串中，获取字典的值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;姓名: <span class="hljs-subst">&#123;self_info[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>\n芳年: <span class="hljs-subst">&#123;self_info[<span class="hljs-string">&#x27;age&#x27;</span>]&#125;</span>\n爱人: <span class="hljs-subst">&#123;self_info[<span class="hljs-string">&#x27;lover&#x27;</span>]&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="tqdm进度条美化模块"><a href="#tqdm进度条美化模块" class="headerlink" title="tqdm进度条美化模块"></a>tqdm进度条美化模块</h2><p>只了解基本使用</p><p>tqdm是Python中专门用于进度条美化的模块，通过在非while的循环体内嵌入tqdm，可以得到一个能更好展现程序运行过程的提示进度条，本文就将针对tqdm的基本用法进行介绍。</p><p>基本用法：</p><p>在for循环体中用tqdm()包裹指定的迭代器或range()即可，下面是两个简单的例子：</p><ol><li>列表迭代器</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br><br>text = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> tqdm([<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>]):<br>    time.sleep(<span class="hljs-number">0.25</span>)<br>    text = text + char<br>    <br><span class="hljs-built_in">print</span>(text)<br></code></pre></td></tr></table></figure><img src="/images/1344061-20190131214721175-918025861.png" alt="img" style="zoom:80%;"><p>2） range()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)):<br>    time.sleep(<span class="hljs-number">0.5</span>)<br></code></pre></td></tr></table></figure><img src="/images/1344061-20190131214812656-1329418497.png" alt="img" style="zoom:67%;"><ol start="3"><li>使用trange，作为tqdm(range())的简洁替代</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-number">100</span>):<br>    time.sleep(<span class="hljs-number">0.01</span>)<br></code></pre></td></tr></table></figure><img src="/images/1344061-20190131214935098-1691543245.png" alt="img" style="zoom:50%;"><p>注：在tqdm的循环中，最好所有的print都用 tqdm.write() 替代，否则进度条会有错误</p><h2 id="python类-面向对象"><a href="#python类-面向对象" class="headerlink" title="python类 面向对象"></a>python类 面向对象</h2><p>参考：廖雪峰python教程<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017496031185408">类和实例 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p><p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去</p><p>注：判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">isinstance</span>(a,<span class="hljs-built_in">list</span>)<br></code></pre></td></tr></table></figure><ol><li>特殊类方法—— <strong>getitem</strong>   </li></ol><p>?</p><h2 id="Python异常处理——-try-except-finally"><a href="#Python异常处理——-try-except-finally" class="headerlink" title="Python异常处理—— try-except-finally"></a>Python异常处理—— try-except-finally</h2><ol><li>try-except</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:  <br>    <span class="hljs-comment">## normal block  </span><br><span class="hljs-keyword">except</span> A:  <br>    <span class="hljs-comment">## exc A block  </span><br><span class="hljs-keyword">except</span>:  <br>    <span class="hljs-comment">## exc other block  </span><br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-comment">## noError block  </span><br></code></pre></td></tr></table></figure><p>–&gt;执行normal block<br>–&gt;发现有A错误，执行 exc A block(即处理异常)<br>–&gt;结束</p><p>如果没有A错误呢？<br>–&gt;执行normal block<br>–&gt;发现B错误，开始寻找匹配B的异常处理方法，发现A，跳过，发现except others(即except:)，执行exc other block<br>–&gt;结束</p><p>如果没有错误呢？<br>–&gt;执行normal block<br>–&gt;全程没有错误，跳入else 执行noError block<br>–&gt;结束</p><p>对于except后面跟的表达式，其实就是错误的定义，可以跟2种：1）python标准异常  2）自定义异常</p><ol start="2"><li>try-except-finally</li></ol><p>实质上就是不管执行过程中有没有异常，都要执行清场工作，执行finally后面的语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:  <br>    execution block  <span class="hljs-comment">##正常执行模块  </span><br><span class="hljs-keyword">except</span> A:  <br>    exc A block <span class="hljs-comment">##发生A错误时执行  </span><br><span class="hljs-keyword">except</span> B:  <br>    exc B block <span class="hljs-comment">##发生B错误时执行  </span><br><span class="hljs-keyword">except</span>:  <br>    other block <span class="hljs-comment">##发生除了A,B错误以外的其他错误时执行  </span><br><span class="hljs-keyword">else</span>:  <br>    <span class="hljs-keyword">if</span> no exception, jump to here <span class="hljs-comment">##没有错误时执行  </span><br><span class="hljs-keyword">finally</span>:  <br>    final block  <span class="hljs-comment">##总是执行  </span><br></code></pre></td></tr></table></figure><h2 id="Python-with语句"><a href="#Python-with语句" class="headerlink" title="Python with语句"></a>Python with语句</h2><p>在实际的编码过程中，有时有一些任务，需要事先做一些设置，事后做一些清理，with能够对这样的需求进行一个比较优雅的处理，最常用的例子就是对<strong>访问文件</strong>的处理。</p><p>文件读写初级：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> f = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;c:\mytest.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-number">2</span> data = f.read()<br><span class="hljs-number">3</span> f.close()<br><br><span class="hljs-comment"># 读写时未异常处理</span><br><span class="hljs-comment"># 有可能会忘记关闭文件</span><br></code></pre></td></tr></table></figure><p>文件读写中级：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>  f = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;c:\mytest.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <br><span class="hljs-number">2</span> <span class="hljs-keyword">try</span>: <br><span class="hljs-number">3</span>     data = f.read() <br><span class="hljs-number">4</span> <span class="hljs-keyword">finally</span>: <br><span class="hljs-number">5</span>     f.close()<br><br><span class="hljs-comment"># 解决了忘记关闭文件的问题</span><br></code></pre></td></tr></table></figure><p>文件读写高级：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;c:\test.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-number">2</span>     data = f.read()<br><br><span class="hljs-comment"># 简洁、高效</span><br></code></pre></td></tr></table></figure><p>说明：</p><p>with后面接的对象返回的结果赋值给f。此例当中open函数返回的文件对象赋值给了f；with会自已获取上下文件的异常信息。</p><p>with后面返回的对象要求必须有两个方法：<code>__enter__()</code>/<code>__exit__()</code></p><p><strong>with…as语句执行顺序：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> expression <span class="hljs-keyword">as</span> variable<br></code></pre></td></tr></table></figure><p>–&gt;首先执行expression里面的__enter__函数，它的返回值会赋给as后面的variable，想让它返回什么就返回什么，只要你知道怎么处理就可以了，如果不写as variable，返回值会被忽略。</p><p>–&gt;然后，开始执行with-block中的语句，不论成功失败(比如发生异常、错误，设置sys.exit())，在with-block执行完成后，会执行expression中的__exit__函数。</p><p><code>with</code>通常用作上下文管理器，简单理解：当要进行固定的进入、返回操作时，<strong>可以将对应需要的操作，放在with语句块中</strong>。 比如文件的读写等。</p><p>通常在pytorch中常用语句：<code>with torch.no_grad:</code></p><p>pytorch中对于tensor的计算操作，默认是要进行计算图构建的；但是有些情况下(evaluation)是不需要生成计算图的，在这种情况下可以使用<code>with torch.no_grad:</code>，强制之后的内容不进行计算图构建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> torch.no_grad:<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> testloader:<br>        images, labels = data<br>        outputs = net(images)<br>        _, predicted = torch.<span class="hljs-built_in">max</span>(outputs.data, <span class="hljs-number">1</span>)<br>        total += labels.size(<span class="hljs-number">0</span>)<br>        correct += (predicted == labels).<span class="hljs-built_in">sum</span>().item()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Accuracy of the network on the 10000 test images: %d %%&#x27;</span> % (<br>    <span class="hljs-number">100</span> * correct / total))        <br><span class="hljs-built_in">print</span>(outputs)<br><br><span class="hljs-comment"># 此时的outputs是没有grad属性的！</span><br></code></pre></td></tr></table></figure><h2 id="Python函数装饰器"><a href="#Python函数装饰器" class="headerlink" title="Python函数装饰器"></a>Python函数装饰器</h2><p>装饰器是修改其他函数功能的函数，有助于让代码更简洁。</p><p>理解装饰器比较难，首先从“函数”开始逐步理解：</p><p>1.函数基础</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hi</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;yasoob&quot;</span></span>):</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hi &quot;</span> + name<br> <br><span class="hljs-built_in">print</span>(hi())<br><span class="hljs-comment"># output: &#x27;hi yasoob&#x27;</span><br> <br><span class="hljs-comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span><br>greet = hi<br><span class="hljs-comment"># 我们这里没有在使用小括号，因为我们并不是在调用hi函数</span><br><span class="hljs-comment"># 而是在将它放在greet变量里头。我们尝试运行下这个</span><br> <br><span class="hljs-built_in">print</span>(greet())<br><span class="hljs-comment"># output: &#x27;hi yasoob&#x27;</span><br> <br><span class="hljs-comment"># 如果我们删掉旧的hi函数，看看会发生什么！</span><br><span class="hljs-keyword">del</span> hi<br><span class="hljs-built_in">print</span>(hi())<br><span class="hljs-comment">#outputs: NameError</span><br> <br><span class="hljs-built_in">print</span>(greet())<br><span class="hljs-comment">#outputs: &#x27;hi yasoob&#x27;</span><br></code></pre></td></tr></table></figure><p>2.在函数中定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hi</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;yasoob&quot;</span></span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now you are inside the hi() function&quot;</span>)<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span>():</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;now you are in the greet() function&quot;</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">welcome</span>():</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;now you are in the welcome() function&quot;</span><br> <br>    <span class="hljs-built_in">print</span>(greet())<br>    <span class="hljs-built_in">print</span>(welcome())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now you are back in the hi() function&quot;</span>)<br> <br>hi()<br><span class="hljs-comment">#output:now you are inside the hi() function</span><br><span class="hljs-comment">#       now you are in the greet() function</span><br><span class="hljs-comment">#       now you are in the welcome() function</span><br><span class="hljs-comment">#       now you are back in the hi() function</span><br> <br><span class="hljs-comment"># 上面展示了无论何时你调用hi(), greet()和welcome()将会同时被调用。</span><br><span class="hljs-comment"># 然后greet()和welcome()函数在hi()函数之外是不能访问的，比如：</span><br> <br>greet()<br><span class="hljs-comment">#outputs: NameError: name &#x27;greet&#x27; is not defined</span><br></code></pre></td></tr></table></figure><p>3.从函数中返回函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hi</span>(<span class="hljs-params">name=<span class="hljs-string">&quot;yasoob&quot;</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">greet</span>():</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;now you are in the greet() function&quot;</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">welcome</span>():</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;now you are in the welcome() function&quot;</span><br> <br>    <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;yasoob&quot;</span>:<br>        <span class="hljs-keyword">return</span> greet<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> welcome<br> <br>a = hi()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span><br> <br><span class="hljs-comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span><br><span class="hljs-comment">#现在试试这个</span><br> <br><span class="hljs-built_in">print</span>(a())<br><span class="hljs-comment">#outputs: now you are in the greet() function</span><br></code></pre></td></tr></table></figure><p>再次看看这个代码。在 if/else 语句中我们返回 greet 和 welcome，而不是 greet() 和 welcome()。为什么那样？这是因为当你把一对小括号放在后面，这个函数就会执行；然而<strong>如果你不放括号在它后面，那它可以被到处传递</strong>，并且可以赋值给别的变量而不去执行它。</p><p>4.将函数作为参数传给另一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hi</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hi yasoob!&quot;</span><br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">doSomethingBeforeHi</span>(<span class="hljs-params">func</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am doing some boring work before executing hi()&quot;</span>)<br>    <span class="hljs-built_in">print</span>(func())<br> <br>doSomethingBeforeHi(hi)<br><span class="hljs-comment">#outputs:I am doing some boring work before executing hi()</span><br><span class="hljs-comment">#        hi yasoob!</span><br></code></pre></td></tr></table></figure><p>在外层函数的内部，参数仍然作为函数使用</p><p>5.你的第一个装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a_new_decorator</span>(<span class="hljs-params">a_func</span>):</span><br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapTheFunction</span>():</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am doing some boring work before executing a_func()&quot;</span>)<br> <br>        a_func()<br> <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am doing some boring work after executing a_func()&quot;</span>)<br> <br>    <span class="hljs-keyword">return</span> wrapTheFunction<br> <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a_function_requiring_decoration</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am the function which needs some decoration to remove my foul smell&quot;</span>)<br> <br>a_function_requiring_decoration()<br><span class="hljs-comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span><br> <br>a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)<br><span class="hljs-comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span><br> <br>a_function_requiring_decoration()<br><span class="hljs-comment">#outputs:I am doing some boring work before executing a_func()</span><br><span class="hljs-comment">#        I am the function which needs some decoration to remove my foul smell</span><br><span class="hljs-comment">#        I am doing some boring work after executing a_func()</span><br></code></pre></td></tr></table></figure><p>你看明白了吗？我们刚刚应用了之前学习到的原理。这正是 python 中装饰器做的事情！它们封装一个函数，并且用这样或者那样的方式来修改它的行为。现在你也许疑惑，我们在代码里并没有使用 <strong>@</strong> 符号？那只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用 <strong>@</strong> 来运行之前的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@a_new_decorator</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a_function_requiring_decoration</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I am the function which needs some decoration to &quot;</span><br>          <span class="hljs-string">&quot;remove my foul smell&quot;</span>)<br> <br>a_function_requiring_decoration()<br><span class="hljs-comment">#outputs: I am doing some boring work before executing a_func()</span><br><span class="hljs-comment">#         I am the function which needs some decoration to remove my foul smell</span><br><span class="hljs-comment">#         I am doing some boring work after executing a_func()</span><br> <br><span class="hljs-comment">#the @a_new_decorator is just a short way of saying:</span><br>a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)<br></code></pre></td></tr></table></figure><p>装饰器常见的应用场景：授权（web应用的端点，在Flask、Django web框架中大量使用）、日志Logging等</p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning-Objects Detection</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统学习ROS（六）</title>
    <link href="/2021/05/21/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <url>/2021/05/21/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>服务于上层应用，导航功能是十分重要且基础的功能之一，ROS中的Gmapping包可以方便地实现导航功能。导航不是单一的功能，它由多个分解的子功能组成，本文进行简单概述并介绍地图服务。</p><span id="more"></span><h2 id="十一、机器人导航"><a href="#十一、机器人导航" class="headerlink" title="十一、机器人导航"></a>十一、机器人导航</h2><p>一、ROS导航功能包简介</p><p>1.总结下来，涉及的关键技术有如下五点:</p><ol><li>全局地图</li><li>自身定位</li><li>路径规划</li><li>运动控制</li><li>环境感知</li></ol><p>2.ROS官方提供的导航功能包图示：</p><p><img src="/images/image-20210521191104511.png" alt="image-20210521191104511"></p><p>（方框中都是ROS功能包，白色必须、灰色可选、蓝色是机器人硬件提供的）</p><p>（1）全局地图：右上角的<strong>map_server</strong>用于提供全局地图，但是需要先画一张地图–&gt;<strong>SLAM</strong>；</p><p>（2）自身定位：左侧<strong>amcl+sensor transforms</strong>: 用传感器感知到的的周边信息，与全局地图匹配;</p><p>​                                            <strong>odometry source</strong>: 用里程计估算机器人位置</p><p>​                                如果在室外，那么可用GPS直接实现定位；但在室内就要依赖上面的amcl或odometry；</p><p>（3）路径规划：中间的move_base；</p><pre><code>     路径规划分为两种：1.**全局**路径规划：**global_planner**，基于全局地图的；</code></pre><p>​                     2.<strong>本地</strong>路径规划：<strong>local_planner</strong>，基于传感器实时感知到的小范围的地图；–&gt;帮助机器人<strong>躲避动态障碍物</strong></p><p>（4）运动控制：下面的base controller</p><p>（5）环境感知：右边的sensor sources； 在本地路径规划(避障)、SLAM中用到。</p><h3 id="3-上述功能中，绘制地图的工具——SLAM"><a href="#3-上述功能中，绘制地图的工具——SLAM" class="headerlink" title="3.上述功能中，绘制地图的工具——SLAM"></a>3.上述功能中，绘制地图的工具——SLAM</h3><p>（1）在 ROS 中，较为常用的 SLAM 实现也比较多，比如: gmapping、hector_slam、cartographer、rgbdslam、ORB_SLAM ….</p><p>（2）当然如果要完成 SLAM ，<strong>机器人必须要具备感知外界环境的能力</strong>，尤其是要具备获取周围环境<strong>深度信息</strong>的能力。感知的实现需要依赖于传感器，比如: 激光雷达、摄像头、RGB-D摄像头…</p><p>（3）SLAM 可以用于地图生成，而生成的地图还需要被保存以待后续使用，在 <strong>ROS 中保存地图的功能包是 map_server</strong></p><p>（4）辨析：SLAM不等于导航，SLAM只是实现地图构建和即使定位，是导航功能中的重要一环。</p><p>二、导航中的坐标系</p><p>1.简介</p><p>通常，以机器人的出发点为原点创建坐标系，但是这个这个坐标系不是客观存在的，定位实现需要依赖于机器人自身，机器人需要<strong>逆向推导参考系原点</strong>并<strong>计算坐标系相对关系</strong></p><p>两种方式：</p><p>（1）通过<strong>里程计</strong>定位:时时收集机器人的速度信息计算并发布机器人坐标系与父级参考系的相对关系；</p><p>​                通俗解释：里程计的速度*走过的时间=现在离原点的距离</p><p>​                缺点:里程计存在<strong>累计误差</strong>，不利于长距离或长期定位</p><p>（2）通过<strong>传感器</strong>定位:通过传感器收集外界环境信息通过匹配计算并发布机器人坐标系与父级参考系的相对关系。</p><p>​                缺点:传感器定位会出现跳变的情况，且传感器定位在<strong>标志物较少的环境下，其定位精度会大打折扣</strong></p><p>2.导航中的坐标系变换</p><p>不管使用哪种定位实现，最终都要发布<strong>机器人坐标系</strong>与其<strong>父级坐标系</strong>的相对关系；</p><p>（1）机器人坐标系：使用机器人模型中的根坐标系(base_link或base_footprint)</p><p>（2）父级坐标系：里程计定位时odom；传感器定位时map；</p><p>​            一般的继承关系：<strong>map/odom</strong> —&gt; <strong>base_link/base_footprint</strong> —&gt; laser、camera、wheel等一堆</p><p>​            当里程计和传感器<strong>结合使用</strong>时，将map设置为odom的父级：</p><p>​                                                <strong>map</strong> —&gt; <strong>odom</strong> —&gt; <strong>base_link/base_footprint</strong> —&gt; laser、camera、wheel等一堆</p><p>3.导航条件说明</p><p>（1）它是为<strong>差速驱动的轮式机器人</strong>设计的：它假设底盘受到理想的运动命令的控制并可实现预期的结果，命令的格式为：x速度分量，y速度分量，角速度(theta)分量</p><p>（2）它需要在底盘上安装一个<strong>单线激光雷达</strong>。这个激光雷达用于构建地图和定位</p><h3 id="三、导航实现"><a href="#三、导航实现" class="headerlink" title="三、导航实现"></a>三、导航实现</h3><p>1.SLAM建图：需要键盘控制机器人运动，逐步建图</p><p>  <strong>探索式的</strong>SLAM建图：给机器人一个大致目标，机器人自己规划路径过去</p><p>2.准备工作</p><p>（1）安装功能包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo  apt  install  ros-melodic-gmapping  <span class="comment">#SLAM建图</span></span><br><span class="line">sudo  apt  install  ros-melodic-<span class="built_in">map</span>-server  <span class="comment">#保存、读取地图</span></span><br><span class="line">sudo  apt  install  ros-melodic-navigation  <span class="comment">#定位、路径规划</span></span><br></pre></td></tr></table></figure><p>（2）创建功能包，导入依赖：<code>gmapping</code>  <code>map_server</code>  <code>amcl</code>  <code>move_base</code></p><p><strong>3.gmapping</strong></p><p>（1）gmapping可以根据移动机器人里程计数据和激光雷达数据来绘制二维的栅格地图，gmapping对硬件也有一定的要求：</p><ul><li>该移动机器人可以发布<strong>里程计消息</strong></li><li>机器人需要发布<strong>雷达消息</strong>(该消息可以通过水平固定安装的雷达发布，或者也可以将<strong>深度相机消息</strong>转换成雷达消息)</li></ul><p>（2）gmapping节点说明</p><p>核心节点：<strong>slam_gmapping</strong> (简略说明)</p><ul><li><p>订阅的Topic</p></li><li><p>发布的Topic</p></li></ul><p>​        map_metadata: 地图元数据，包括地图的宽度、高度、分辨率等</p><p>​        map: 地图栅格数据; 在Rviz中订阅它！</p><p>​        ~entropy：机器人姿态分布熵估计(值越大，不确定性越大)</p><ul><li>参数</li><li>所需要的坐标变换</li><li>发布的坐标变换</li></ul><p>参考官网：<a href="http://wiki.ros.org/gmapping">http://wiki.ros.org/gmapping</a>  里面有众多参数，需要了解底层原理才能设置；否则使用默认值即可。</p><p>（3）gmapping节点相关的launch文件编写</p><p>可以参考 github 的演示 launch文件：<a href="https://github.com/ros-perception/slam_gmapping/blob/melodic-devel/gmapping/launch/slam_gmapping_pr2.launch">https://github.com/ros-perception/slam_gmapping/blob/melodic-devel/gmapping/launch/slam_gmapping_pr2.launch</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;use_sim_time&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 是否为仿真环境；是则设置为true --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gmapping&quot;</span> <span class="attr">type</span>=<span class="string">&quot;slam_gmapping&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slam_gmapping&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;scan&quot;</span> <span class="attr">to</span>=<span class="string">&quot;scan&quot;</span>/&gt;</span>   <span class="comment">&lt;!-- 雷达话题 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;map_update_interval&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5.0&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 每5s更新一次地图 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;maxUrange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;16.0&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 雷达最长探测距离 --&gt;</span></span><br><span class="line">        </span><br><span class="line">       <span class="comment">&lt;!-- 关键参数：坐标系 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;base_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;base_footprint&quot;</span>/&gt;</span><span class="comment">&lt;!--底盘坐标系；如果用的是base_link，则要修改--&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;odom_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;odom&quot;</span>/&gt;</span> <span class="comment">&lt;!--里程计坐标系--&gt;</span></span><br><span class="line">        </span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;sigma&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;kernelSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lstep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;astep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;iterations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lsigma&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.075&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ogain&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lskip&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;srr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;srt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;stt&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.2&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;linearUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;angularUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;temporalUpdate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;resampleThreshold&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;particles&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;xmin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-50.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ymin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-50.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;xmax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ymax&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50.0&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;delta&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.05&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;llsamplerange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;llsamplestep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.01&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lasamplerange&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.005&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;lasamplestep&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.005&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 坐标变换关系发布节点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以保存 rviz 配置并后期直接使用--&gt;</span>s</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;node pkg=&quot;rviz&quot; type=&quot;rviz&quot; name=&quot;rviz&quot; args=&quot;-d $(find my_nav_sum)/rviz/gmapping.rviz&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（4）启动建图仿真</p><p>1.首先启动之前编写好的机器人节点（配有雷达）</p><p>2.启动Rviz（已集成在上述gmapping的launch文件中），添加<code>RobotModel</code>、<code>LaserScan</code>插件，添加<code>Map</code>插件并将话题设置为<code>map</code>（gmapping节点自己发布的话题） —&gt;配置好之后可以保存配置，方便后续复用</p><p>3.配置启动完成后，启动键盘控制节点，控制机器人运动，进行建图</p><p>4.map_server</p><p>当节点关闭时，数据也会被一并释放，我们需要将栅格地图<strong>序列化</strong>到的磁盘以持久化存储，后期还要通过<strong>反序列化</strong>读取磁盘的地图数据再执行后续操作；</p><p>map_server功能包中提供了两个节点: </p><p>（1） map_saver ，用于将栅格地图保存到磁盘</p><p>订阅的topic：map(nav_msgs/OccupancyGrid)</p><p>地图保存的launch文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;filename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(find mycar_nav)/map/nav&quot;</span> /&gt;</span>  <span class="comment">&lt;!-- value 指定保存的路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;map_save&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">type</span>=<span class="string">&quot;map_saver&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-f $(arg filename)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改value指定的路径即可，其他不用改</p><p>保存结果解释：</p><p>xxx.pgm 本质是一张图片，直接使用图片查看程序即可打开。</p><p>xxx.yaml 保存的是地图的元数据信息，用于描述图片，其格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.图片路径</span></span><br><span class="line">image: /home/rosmelodic/ws02_nav/src/mycar_nav/<span class="built_in">map</span>/nav.pgm</span><br><span class="line"><span class="comment">#2.地图刻度尺，单位：米/像素</span></span><br><span class="line">resolution: <span class="number">0.050000</span></span><br><span class="line"><span class="comment">#3.地图的位姿：想对于rviz中原点的位姿</span></span><br><span class="line">origin: [-<span class="number">50.000000</span>, -<span class="number">50.000000</span>, <span class="number">0.000000</span>]</span><br><span class="line"><span class="comment">#4.取反（黑变白，白变黑）</span></span><br><span class="line">negate: <span class="number">0</span></span><br><span class="line"><span class="comment">#5.占用阈值</span></span><br><span class="line">occupied_thresh: <span class="number">0.65</span></span><br><span class="line"><span class="comment">#6.空闲阈值</span></span><br><span class="line">free_thresh: <span class="number">0.196</span>            <span class="comment">#5、6一起决定障碍物</span></span><br></pre></td></tr></table></figure><p>（2） map_server，读取磁盘的栅格地图并以服务的方式提供出去。</p><p>launch文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置地图的配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span> <span class="attr">default</span>=<span class="string">&quot;nav.yaml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 运行地图服务器，并且加载设置的地图--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">type</span>=<span class="string">&quot;map_server&quot;</span> <span class="attr">args</span>=<span class="string">&quot;$(find mycar_nav)/map/$(arg map)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在rviz中使用map组建订阅map话题即可看见地图</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统学习ROS（五）</title>
    <link href="/2021/05/21/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/05/21/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>学习了URDF语法以及Xacro优化之后，本文介绍URDF集成Gazebo以及URDF、Gazebo与Rviz的综合使用。</p><span id="more"></span><h2 id="URDF集成Gazebo"><a href="#URDF集成Gazebo" class="headerlink" title="URDF集成Gazebo"></a>URDF集成Gazebo</h2><p>一、基本集成流程</p><p>1.创建功能包，依赖包有: urdf、xacro、gazebo_ros、gazebo_ros_control、gazebo_plugins</p><p>2.当 URDF 需要与 Gazebo 集成时，<strong>和 Rviz 有明显区别:</strong></p><ul><li><p>必须使用 <strong>collision 标签</strong>，因为既然是仿真环境，那么必然涉及到碰撞检测，collision 提供碰撞检测的依据。</p></li><li><p>必须使用 <strong>inertial 标签</strong>，此标签标注了当前机器人某个刚体部分的惯性矩阵，用于一些力学相关的仿真计算。</p></li><li><p>颜色设置，也需要重新使用 <strong>gazebo 标签</strong>标注，因为之前的颜色设置为了方便调试包含透明度，仿真环境下没有此选项。</p></li></ul><p>3.urdf举例（知识点讲解在注释中）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;robot name=<span class="string">&quot;mycar&quot;</span>&gt;</span><br><span class="line">    &lt;link name=<span class="string">&quot;base_link&quot;</span>&gt;</span><br><span class="line">        &lt;visual&gt;</span><br><span class="line">            &lt;geometry&gt;</span><br><span class="line">                &lt;box size=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span><br><span class="line">            &lt;/geometry&gt;</span><br><span class="line">            &lt;origin xyz=<span class="string">&quot;0.0 0.0 0.0&quot;</span> rpy=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span><br><span class="line">            &lt;material name=<span class="string">&quot;yellow&quot;</span>&gt;</span><br><span class="line">                &lt;color rgba=<span class="string">&quot;0.5 0.3 0.0 1&quot;</span> /&gt;</span><br><span class="line">            &lt;/material&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;collision&gt;  <span class="comment">#碰撞属性</span></span><br><span class="line">            &lt;geometry&gt;  <span class="comment">#如果link是标准的几何形状，则和link的visual属性一致</span></span><br><span class="line">                &lt;box size=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span><br><span class="line">            &lt;/geometry&gt;</span><br><span class="line">            &lt;origin xyz=<span class="string">&quot;0.0 0.0 0.0&quot;</span> rpy=<span class="string">&quot;0.0 0.0 0.0&quot;</span> /&gt;</span><br><span class="line">        &lt;/collision&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;inertial&gt;  <span class="comment">#惯性矩阵 需要结合link的质量与外形参数动态生成</span></span><br><span class="line">            &lt;origin xyz=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span><br><span class="line">            &lt;mass value=<span class="string">&quot;6&quot;</span> /&gt;  <span class="comment">#质量</span></span><br><span class="line">            &lt;inertia ixx=<span class="string">&quot;1&quot;</span> ixy=<span class="string">&quot;0&quot;</span> ixz=<span class="string">&quot;0&quot;</span> iyy=<span class="string">&quot;1&quot;</span> iyz=<span class="string">&quot;0&quot;</span> izz=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">        &lt;/inertial&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;gazebo reference=<span class="string">&quot;base_link&quot;</span>&gt;  <span class="comment">#颜色设置</span></span><br><span class="line">        &lt;material&gt;Gazebo/Black&lt;/material&gt;</span><br><span class="line">    &lt;/gazebo&gt;</span><br><span class="line"></span><br><span class="line">&lt;/robot&gt;</span><br></pre></td></tr></table></figure><p>4.launch文件中集成gazebo</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将 Urdf 文件的内容加载到参数服务器</span></span><br><span class="line">    &lt;param name=<span class="string">&quot;robot_description&quot;</span> textfile=<span class="string">&quot;$(find demo02_urdf_gazebo)/urdf/urdf01_helloworld.urdf&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动gazebo</span></span><br><span class="line">    &lt;include file=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span> /&gt;  <span class="comment">#用gazebo提供的一个示例：empty_world</span></span><br><span class="line">                                                                                                                                               <span class="comment">#是一个空的仿真环境</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#在 gazebo 中显示机器人模型 </span></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;gazebo_ros&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;spawn_model&quot;</span> name=<span class="string">&quot;model&quot;</span> args=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>5.常见的几何体<strong>惯性矩阵公式封装</strong></p><p>球体惯性矩阵</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;sphere_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">iyy</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">izz</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure><p>圆柱惯性矩阵</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;cylinder_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r h&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">iyz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*r*r/2&#125;&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure><p>立方体惯性矩阵</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;Box_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m l w h&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(h*h + l*l)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(w*w + l*l)/12&#125;&quot;</span> <span class="attr">iyz</span>= <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*(w*w + h*h)/12&#125;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br></pre></td></tr></table></figure><p>二、实操</p><p>每个部件分别用一个xacro文件，由于要在gazebo中仿真，所以要为每个link设置<collision>标签、<inertial>标签；</inertial></collision></p><p>同时，还要先编写惯性矩阵算法宏的xacro文件，将上面三种几何体的封装放入其中。</p><p>（代码太长，避免视觉疲劳，不再放出，需要就查）</p><p>Tip：惯性矩阵文件如下，<strong>特别注意</strong>，在集成所有部件的xacro文件中，<strong>一定要先include惯性矩阵文件</strong>，否则后面无法解析宏！！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;base&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Macro for inertia matrix --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;sphere_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">ixy</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ixz</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> <span class="attr">iyz</span>=<span class="string">&quot;0&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;2*m*r*r/5&#125;&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;cylinder_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m r h&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(3*r*r+h*h)/12&#125;&quot;</span> <span class="attr">iyz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*r*r/2&#125;&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;Box_inertial_matrix&quot;</span> <span class="attr">params</span>=<span class="string">&quot;m l w h&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">inertial</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">mass</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;m&#125;&quot;</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">inertia</span> <span class="attr">ixx</span>=<span class="string">&quot;$&#123;m*(h*h + l*l)/12&#125;&quot;</span> <span class="attr">ixy</span> = <span class="string">&quot;0&quot;</span> <span class="attr">ixz</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">iyy</span>=<span class="string">&quot;$&#123;m*(w*w + l*l)/12&#125;&quot;</span> <span class="attr">iyz</span>= <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">izz</span>=<span class="string">&quot;$&#123;m*(w*w + h*h)/12&#125;&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">inertial</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三、Gazebo仿真环境搭建</p><p><strong>方式1：直接添加内置组建</strong></p><p>比如添加长方体、球体、街道、树木等等；</p><p>添加完毕后，选择 file —&gt; Save World as 选择保存路径(功能包下: worlds 目录)，文件名自定义，后缀名设置为 .world</p><p>在launch文件中启动时，只需要修改include下面的arg参数即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;param name=<span class="string">&quot;robot_description&quot;</span> command=<span class="string">&quot;$(find xacro)/xacro $(find demo02_urdf_gazebo)/urdf/xacro/my_base_camera_laser.urdf.xacro&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;include file=<span class="string">&quot;$(find gazebo_ros)/launch/empty_world.launch&quot;</span>&gt;</span><br><span class="line">        &lt;arg name=<span class="string">&quot;world_name&quot;</span> value=<span class="string">&quot;$(find demo02_urdf_gazebo)/worlds/hello.world&quot;</span> /&gt;  <span class="comment">#在include下添加arg(使用自己搭建的仿真环境)</span></span><br><span class="line">    &lt;/include&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;gazebo_ros&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;spawn_model&quot;</span> name=<span class="string">&quot;model&quot;</span> args=<span class="string">&quot;-urdf -model mycar -param robot_description&quot;</span>  /&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>拓：在insert中可以直接使用模型库，下载官方提供的模型库：<code>git clone https://github.com/osrf/gazebo_models</code></p><p><strong>方式2：自定义仿真环境</strong></p><p>在gazebo中选择左上角<strong>Edit —&gt; Exit Building Editor</strong>，这一步主要用于<strong>搭建房间墙体</strong>！</p><p>然后可以像方式1一样在房子中间加入<strong>球体、长方体</strong>等；</p><p>最后保存为 world 文件(保存路径功能包下的: worlds)，然后像方式1一样用launch文件启动</p><h2 id="URDF、Gazebo、Rviz综合使用"><a href="#URDF、Gazebo、Rviz综合使用" class="headerlink" title="URDF、Gazebo、Rviz综合使用"></a>URDF、Gazebo、Rviz综合使用</h2><p>在rviz中控制机器人运动：arbotix            在gazebo中机器人运动控制：<code>ros_control</code></p><p><strong>一、机器人运动控制</strong></p><p>1.ros_control简介</p><p>开发阶段为了提高效率是在仿真平台上测试的，部署时又有不同的实体机器人平台，不同平台的实现是有差异的，如何保证 ROS 程序的<strong>可移植性</strong>？ROS 内置的解决方式是 ros_control。</p><p>ros_control 是一套机器人控制的中间件，是一套规范，不同的机器人平台只要按照这套规范实现，那么就可以保证 与ROS 程序兼容。</p><p>简而言之，<code>ros_control</code>是<strong>ROS程序</strong>与<strong>机器人平台</strong>的接口</p><p>2.运动控制实现流程：</p><p>（1）已经创建完毕的机器人模型，编写一个单独的 xacro 文件，为机器人模型<strong>添加传动装置</strong>以及<strong>控制器</strong></p><p>（2）将此文件集成进xacro文件</p><p>（3）启动 Gazebo 并发布 /cmd_vel 消息控制机器人运动</p><p>控制关节运动：<strong>为joint添加</strong>传动装置及控制器的xacro文件：（重点实现在于<strong>transmission标签</strong>，但是这些内容都是<strong>可以在官方文档中直接复制</strong>的）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_move&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 传动实现:用于连接控制器与关节 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;joint_trans&quot;</span> <span class="attr">params</span>=<span class="string">&quot;joint_name&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Transmission is important to link the joints and the controller --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;_trans&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;joint_name&#125;_motor&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 每一个驱动轮都需要配置传动装置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:joint_trans</span> <span class="attr">joint_name</span>=<span class="string">&quot;left_wheel2base_link&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:joint_trans</span> <span class="attr">joint_name</span>=<span class="string">&quot;right_wheel2base_link&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--差速 控制器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;differential_drive_controller&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_diff_drive.so&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rosDebugLevel</span>&gt;</span>Debug<span class="tag">&lt;/<span class="name">rosDebugLevel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">publishWheelTF</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publishWheelTF</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">publishTf</span>&gt;</span>1<span class="tag">&lt;/<span class="name">publishTf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">publishWheelJointState</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publishWheelJointState</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">alwaysOn</span>&gt;</span>true<span class="tag">&lt;/<span class="name">alwaysOn</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>100.0<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">legacyMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">legacyMode</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">leftJoint</span>&gt;</span>left_wheel2base_link<span class="tag">&lt;/<span class="name">leftJoint</span>&gt;</span> <span class="comment">&lt;!-- 左轮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">rightJoint</span>&gt;</span>right_wheel2base_link<span class="tag">&lt;/<span class="name">rightJoint</span>&gt;</span> <span class="comment">&lt;!-- 右轮 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelSeparation</span>&gt;</span>$&#123;base_link_radius * 2&#125;<span class="tag">&lt;/<span class="name">wheelSeparation</span>&gt;</span> <span class="comment">&lt;!-- 车轮间距 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelDiameter</span>&gt;</span>$&#123;wheel_radius * 2&#125;<span class="tag">&lt;/<span class="name">wheelDiameter</span>&gt;</span> <span class="comment">&lt;!-- 车轮直径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">broadcastTF</span>&gt;</span>1<span class="tag">&lt;/<span class="name">broadcastTF</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelTorque</span>&gt;</span>30<span class="tag">&lt;/<span class="name">wheelTorque</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wheelAcceleration</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">wheelAcceleration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">commandTopic</span>&gt;</span>cmd_vel<span class="tag">&lt;/<span class="name">commandTopic</span>&gt;</span> <span class="comment">&lt;!-- 运动控制话题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">odometryFrame</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometryFrame</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">odometryTopic</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometryTopic</span>&gt;</span> <span class="comment">&lt;!-- 里程计话题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">robotBaseFrame</span>&gt;</span>base_footprint<span class="tag">&lt;/<span class="name">robotBaseFrame</span>&gt;</span> <span class="comment">&lt;!-- 根坐标系 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发布控制信息：（话题<code>cmd_vel</code>）</p><p>方法1：<code>rostopic pub -r 10 /cmd_vel geometry_msgs/Twist &#39;&#123;linear: &#123;x: 0.2, y: 0, z: 0&#125;, angular: &#123;x: 0, y: 0, z: 0.5&#125;&#125;&#39;</code></p><p>方法2：<strong>键盘控制节点</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rosrun teleop_twist_keyboard teleop_twist_keyboard.py  _speed:=<span class="number">0.3</span>  _turn:=<span class="number">0.5</span></span><br><span class="line"><span class="comment">#_speed:=0.3  _turn:=0.5分别设置线速度、角速度</span></span><br></pre></td></tr></table></figure><p>（4）Rviz查看里程计信息</p><p>编写新的launch文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;!-- 启动 rviz --&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;rviz&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;rviz&quot;</span> name=<span class="string">&quot;rviz&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 关节以及机器人状态发布节点 --&gt;</span><br><span class="line">    &lt;node name=<span class="string">&quot;joint_state_publisher&quot;</span> pkg=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span><br><span class="line">    &lt;node name=<span class="string">&quot;robot_state_publisher&quot;</span> pkg=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>参考坐标设为<code>odom</code>，添加<code>RobotModel</code>组件，添加组件<code>Odometry</code>并设置topic为<code>odom</code></p><p><strong>3.雷达仿真</strong></p><p>在小车搭建好的基础上，只需要添加单独的xacro文件配置雷达，然后将该xacro集成即可。</p><p>雷达的xacro文件：（<strong>官网的实现，直接复制粘贴</strong>）</p><p>​    Tip：<strong>这里才是真正的仿真雷达</strong>，前面的<code>demo_ladar.xacro</code>只是为雷达提供了一个几何描述！！！所以这里的雷达，要通过reference参数连接到前面已经设置好的laser link上！</p><p><strong>官网文件扒下来，只需要改两个地方：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. reference修改为机器人模型中对应的link名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. &lt;frameName&gt;也修改为该link名称</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_sensors&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 雷达 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;laser&quot;</span>&gt;</span>   <span class="comment">&lt;!--  laser是小车上一个link的名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sensor</span> <span class="attr">type</span>=<span class="string">&quot;ray&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rplidar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pose</span>&gt;</span>0 0 0 0 0 0<span class="tag">&lt;/<span class="name">pose</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">visualize</span>&gt;</span>true<span class="tag">&lt;/<span class="name">visualize</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>5.5<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ray</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scan</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">samples</span>&gt;</span>360<span class="tag">&lt;/<span class="name">samples</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resolution</span>&gt;</span>1<span class="tag">&lt;/<span class="name">resolution</span>&gt;</span>   <span class="comment">&lt;!--  分辨率，表示发射射线的频率  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">min_angle</span>&gt;</span>-3<span class="tag">&lt;/<span class="name">min_angle</span>&gt;</span>  <span class="comment">&lt;!--  可转动的弧度rad  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">max_angle</span>&gt;</span>3<span class="tag">&lt;/<span class="name">max_angle</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">scan</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">range</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">min</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">min</span>&gt;</span> <span class="comment">&lt;!--  小于0.1m采样无效  --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">max</span>&gt;</span>30.0<span class="tag">&lt;/<span class="name">max</span>&gt;</span> <span class="comment">&lt;!--  大于30m采样无效  --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resolution</span>&gt;</span>0.01<span class="tag">&lt;/<span class="name">resolution</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">range</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noise</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>gaussian<span class="tag">&lt;/<span class="name">type</span>&gt;</span>   <span class="comment">&lt;!--  高斯噪声，为了仿真而设置  --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mean</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">mean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stddev</span>&gt;</span>0.01<span class="tag">&lt;/<span class="name">stddev</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">noise</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ray</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_rplidar&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_laser.so&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">topicName</span>&gt;</span>/scan<span class="tag">&lt;/<span class="name">topicName</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">frameName</span>&gt;</span>laser<span class="tag">&lt;/<span class="name">frameName</span>&gt;</span>  <span class="comment">&lt;!--  与reference一样，都必须设置为雷达连杆的名字  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sensor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Rviz中显示雷达数据：</p><p>添加组件<code>LaserScan</code>并设置话题为<code>/scan</code></p><p><strong>4.摄像头仿真</strong></p><p>和雷达一样，只需要添加单独的xacro文件配置摄像头，然后将该xacro集成即可</p><p>摄像头配置xacro：（<strong>官网文件直接复制</strong>！）</p><p><strong>官网文件扒下来，只需要改两个地方：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. reference修改为机器人模型中对应的link名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. &lt;frameName&gt;也修改为该link名称</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_sensors&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 被引用的link --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类型设置为 camara --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sensor</span> <span class="attr">type</span>=<span class="string">&quot;camera&quot;</span> <span class="attr">name</span>=<span class="string">&quot;camera_node&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>30.0<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span> <span class="comment">&lt;!-- 更新频率 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 摄像头基本信息设置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">camera</span> <span class="attr">name</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">horizontal_fov</span>&gt;</span>1.3962634<span class="tag">&lt;/<span class="name">horizontal_fov</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">width</span>&gt;</span>1280<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">height</span>&gt;</span>720<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">format</span>&gt;</span>R8G8B8<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">near</span>&gt;</span>0.02<span class="tag">&lt;/<span class="name">near</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">far</span>&gt;</span>300<span class="tag">&lt;/<span class="name">far</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noise</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">type</span>&gt;</span>gaussian<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mean</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">mean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">stddev</span>&gt;</span>0.007<span class="tag">&lt;/<span class="name">stddev</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">noise</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">camera</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 核心插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_camera&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_camera.so&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">alwaysOn</span>&gt;</span>true<span class="tag">&lt;/<span class="name">alwaysOn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cameraName</span>&gt;</span>/camera<span class="tag">&lt;/<span class="name">cameraName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTopicName</span>&gt;</span>image_raw<span class="tag">&lt;/<span class="name">imageTopicName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cameraInfoTopicName</span>&gt;</span>camera_info<span class="tag">&lt;/<span class="name">cameraInfoTopicName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frameName</span>&gt;</span>camera<span class="tag">&lt;/<span class="name">frameName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hackBaseline</span>&gt;</span>0.07<span class="tag">&lt;/<span class="name">hackBaseline</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionK1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionK1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionK2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionK2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionK3</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionK3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionT1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionT1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">distortionT2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortionT2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sensor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Rviz中显示摄像头数据：</p><p>添加<code>Camera</code>组件，修改话题为<code>image_raw</code></p><p><strong>5.深度相机Kinect仿真</strong></p><p>Kinect配置xacro：（<strong>官网文件直接复制</strong>！）</p><p>由于机器人模型中没有为Kinect设置专门的link，所以借用雷达的link：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_sensors&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gazebo</span> <span class="attr">reference</span>=<span class="string">&quot;kinect link名称&quot;</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">sensor</span> <span class="attr">type</span>=<span class="string">&quot;depth&quot;</span> <span class="attr">name</span>=<span class="string">&quot;camera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">always_on</span>&gt;</span>true<span class="tag">&lt;/<span class="name">always_on</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">update_rate</span>&gt;</span>20.0<span class="tag">&lt;/<span class="name">update_rate</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">camera</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">horizontal_fov</span>&gt;</span>$&#123;60.0*PI/180.0&#125;<span class="tag">&lt;/<span class="name">horizontal_fov</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">format</span>&gt;</span>R8G8B8<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">width</span>&gt;</span>640<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">height</span>&gt;</span>480<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">clip</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">near</span>&gt;</span>0.05<span class="tag">&lt;/<span class="name">near</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">far</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">far</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">clip</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">camera</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;kinect_camera_controller&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_openni_kinect.so&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cameraName</span>&gt;</span>camera<span class="tag">&lt;/<span class="name">cameraName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">alwaysOn</span>&gt;</span>true<span class="tag">&lt;/<span class="name">alwaysOn</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>10<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">imageTopicName</span>&gt;</span>rgb/image_raw<span class="tag">&lt;/<span class="name">imageTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">depthImageTopicName</span>&gt;</span>depth/image_raw<span class="tag">&lt;/<span class="name">depthImageTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pointCloudTopicName</span>&gt;</span>depth/points<span class="tag">&lt;/<span class="name">pointCloudTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">cameraInfoTopicName</span>&gt;</span>rgb/camera_info<span class="tag">&lt;/<span class="name">cameraInfoTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">depthImageCameraInfoTopicName</span>&gt;</span>depth/camera_info<span class="tag">&lt;/<span class="name">depthImageCameraInfoTopicName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">frameName</span>&gt;</span>kinect link名称<span class="tag">&lt;/<span class="name">frameName</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">baseline</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">baseline</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_k1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_k1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_k2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_k2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_k3</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_k3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_t1</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_t1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">distortion_t2</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">distortion_t2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">pointCloudCutoff</span>&gt;</span>0.4<span class="tag">&lt;/<span class="name">pointCloudCutoff</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">sensor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Rviz中显示深度相机信息：</p><p>同样是添加<code>Camera</code>组件，话题有两个可选：</p><p>（1）camera/rgb/image_raw：显示和普通相机一样的彩色信息</p><p>（2）camera/depth/image_raw：显示<strong>深度信息（黑白灰）</strong></p><p>拓：在Rviz中显示深度相机<strong>点云信息</strong>：</p><p>添加<code>PointCloud2</code>组件，可能会出现错位问题，是因为图像数据与点云数据使用了两套坐标系统，且两套坐标系统位姿并不一致，解决办法查。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在gazebo中创建一个机器人世界，不仅可以仿真机器人的运动功能，还可以仿真机器人的传感器数据，这些数据就可以放到rviz中显示。</p><p>1.如果你手上<strong>已经有机器人硬件平台</strong>，并且在上边可以完成需要的功能，用rviz应该就可以满足开发需求。</p><p>2.如果你手上<strong>没有机器人硬件</strong>，或者想在仿真环境中做一些算法、应用的测试，gazebo+rviz应该是你需要的。</p><p>（3.rviz配合其他功能包也可以建立一个简单的仿真环境，比如rviz+ArbotiX）</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统学习ROS（四）</title>
    <link href="/2021/05/21/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/05/21/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>从本文起，开始介绍ROS最强大的功能之一——仿真。</p><p>简单来说，ROS仿真用URDF语法进行机器人建模，在Gazebo中实现，同时可以搭配Rviz对感知到的环境进行可视化。</p><span id="more"></span><h4 id="十、机器人仿真"><a href="#十、机器人仿真" class="headerlink" title="十、机器人仿真"></a>十、机器人仿真</h4><p>在 ROS 中，仿真实现涉及的内容主要有三:**对机器人建模(URDF)<strong>、</strong>创建仿真环境(Gazebo)<strong>以及</strong>感知环境(Rviz)**等系统性实现。</p><p><strong>仿真优势：</strong></p><p>1.**低成本:**当前机器人成本居高不下，动辄几十万，仿真可以大大降低成本，减小风险</p><p>2.**高效:**搭建的环境更为多样且灵活，可以提高测试效率以及测试覆盖率</p><p>3.**高安全性:**仿真环境下，无需考虑耗损问题</p><p><strong>仿真缺陷：</strong></p><p>1.仿真器所使用的物理引擎目前还不能够完全精确模拟真实世界的物理情况</p><p>2.仿真器构建的是关节驱动器（电机&amp;齿轮箱）、传感器与信号通信的<strong>绝对理想情况</strong>，目前不支持模拟实际硬件缺陷或者一些临界状态等情形</p><ul><li>如果非仿真环境(真实环境)，那么使用 URDF 结合 Rviz 直接显示感知的真实环境信息</li><li>如果是仿真环境，那么需要使用 URDF 结合 Gazebo 搭建仿真环境，并结合 Rviz 显示感知的虚拟环境信息</li></ul><h2 id="URDF与Rviz集成使用"><a href="#URDF与Rviz集成使用" class="headerlink" title="URDF与Rviz集成使用"></a>URDF与Rviz集成使用</h2><p>URDF：<strong>统一(标准化)机器人描述格式</strong>，可以以一种 XML 的方式描述机器人的部分结构，比如底盘、摄像头、激光雷达、机械臂以及不同关节的自由度</p><p>URDF 不能单独使用，需要结合 Rviz 或 Gazebo，URDF 只是一个文件，需要在 Rviz 或 Gazebo 中渲染成图形化的机器人模型。</p><p><strong>1.实现流程：</strong></p><p>（1）准备:新建功能包，导入依赖：urdf、xacro</p><p>（2）核心:编写 urdf 文件</p><p>（3）核心:在 launch 文件集成 URDF 与 Rviz</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line"><span class="comment">#使用的参数名是:robot_description</span></span><br><span class="line">    &lt;param name=<span class="string">&quot;robot_description&quot;</span> textfile=<span class="string">&quot;$(find 包名)/urdf/urdf/urdf01_HelloWorld.urdf&quot;</span> /&gt; </span><br><span class="line"></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;rviz&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;rviz&quot;</span> name=<span class="string">&quot;rviz&quot;</span> /&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>（4）在 Rviz 中显示机器人模型：add插件<code>RobotModel</code>，然后修改参考坐标系</p><p>Tip: <strong>优化第四步</strong>：如果每次启动rviz都要手动add插件太麻烦！可以保存rviz配置文件，然后在launch文件中加载配置文件</p><p>在rviz选在<strong>save config as</strong>，保存到刚刚的config文件夹下；重新编launch文件：<strong>给node rviz添加参数</strong><code>args=&quot;-d $(find 包名)/config/demo1.rviz&quot;</code></p><p><strong>2.URDF语法详解：</strong></p><p>可以主要简化为两部分:<strong>连杆(link标签)</strong> 与 <strong>关节(joint标签)</strong></p><p>URDF 中的不同标签:</p><ul><li>robot 根标签，类似于 launch文件中的launch标签 <robot></robot></li><li>link 连杆标签 <link></li><li>joint 关节标签 <joint></joint></li><li>gazebo 集成gazebo需要使用的标签 <gazebo></gazebo></li></ul><p>（1）robot标签</p><p>使用了<code>robot</code>标签作为<strong>根标签</strong>，所有的 link 和 joint 以及其他标签都必须包含在 robot 标签；</p><p>唯一的属性name: 指定机器人模型的名称</p><p>（2）link标签</p><p>某个部件(也即刚体部分)的外观和物理属性，比如: 机器人底座、轮子、激光雷达、摄像头…每一个部件都对应一个 link；</p><p>在 link 标签内，可以设计该部件的形状、尺寸、颜色、惯性矩阵、碰撞参数等一系列属性。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">name ---&gt; 为连杆命名</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#子标签</span></span><br><span class="line">    visual ---&gt; 描述外观(对应的数据是可视的)</span><br><span class="line">        geometry 设置连杆的形状</span><br><span class="line">            标签<span class="number">1</span>: box(盒状)</span><br><span class="line">                属性:size=长(x) 宽(y) 高(z)</span><br><span class="line">            标签<span class="number">2</span>: cylinder(圆柱)</span><br><span class="line">                属性:radius=半径 length=高度</span><br><span class="line">            标签<span class="number">3</span>: sphere(球体)</span><br><span class="line">                属性:radius=半径</span><br><span class="line">            标签<span class="number">4</span>: mesh(为连杆添加皮肤)</span><br><span class="line">                属性: filename=资源路径(格式:package://&lt;packagename&gt;/&lt;path&gt;/文件)</span><br><span class="line"></span><br><span class="line">        origin 设置偏移量与倾斜弧度</span><br><span class="line">            属性<span class="number">1</span>: xyz=x偏移 y便宜 z偏移</span><br><span class="line">            属性<span class="number">2</span>: rpy=x翻滚 y俯仰 z偏航 (单位是弧度)</span><br><span class="line"></span><br><span class="line">        metrial 设置材料属性(颜色)</span><br><span class="line">            属性: name</span><br><span class="line">            标签: color</span><br><span class="line">                属性: rgba=红绿蓝权重值与透明度 (每个权重值以及透明度取值[<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">                    </span><br><span class="line">    collision ---&gt; 连杆的碰撞属性</span><br><span class="line">    </span><br><span class="line">    Inertial ---&gt; 连杆的惯性矩阵</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;robot&gt;</span><br><span class="line">    &lt;link name=<span class="string">&quot;base_link&quot;</span>&gt;    <span class="comment">#机器人底盘的link，一般都取名为base_link</span></span><br><span class="line">        &lt;visual&gt;   <span class="comment">#子级1：可视化标签</span></span><br><span class="line">            &lt;geometry&gt;  <span class="comment">#子级2：设置几何形状</span></span><br><span class="line">                &lt;box size=<span class="string">&quot;0.5 0.3 0.1&quot;</span> /&gt;                             <span class="comment">#子级3：box长方体</span></span><br><span class="line">                 &lt;cylinder radius=<span class="string">&quot;0.5&quot;</span> length=<span class="string">&quot;0.1&quot;</span> /&gt;  <span class="comment">#子级3：cylinder圆柱体</span></span><br><span class="line">                &lt;sphere radius=<span class="string">&quot;0.3&quot;</span> /&gt;                                <span class="comment">#子级3：sphere球体</span></span><br><span class="line">                        </span><br><span class="line">                        &lt;mesh filename=<span class="string">&quot;package://包名/mesh文件路径名&quot;</span>&gt;  <span class="comment">#子级3：mesh修改皮肤</span></span><br><span class="line">              &lt;/geometry&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;origin xyz=<span class="string">&quot;0 0 0&quot;</span> rpy=<span class="string">&quot;0 0 0&quot;</span> /&gt;  <span class="comment">#子级2：设置偏移量、倾斜弧度</span></span><br><span class="line"></span><br><span class="line">            &lt;material name=<span class="string">&quot;black&quot;</span>&gt;   <span class="comment">#子级2：颜色</span></span><br><span class="line">                &lt;color rgba=<span class="string">&quot;0.7 0.5 0 0.5&quot;</span> /&gt;  <span class="comment">#子级3：color   rgba中的a表示透明度！</span></span><br><span class="line">            &lt;/material&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line">&lt;/robot&gt;</span><br></pre></td></tr></table></figure><p>（3）joint标签</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">    name ---&gt; 为关节命名</span><br><span class="line">    </span><br><span class="line">    type ---&gt; 关节运动形式</span><br><span class="line">        continuous: 旋转关节，可以绕单轴无限旋转  <span class="comment">#常用</span></span><br><span class="line">        revolute: 旋转关节，类似于 continues,但是有旋转角度限制</span><br><span class="line">        prismatic: 滑动关节，沿某一轴线移动的关节，有位置极限</span><br><span class="line">        planer: 平面关节，允许在平面正交方向上平移或旋转</span><br><span class="line">        floating: 浮动关节，允许进行平移、旋转运动</span><br><span class="line">        fixed: 固定关节，不允许运动的特殊关节  <span class="comment">#常用</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#子标签</span></span><br><span class="line">    parent(必需的)</span><br><span class="line">    parent link的名字是一个强制的属性：</span><br><span class="line">        link:父级连杆的名字，是这个link在机器人结构树中的名字。</span><br><span class="line">            </span><br><span class="line">    child(必需的)</span><br><span class="line">    child link的名字是一个强制的属性：</span><br><span class="line">        link:子级连杆的名字，是这个link在机器人结构树中的名字。</span><br><span class="line">            </span><br><span class="line">    origin</span><br><span class="line">        属性: xyz=各轴线上的偏移量  rpy=各轴线上的偏移弧度。</span><br><span class="line">            </span><br><span class="line">    axis</span><br><span class="line">        属性: xyz用于设置可以围绕哪个关节轴运动。<span class="comment">#0表示不能围绕该轴转动，1表示可以围绕该轴转动</span></span><br></pre></td></tr></table></figure><p>举例：创建机器人模型，底盘为长方体，在长方体的前面添加一摄像头，摄像头可以沿着 Z 轴 360 度旋转。</p><p>​          思路：底板link、摄像头link、二者之间的连接用一个joint</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;robot name=<span class="string">&quot;mycar&quot;</span>&gt;</span><br><span class="line"><span class="comment">#底盘</span></span><br><span class="line">    &lt;link name=<span class="string">&quot;base_link&quot;</span>&gt;    </span><br><span class="line">        &lt;visual&gt;</span><br><span class="line">            &lt;geometry&gt;</span><br><span class="line">                &lt;box size=<span class="string">&quot;0.5 0.2 0.1&quot;</span> /&gt;</span><br><span class="line">            &lt;/geometry&gt;</span><br><span class="line">            &lt;origin xyz=<span class="string">&quot;0 0 0&quot;</span> rpy=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span><br><span class="line">            &lt;material name=<span class="string">&quot;blue&quot;</span>&gt;</span><br><span class="line">                &lt;color rgba=<span class="string">&quot;0 0 1.0 0.5&quot;</span> /&gt;</span><br><span class="line">            &lt;/material&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#摄像头</span></span><br><span class="line">    &lt;link name=<span class="string">&quot;camera&quot;</span>&gt;</span><br><span class="line">        &lt;visual&gt;</span><br><span class="line">            &lt;geometry&gt;</span><br><span class="line">                &lt;box size=<span class="string">&quot;0.02 0.05 0.05&quot;</span> /&gt;</span><br><span class="line">            &lt;/geometry&gt;</span><br><span class="line">            &lt;origin xyz=<span class="string">&quot;0 0 0&quot;</span> rpy=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span><br><span class="line">            &lt;material name=<span class="string">&quot;red&quot;</span>&gt;</span><br><span class="line">                &lt;color rgba=<span class="string">&quot;1 0 0 0.5&quot;</span> /&gt;</span><br><span class="line">            &lt;/material&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#关节</span></span><br><span class="line">    &lt;joint name=<span class="string">&quot;camera2baselink&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;  <span class="comment">#可自由旋转</span></span><br><span class="line">        &lt;parent link=<span class="string">&quot;base_link&quot;</span>/&gt;</span><br><span class="line">        &lt;child link=<span class="string">&quot;camera&quot;</span> /&gt; </span><br><span class="line">        </span><br><span class="line">         <span class="comment">#设置偏移量</span></span><br><span class="line">        &lt;origin xyz=<span class="string">&quot;0.2 0 0.075&quot;</span> rpy=<span class="string">&quot;0 0 0&quot;</span> /&gt;  <span class="comment">#设置偏移量，否则子link会生成在父link的中心位置</span></span><br><span class="line">        &lt;axis xyz=<span class="string">&quot;0 0 1&quot;</span> /&gt;</span><br><span class="line">    &lt;/joint&gt;</span><br><span class="line"></span><br><span class="line">&lt;/robot&gt;</span><br></pre></td></tr></table></figure><p><strong>joint偏移量：</strong></p><ul><li>child link的gemotry属性中的偏移量是<strong>相对于joint位置</strong>而言的</li><li>所以设置好了joint的偏移量，才能确定好child link的位置</li><li><strong>默认规则：</strong>一般情况下，<strong>link中的偏移量都设置为0；link的位置通过joint的偏移量来设置！</strong></li><li>所以当你要设置一个link的位置时，首先要设置好它的joint的偏移量！</li></ul><p>joint相对于parent link的偏移量解释：</p><p>编写完urdf文件后，用launch文件集成启动：</p><p>如果使用普通的办法，即只设置robot_description参数，则会报错<br>原因：rviz缺少不同部件之间的坐标系关系（transform）<br>解决：ROS中提供了关于机器人模型显示的坐标发布节点2个：<strong>joint_state_publisher、robot_state_publisher</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line"></span><br><span class="line">    &lt;param name=<span class="string">&quot;robot_description&quot;</span> textfile=<span class="string">&quot;$(find urdf_rviz_demo)/urdf/urdf/urdf03_joint.urdf&quot;</span> /&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;rviz&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;rviz&quot;</span> name=<span class="string">&quot;rviz&quot;</span> args=<span class="string">&quot;-d $(find urdf_rviz_demo)/config/helloworld.rviz&quot;</span> /&gt; </span><br><span class="line"></span><br><span class="line">    <span class="comment">#添加关节状态发布节点</span></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> name=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span><br><span class="line">    <span class="comment">#添加机器人状态发布节点</span></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> name=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span><br><span class="line">    <span class="comment">#可选:用于控制关节运动的节点，用于测试关节运动是否正常（主要用于测试）</span></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> name=<span class="string">&quot;joint_state_publisher_gui&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>总结：joint偏移量的设置需要自行计算，launch文件中要为rviz启动2个坐标关系发布节点！</p><h4 id="用base-footprint优化urdf："><a href="#用base-footprint优化urdf：" class="headerlink" title="用base_footprint优化urdf："></a>用base_footprint优化urdf：</h4><p>前面实现的模型，其base_link都是半沉到地下的；修改：用一个<strong>极小的物体（base_footprint）</strong>代替base_link去半沉到地下，然后<strong>将base_link连接到base_footprint上</strong>， 最后<strong>在rviz中选择参考坐标系为base_footprint</strong>，则base_footprint就一定会半沉下去，base_link就一定不会沉下去！</p><h4 id="问题篇2："><a href="#问题篇2：" class="headerlink" title="问题篇2："></a>问题篇2：</h4><p>在运行集成了urdf文件的launch文件时，报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UnicodeEncodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t encode characters in position 463-464: ordinal not in range(128)</span></span><br><span class="line"><span class="string">[joint_state_publisher-3] process has died [pid 4443, exit code 1, cmd /opt/ros/melodic/lib/joint_state_publisher/joint_state_publisher __name:=joint_state_publisher __log:=/home/rosmelodic/.ros/log/b38967c0-0acb-11eb-aee3-0800278ee10c/joint_state_publisher-3.log].</span></span><br><span class="line"><span class="string">log file: /home/rosmelodic/.ros/log/b38967c0-0acb-11eb-aee3-0800278ee10c/joint_state_publisher-3*.log</span></span><br></pre></td></tr></table></figure><p>即出现编码问题</p><p>解决：去除URDF中的中文注释即可～</p><p><strong>（4）实操项目2</strong>：简易机器人模型</p><p>创建一个四轮圆柱状机器人模型，机器人参数如下,底盘为圆柱状，半径 10cm，高 8cm，四轮由两个驱动轮和两个万向支撑轮组成，两个驱动轮半径为  3.25cm,轮胎宽度1.5cm，两个万向轮为球状，半径 0.75cm，底盘离地间距为 1.5cm(与万向轮直径一致)</p><p>2个驱动轮+2个万向轮+底盘</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- footprint --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_footprint&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.001&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 底盘 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;base_link&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- joint1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;link2footprint&quot;</span> <span class="attr">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span> =<span class="string">&quot;base_footprint&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0.055&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 左驱动轮  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;left_wheel&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 右驱动轮  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;right_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;0.0325&quot;</span> <span class="attr">length</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- joint：左轮与底盘  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;left2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span> =<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;left_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0   0.1 -0.0225&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- joint：右轮与底盘  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;right2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span> =<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;right_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0   -0.1 -0.0225&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 前万向轮  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;front_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.015&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 后万向轮  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;back_wheel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sphere</span> <span class="attr">radius</span>=<span class="string">&quot;0.015&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;1.5705 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;black&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- joint：万向轮与底盘  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;front2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span> =<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;front_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0.08  0 -0.0475&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- joint：万向轮与底盘  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;back2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span> =<span class="string">&quot;base_link&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;back_wheel&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;-0.08  0 -0.0475&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>模型中几个joint偏移量的解释：</p><p>(1)joint:<code> left2link</code>   y是车体半径 z是车体中心高度 - 轮子半径</p><p>(2)joint: <code>front2link</code> 几何推导类似 略</p><p>launch文件集成：其中<strong>urdf文件通过param启动！</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">textfile</span>=<span class="string">&quot;$(find demo_urdf)/urdf/urdf/demo_test.urdf&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find demo_urdf)/config/demo1.rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.URDF常用工具</strong></p><p>（1）check_urdf 语法检查 <code>check_urdf   demo.urdf</code></p><p>（2）urdf_to_graphiz 结构查看  <code>urdf_to_graphiz  xxx</code>会生成 urdf 模型结构pdf文件保存到xxx目录下</p><h3 id="URDF优化——xacro"><a href="#URDF优化——xacro" class="headerlink" title="URDF优化——xacro"></a>URDF优化——xacro</h3><p>普通urdf的问题及解决：</p><ul><li>代码复用 —— Xacro宏（函数）</li><li>参数设计 —— Xacro变量</li></ul><p>示例程序：Xacro文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;mycar&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 属性封装 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_radius&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0325&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;wheel_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.0015&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;PI&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3.1415927&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;base_link_length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.08&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:property</span> <span class="attr">name</span>=<span class="string">&quot;lidi_space&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0.015&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 宏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:macro</span> <span class="attr">name</span>=<span class="string">&quot;wheel_func&quot;</span> <span class="attr">params</span>=<span class="string">&quot;wheel_name flag&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_name&#125;_wheel&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">geometry</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">cylinder</span> <span class="attr">radius</span>=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> <span class="attr">length</span>=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">geometry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 0 0&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;$&#123;PI / 2&#125; 0 0&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">material</span> <span class="attr">name</span>=<span class="string">&quot;wheel_color&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span> <span class="attr">rgba</span>=<span class="string">&quot;0 0 0 0.3&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">material</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 3-2.joint --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_name&#125;2link&quot;</span> <span class="attr">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">parent</span> <span class="attr">link</span>=<span class="string">&quot;base_link&quot;</span>  /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">child</span> <span class="attr">link</span>=<span class="string">&quot;$&#123;wheel_name&#125;_wheel&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                x 无偏移</span></span><br><span class="line"><span class="comment">                y 车体半径</span></span><br><span class="line"><span class="comment">                z z= 车体高度 / 2 + 离地间距 - 车轮半径</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">origin</span> <span class="attr">xyz</span>=<span class="string">&quot;0 $&#123;0.1 * flag&#125; $&#123;(base_link_length / 2 + lidi_space - wheel_radius) * -1&#125;&quot;</span> <span class="attr">rpy</span>=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">axis</span> <span class="attr">xyz</span>=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xacro:macro</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:wheel_func</span> <span class="attr">wheel_name</span>=<span class="string">&quot;left&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:wheel_func</span> <span class="attr">wheel_name</span>=<span class="string">&quot;right&quot;</span> <span class="attr">flag</span>=<span class="string">&quot;-1&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.Xacro语法详解</p><p>（1）在使用 xacro 生成 urdf 时，根标签<code>robot</code>中必须包含命名空间声明:<code>xmlns:xacro=&quot;http://wiki.ros.org/xacro&quot;</code></p><p>（2）<strong>属性</strong>：用于封装 URDF 中的一些字段，比如: PAI 值，小车的尺寸，轮子半径 ….</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;xacro:<span class="built_in">property</span>  name=<span class="string">&quot;xxxx&quot;</span>  value=<span class="string">&quot;yyyy&quot;</span> /&gt;  <span class="comment">#属性定义</span></span><br><span class="line">    </span><br><span class="line">&lt;my_varible   length = <span class="string">&quot;$&#123;属性名称&#125;&quot;</span>&gt;  <span class="comment">#调用</span></span><br><span class="line">&lt;my_varible   radius = <span class="string">&quot;$&#123;数学表达式&#125;&quot;</span>&gt;  <span class="comment">#数学运算</span></span><br></pre></td></tr></table></figure><p>（3）宏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;xacro:macro  name=<span class="string">&quot;宏名称&quot;</span> params=<span class="string">&quot;参数列表(多参数之间使用空格分隔)&quot;</span>&gt;  <span class="comment">#宏定义</span></span><br><span class="line">...</span><br><span class="line">&lt;/xacro:macro&gt;</span><br><span class="line">    </span><br><span class="line">&lt;xacro:宏名称  参数<span class="number">1</span>=xxx  参数<span class="number">2</span>=xxx/&gt; <span class="comment">#调用</span></span><br></pre></td></tr></table></figure><p>（4）文件包含：机器人由多部件组成，不同部件可能封装为单独的 xacro 文件；最后再将不同的文件集成，组合为完整机器人</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;robot name=<span class="string">&quot;xxx&quot;</span>  xmlns:xacro=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span><br><span class="line">      &lt;xacro:include  filename=<span class="string">&quot;my_base.xacro&quot;</span> /&gt;</span><br><span class="line">      &lt;xacro:include  filename=<span class="string">&quot;my_camera.xacro&quot;</span> /&gt;</span><br><span class="line">      &lt;xacro:include  filename=<span class="string">&quot;my_laser.xacro&quot;</span> /&gt;</span><br><span class="line">      ....</span><br><span class="line">&lt;/robot&gt;</span><br></pre></td></tr></table></figure><p>2.Xacro完整流程实现——优化小车底盘模型</p><ul><li>流程：</li></ul><p>编写xacro文件 + 将xacro文件集成到launch文件中</p><ul><li>实现：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&lt;robot name=<span class="string">&quot;my_base&quot;</span> xmlns:xacro=<span class="string">&quot;http://www.ros.org/wiki/xacro&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#底盘</span></span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;PI&quot;</span> value=<span class="string">&quot;3.141&quot;</span>/&gt; <span class="comment">#封装变量、常量</span></span><br><span class="line">        </span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;base_footprint_radius&quot;</span> value=<span class="string">&quot;0.001&quot;</span> /&gt;   <span class="comment">#封装base_footprint 半径等等</span></span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;base_link_radius&quot;</span> value=<span class="string">&quot;0.1&quot;</span> /&gt; </span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;base_link_length&quot;</span> value=<span class="string">&quot;0.08&quot;</span> /&gt;</span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;earth_space&quot;</span> value=<span class="string">&quot;0.015&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;material name=<span class="string">&quot;black&quot;</span>&gt;</span><br><span class="line">        &lt;color rgba=<span class="string">&quot;0.0 0.0 0.0 1.0&quot;</span> /&gt;</span><br><span class="line">    &lt;/material&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link name=<span class="string">&quot;base_footprint&quot;</span>&gt;</span><br><span class="line">      &lt;visual&gt;</span><br><span class="line">        &lt;geometry&gt;</span><br><span class="line">          &lt;sphere radius=<span class="string">&quot;$&#123;base_footprint_radius&#125;&quot;</span> /&gt;</span><br><span class="line">        &lt;/geometry&gt;</span><br><span class="line">      &lt;/visual&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link name=<span class="string">&quot;base_link&quot;</span>&gt;</span><br><span class="line">      &lt;visual&gt;</span><br><span class="line">        &lt;geometry&gt;</span><br><span class="line">          &lt;cylinder radius=<span class="string">&quot;$&#123;base_link_radius&#125;&quot;</span> length=<span class="string">&quot;$&#123;base_link_length&#125;&quot;</span> /&gt;</span><br><span class="line">        &lt;/geometry&gt;</span><br><span class="line">        &lt;origin xyz=<span class="string">&quot;0 0 0&quot;</span> rpy=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span><br><span class="line">        &lt;material name=<span class="string">&quot;yellow&quot;</span>&gt;</span><br><span class="line">          &lt;color rgba=<span class="string">&quot;0.5 0.3 0.0 0.5&quot;</span> /&gt;</span><br><span class="line">        &lt;/material&gt;</span><br><span class="line">      &lt;/visual&gt;</span><br><span class="line">    &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">    &lt;joint name=<span class="string">&quot;base_link2base_footprint&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span><br><span class="line">      &lt;parent link=<span class="string">&quot;base_footprint&quot;</span> /&gt;</span><br><span class="line">      &lt;child link=<span class="string">&quot;base_link&quot;</span> /&gt;</span><br><span class="line">      &lt;origin xyz=<span class="string">&quot;0 0 $&#123;earth_space + base_link_length / 2 &#125;&quot;</span> /&gt;</span><br><span class="line">    &lt;/joint&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#驱动轮</span></span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;wheel_radius&quot;</span> value=<span class="string">&quot;0.0325&quot;</span> /&gt;  <span class="comment">#封装驱动轮属性</span></span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;wheel_length&quot;</span> value=<span class="string">&quot;0.015&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;xacro:macro name=<span class="string">&quot;add_wheels&quot;</span> params=<span class="string">&quot;name flag&quot;</span>&gt;  <span class="comment">#驱动轮宏  name是left/right    flag是1/-1 表示左或右</span></span><br><span class="line">      &lt;link name=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span><br><span class="line">        &lt;visual&gt;</span><br><span class="line">          &lt;geometry&gt;</span><br><span class="line">            &lt;cylinder radius=<span class="string">&quot;$&#123;wheel_radius&#125;&quot;</span> length=<span class="string">&quot;$&#123;wheel_length&#125;&quot;</span> /&gt;</span><br><span class="line">          &lt;/geometry&gt;</span><br><span class="line">          &lt;origin xyz=<span class="string">&quot;0.0 0.0 0.0&quot;</span> rpy=<span class="string">&quot;$&#123;PI / 2&#125; 0.0 0.0&quot;</span> /&gt;</span><br><span class="line">          &lt;material name=<span class="string">&quot;black&quot;</span> /&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">      &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;joint name=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span><br><span class="line">        &lt;parent link=<span class="string">&quot;base_link&quot;</span> /&gt;</span><br><span class="line">        &lt;child link=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span><br><span class="line">        &lt;origin xyz=<span class="string">&quot;0 $&#123;flag * base_link_radius&#125; $&#123;-(earth_space + base_link_length / 2 - wheel_radius) &#125;&quot;</span> /&gt;</span><br><span class="line">        &lt;axis xyz=<span class="string">&quot;0 1 0&quot;</span> /&gt;</span><br><span class="line">      &lt;/joint&gt;</span><br><span class="line">    &lt;/xacro:macro&gt;</span><br><span class="line">    &lt;xacro:add_wheels name=<span class="string">&quot;left&quot;</span> flag=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">    &lt;xacro:add_wheels name=<span class="string">&quot;right&quot;</span> flag=<span class="string">&quot;-1&quot;</span> /&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="comment">#万向轮</span></span><br><span class="line">    &lt;xacro:<span class="built_in">property</span> name=<span class="string">&quot;support_wheel_radius&quot;</span> value=<span class="string">&quot;0.0075&quot;</span> /&gt;  <span class="comment">#封装万向轮属性</span></span><br><span class="line"></span><br><span class="line">    &lt;xacro:macro name=<span class="string">&quot;add_support_wheel&quot;</span> params=<span class="string">&quot;name flag&quot;</span> &gt;  <span class="comment">#封装宏</span></span><br><span class="line">      &lt;link name=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span>&gt;</span><br><span class="line">        &lt;visual&gt;</span><br><span class="line">            &lt;geometry&gt;</span><br><span class="line">                &lt;sphere radius=<span class="string">&quot;$&#123;support_wheel_radius&#125;&quot;</span> /&gt;</span><br><span class="line">            &lt;/geometry&gt;</span><br><span class="line">            &lt;origin xyz=<span class="string">&quot;0 0 0&quot;</span> rpy=<span class="string">&quot;0 0 0&quot;</span> /&gt;</span><br><span class="line">            &lt;material name=<span class="string">&quot;black&quot;</span> /&gt;</span><br><span class="line">        &lt;/visual&gt;</span><br><span class="line">      &lt;/link&gt;</span><br><span class="line"></span><br><span class="line">      &lt;joint name=<span class="string">&quot;$&#123;name&#125;_wheel2base_link&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span><br><span class="line">          &lt;parent link=<span class="string">&quot;base_link&quot;</span> /&gt;</span><br><span class="line">          &lt;child link=<span class="string">&quot;$&#123;name&#125;_wheel&quot;</span> /&gt;</span><br><span class="line">          &lt;origin xyz=<span class="string">&quot;$&#123;flag * (base_link_radius - support_wheel_radius)&#125; 0 $&#123;-(base_link_length / 2 + earth_space / 2)&#125;&quot;</span> /&gt;</span><br><span class="line">          &lt;axis xyz=<span class="string">&quot;1 1 1&quot;</span> /&gt;</span><br><span class="line">      &lt;/joint&gt;</span><br><span class="line">    &lt;/xacro:macro&gt;</span><br><span class="line"></span><br><span class="line">    &lt;xacro:add_support_wheel name=<span class="string">&quot;front&quot;</span> flag=<span class="string">&quot;1&quot;</span> /&gt;</span><br><span class="line">    &lt;xacro:add_support_wheel name=<span class="string">&quot;back&quot;</span> flag=<span class="string">&quot;-1&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/robot&gt;</span><br></pre></td></tr></table></figure><p><strong>在launch中集成：</strong></p><p>（1）方式1，先将xacro文件解析成urdf文件，再集成urdf文件；<code>textfile</code></p><p>（2）方式2，直接集成xacro文件<strong>（推荐）</strong><code>command</code></p><p>​                            属性值就是<strong>调用 xacro 功能包</strong>的 xacro 程序直接解析 xacro 文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;robot_description&quot;</span> <span class="attr">command</span>=<span class="string">&quot;$(find xacro)/xacro $(find demo01_urdf_helloworld)/urdf/xacro/my_base.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find demo01_urdf_helloworld)/config/helloworld.rviz&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">type</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">name</span>=<span class="string">&quot;joint_state_publisher_gui&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般在项目中，有多个xacro文件分别用于实现多个机器人部件（例如底盘、摄像头、雷达等）</p><p>通常情况下：<strong>先用一个新的xacro文件将这些零散的xacro文件先集成起来</strong>，<strong>然后在launch文件中启动最后这个xacro文件</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">robot</span> <span class="attr">name</span>=<span class="string">&quot;my_car_camera&quot;</span> <span class="attr">xmlns:xacro</span>=<span class="string">&quot;http://wiki.ros.org/xacro&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_base.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_camera.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xacro:include</span> <span class="attr">filename</span>=<span class="string">&quot;my_laser.urdf.xacro&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">robot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.解析xacro文件（用xacro文件生成urdf文件）</p><p>执行<code>rosrun  xacro  xacro  xxx.xacro &gt; xxx.urdf</code></p><h3 id="在Rviz中控制机器人运动——Arbotix"><a href="#在Rviz中控制机器人运动——Arbotix" class="headerlink" title="在Rviz中控制机器人运动——Arbotix"></a>在Rviz中控制机器人运动——<strong>Arbotix</strong></h3><p>Arbotix 是一款控制电机、舵机的控制板，<strong>并提供相应的 ros 功能包</strong>，这个功能包的功能不仅可以驱动真实的 Arbotix 控制板，它还提供一个差速控制器，通过接受速度控制指令更新机器人的 joint 状态，从而帮助我们实现机器人在 rviz 中的运动。</p><p>1.添加 Arbotix 配置文件</p><p>举例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">controllers:</span> &#123;</span><br><span class="line">   <span class="comment"># 单控制器设置</span></span><br><span class="line">   <span class="attr">base_controller:</span> &#123;</span><br><span class="line">          <span class="comment">#类型: 差速控制器</span></span><br><span class="line">       <span class="attr">type:</span> <span class="string">diff_controller</span>,</span><br><span class="line">       <span class="comment">#参考坐标</span></span><br><span class="line">       <span class="attr">base_frame_id:</span> <span class="string">base_footprint</span>, </span><br><span class="line">       <span class="comment">#两个轮子之间的间距</span></span><br><span class="line">       <span class="attr">base_width:</span> <span class="number">0.2</span>,</span><br><span class="line">       <span class="comment">#控制频率</span></span><br><span class="line">       <span class="attr">ticks_meter:</span> <span class="number">2000</span>, </span><br><span class="line">       <span class="comment">#PID控制参数，使机器人车轮快速达到预期速度</span></span><br><span class="line">       <span class="attr">Kp:</span> <span class="number">12</span>, </span><br><span class="line">       <span class="attr">Kd:</span> <span class="number">12</span>, </span><br><span class="line">       <span class="attr">Ki:</span> <span class="number">0</span>, </span><br><span class="line">       <span class="attr">Ko:</span> <span class="number">50</span>, </span><br><span class="line">       <span class="comment">#加速限制</span></span><br><span class="line">       <span class="attr">accel_limit:</span> <span class="number">1.0</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.集成到launch文件中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;node name=<span class="string">&quot;arbotix&quot;</span> pkg=<span class="string">&quot;arbotix_python&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;arbotix_driver&quot;</span> output=<span class="string">&quot;screen&quot;</span>&gt; </span><br><span class="line"><span class="comment">#&lt;node&gt; 调用了 arbotix_python 功能包下的 arbotix_driver 节点</span></span><br><span class="line"></span><br><span class="line">     &lt;rosparam file=<span class="string">&quot;$(find my_urdf05_rviz)/config/hello.yaml&quot;</span> command=<span class="string">&quot;load&quot;</span> /&gt;</span><br><span class="line">    <span class="comment">#&lt;rosparam&gt; arbotix 驱动机器人运行时，需要获取机器人信息，可以通过 file 加载配置文件</span></span><br><span class="line">    </span><br><span class="line">     &lt;param name=<span class="string">&quot;sim&quot;</span> value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">    <span class="comment">#&lt;param&gt; 在仿真环境下，需要配置 sim 为 true</span></span><br><span class="line">&lt;/node&gt;</span><br></pre></td></tr></table></figure><p>3.启动launch文件，在rviz中设置参考坐标系为odom；并发布消息控制机器人运动</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>github：开源项目寻找途径</title>
    <link href="/2021/05/11/github%EF%BC%9A%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AF%BB%E6%89%BE%E9%80%94%E5%BE%84/"/>
    <url>/2021/05/11/github%EF%BC%9A%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E5%AF%BB%E6%89%BE%E9%80%94%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<p>众所周知，在搭建项目时，人们往往是面向github开发[doge]，然而如何快速找到高质量地项目源码，需要前人的经验传承[doge]，本文简要记载一些开源项目的寻找途径&amp;检索技巧。</p><span id="more"></span><p>内容来自b站up主，视频地址：<a href="https://www.bilibili.com/video/BV1e541137Tc">https://www.bilibili.com/video/BV1e541137Tc</a></p><h1 id="寻找开源项目的途径"><a href="#寻找开源项目的途径" class="headerlink" title="寻找开源项目的途径"></a>寻找开源项目的途径</h1><p>1.掘金社区：<a href="https://juejin.cn/">掘金 - 代码不止，掘金不停 (juejin.cn)</a></p><p>2.Trending：<a href="https://github.com/trending/">https://github.com/trending/</a> </p><p>3.HelloGitHub：<a href="https://github.com/521xueweihan/HelloGitHub">https://github.com/521xueweihan/HelloGitHub</a>  </p><p>推荐github上新颖项目的媒体，可根据不同编程语言检索</p><p>4.阮一峰老师：<a href="https://github.com/ruanyf/weekly">https://github.com/ruanyf/weekly</a></p><p>科技爱好者周刊，科技新闻</p><h2 id="特殊的github官网搜索小技巧-——-前后缀"><a href="#特殊的github官网搜索小技巧-——-前后缀" class="headerlink" title="特殊的github官网搜索小技巧 —— 前后缀"></a>特殊的github官网搜索小技巧 —— 前后缀</h2><ol><li>找百科大全：<code>awesome xxx</code> 非常有用</li><li>找例子：<code>xxx sample</code></li><li>找空项目架子： <code>xxx starter/ xxx boilerplate</code> 一个项目从头开始搭建往往比较困难，直接借用别人的</li><li>找教程：<code>xxx tutorial</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统学习ROS：问题篇1</title>
    <link href="/2021/04/17/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%9A%E9%97%AE%E9%A2%98%E7%AF%871/"/>
    <url>/2021/04/17/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%9A%E9%97%AE%E9%A2%98%E7%AF%871/</url>
    
    <content type="html"><![CDATA[<p>跑项目时经常会由于环境、路径等引发一系列问题，问题篇记录我在跑实例过程中遇到的<strong>问题以及解决方法</strong>。</p><span id="more"></span><h4 id="我在第一次跑程序时遇到的问题："><a href="#我在第一次跑程序时遇到的问题：" class="headerlink" title="我在第一次跑程序时遇到的问题："></a>我在第一次跑程序时遇到的问题：</h4><p>（1）我的环境：</p><ul><li><p>ROS melodic桌面完整版</p></li><li><p>根据教程配置好的VS Code</p></li><li><p>Ubuntu内装有anaconda</p></li><li><p>Ubuntu自带python2、python3</p></li></ul><p>（2）问题：</p><p>写好Client节点后，运行launch文件报错，并且只出现一只乌龟。</p><p>（3）解决过程</p><p>首先确定是<strong>python解释器问题</strong>，ROS Melodic的默认环境是python2, 最新发布的ROS noetic才完全支持python3。但是我们编写程序时用的是python3，所以需要使用python3解释器。</p><p>如果使用网上推荐的方法：创建python2到python3的软链接，虽然会将解释器自动链接为python3，但由于某些神秘力量，创建软链接后居然连roscore都打不开了！终端也打不开！（现在也未知原因）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">bin</span>/python3 /usr/<span class="built_in">bin</span>/python</span><br></pre></td></tr></table></figure><p>所以我们删除软链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/<span class="built_in">bin</span>/python</span><br></pre></td></tr></table></figure><p>然后采用另一种方法：</p><p>这种方法直接使用 python3，但存在问题: 不兼容之前的 ROS 相关 python 实现。</p><p>在所有python文件头部，添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br></pre></td></tr></table></figure><p>之后即可正常运行！</p><p>总结：如果遇到python文件无法运行的情况，在所有在所有python文件头部，添加<code>#!/usr/bin/env python3</code></p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统学习ROS（三）</title>
    <link href="/2021/04/17/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/04/17/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在实践中学习，本节介绍第一个上手案例：乌龟自动跟随</p><p>IDE：VS Code</p><span id="more"></span><p><strong>学习地址（全文参考）</strong>：<a href="http://www.autolabor.com.cn/book/ROSTutorials/">http://www.autolabor.com.cn/book/ROSTutorials/</a></p><p>实操：乌龟跟随案例**</p><ul><li><strong>流程：</strong></li></ul><p>（1）创建功能包，用Service模式创建一只跟随乌龟；</p><p>（2）编写发布方节点：发布两只乌龟的坐标</p><p>​                  <strong>疑问：</strong>为什么一定要通过发布方先订阅坐标信息再发布，不能由订阅方直接订阅乌龟坐标信息进行处理吗？</p><p>​                  解答：实际Publisher是<strong>将坐标转换消息发布到TF功能包中</strong>，Subscriber也是<strong>直接订阅TF中的坐标转换信息</strong> (tf2_ros.Buffer中已经缓存了发布到TF中的坐标转换消息)。所以我们需要一个Publisher节点来完成发布到TF中的工作！</p><p>（3）编写订阅方节点：解析坐标信息，并生成速度信息（带方向的速度，表示下一时刻要往哪走）</p><p>（4）最后通过<strong>launch文件集成上述节点</strong>。</p><ul><li><strong>实现：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>Client生成新乌龟</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> turtlesim.srv <span class="keyword">import</span> Spawn, SpawnRequest, SpawnResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;turtle_spawn_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建服务客户端</span></span><br><span class="line">    client = rospy.ServiceProxy(<span class="string">&quot;/spawn&quot;</span>,Spawn)    <span class="comment">#话题名/spawn、消息类型turtlesim/Spawn</span></span><br><span class="line">    <span class="comment"># 4.等待服务启动</span></span><br><span class="line">    client.wait_for_service()</span><br><span class="line">    <span class="comment"># 5.创建请求数据</span></span><br><span class="line">    req = SpawnRequest()</span><br><span class="line">    req.x = <span class="number">1.0</span>     <span class="comment">#新乌龟的坐标、名字</span></span><br><span class="line">    req.y = <span class="number">1.0</span></span><br><span class="line">    req.theta = <span class="number">3.14</span></span><br><span class="line">    req.name = <span class="string">&quot;turtle2&quot;</span></span><br><span class="line">    <span class="comment"># 6.发送请求并处理响应</span></span><br><span class="line">    <span class="keyword">try</span>: </span><br><span class="line">        response = client.call(req)      <span class="comment">#返回服务器端相应。根据消息类型，返回的信息是新乌龟的名称</span></span><br><span class="line">        rospy.loginfo(<span class="string">&quot;乌龟创建成功，名字是:%s&quot;</span>,response.name)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;服务调用失败....&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Publisher实现说明：</strong></p><ul><li><p>前面的代码订阅一个乌龟的坐标系，所以话题名是固定的<code>turtle1/pose</code>，但是现在要订阅两个乌龟的坐标，话题分别是<code>turtle1/pose</code>、<code>turtle2/pose</code>，考虑通过传参args来实现<strong>复用</strong>。</p></li><li><p><strong>在launch文件中node下传入args</strong>，然后在节点实现文件中，用<strong>sys.argv调用参数</strong></p></li><li><p>这里是分别订阅两个坐标信息，分别计算它们与<code>world</code>坐标系的转换关系；而后面在Subscriber中才实现两个乌龟节点间的直接转换</p></li></ul><p>Tip：在launch文件中node下传入的args，传入的不仅仅是那一个参数，还有：文件全路径 + 传入的参数 + 节点名称 + 日志文件路径（<strong>4个</strong>）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>Publisher  先订阅乌龟坐标，再发布转换关系</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> turtlesim.msg <span class="keyword">import</span> Pose</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> TransformStamped</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="keyword">import</span> tf_conversions</span><br><span class="line"></span><br><span class="line">turtle_name = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doPose</span>(<span class="params">pose</span>):</span></span><br><span class="line">    <span class="comment"># rospy.loginfo(&quot;x = %.2f&quot;,pose.x)</span></span><br><span class="line">    <span class="comment">#1.创建坐标系广播器</span></span><br><span class="line">    broadcaster = tf2_ros.TransformBroadcaster()</span><br><span class="line">    <span class="comment">#2.将 pose 信息转换成 TransFormStamped</span></span><br><span class="line">    tfs = TransformStamped()</span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;world&quot;</span></span><br><span class="line">    tfs.header.stamp = rospy.Time.now()</span><br><span class="line"></span><br><span class="line">    tfs.child_frame_id = turtle_name</span><br><span class="line">    tfs.transform.translation.x = pose.x</span><br><span class="line">    tfs.transform.translation.y = pose.y</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    qtn = tf_conversions.transformations.quaternion_from_euler(<span class="number">0</span>, <span class="number">0</span>, pose.theta)</span><br><span class="line">    tfs.transform.rotation.x = qtn[<span class="number">0</span>]</span><br><span class="line">    tfs.transform.rotation.y = qtn[<span class="number">1</span>]</span><br><span class="line">    tfs.transform.rotation.z = qtn[<span class="number">2</span>]</span><br><span class="line">    tfs.transform.rotation.w = qtn[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#3.广播器发布 tfs</span></span><br><span class="line">    broadcaster.sendTransform(tfs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;sub_tfs_p&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.解析传入的命名空间</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">4</span>:      <span class="comment">#在launch文件中传入参数，应该解析到4个！！</span></span><br><span class="line">        rospy.loginfo(<span class="string">&quot;参数个数不对！&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turtle_name = sys.argv[<span class="number">1</span>]   <span class="comment">#第2个参数就是我们真正传入的参数</span></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;--------乌龟:%s&quot;</span>,turtle_name)</span><br><span class="line"></span><br><span class="line">    rospy.Subscriber(turtle_name + <span class="string">&quot;/pose&quot;</span>,Pose,doPose, queue_size=<span class="number">10</span>)    <span class="comment">#实现复用！！！</span></span><br><span class="line">                                                                                                                        <span class="comment">##话题名称、消息类型、回调函数、队列长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#     4.创建订阅对象</span></span><br><span class="line">    <span class="comment">#     5.回调函数处理订阅的 pose 信息</span></span><br><span class="line">    <span class="comment">#         5-1.创建 TF 广播器</span></span><br><span class="line">    <span class="comment">#         5-2.将 pose 信息转换成 TransFormStamped</span></span><br><span class="line">    <span class="comment">#         5-3.发布</span></span><br><span class="line">    <span class="comment">#     6.spin</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><p>此时启动launch文件（launch中有乌龟节点、Client节点、Publisher节点），则Publisher就将乌龟坐标信息发布到了TF功能包中。启动rviz，添加TF插件就可看到啦！！</p><p><strong>Subscriber实现说明：</strong></p><ul><li><p>创建订阅对象buffer，它里面缓存有刚刚Publisher发布在TF中的坐标变换</p></li><li><p>现在需要从<code>turtle1</code>到<code>world</code>、<code>turtle2</code>到<code>world</code>的转换关系获得<code>turtle1</code>到<code>turtle2</code>的直接转换关系，使用<strong>buffer.lookup_transform( )函数</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#buffer.lookup_transform( )函数：</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#参数1：目标坐标系         </span></span><br><span class="line"> <span class="comment">#参数2：源坐标系          </span></span><br><span class="line"> <span class="comment">#参数3：rospy.Time(0) ---取时间间隔最近的两个坐标帧</span></span><br><span class="line"> <span class="comment">#返回值：turtle1 与 turtle2 的坐标系关系</span></span><br><span class="line"> <span class="comment">#两个坐标系的名称 与 Publisher中发布到TF中的child_frame_id一致</span></span><br><span class="line"> trans = buffer.lookup_transform(<span class="string">&quot;turtle2&quot;</span>,<span class="string">&quot;turtle1&quot;</span>,rospy.Time(<span class="number">0</span>))   </span><br><span class="line">  </span><br><span class="line"> <span class="comment">#偏移量：</span></span><br><span class="line">trans.transform.translation.x、trans.transform.translation.y、trans.transform.translation.z</span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>转换关系获得后，要计算turtle2的速度信息，<strong>最终发布速度信息以控制turtle2</strong>。速度信息使用的消息类型是Twist：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Twist消息类型</span></span><br><span class="line">geometry_msgs/Vector3 linear</span><br><span class="line">  float64 x</span><br><span class="line">  float64 y</span><br><span class="line">  float64 z</span><br><span class="line">geometry_msgs/Vector3 angular</span><br><span class="line">  float64 x</span><br><span class="line">  float64 y</span><br><span class="line">  float64 z</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>Subscriber  将两个乌龟分别对`world`的转换关系变为两只乌龟之间直接的转换关系</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> TransformStamped, Twist</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ros 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;sub_tfs_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建 TF 订阅对象</span></span><br><span class="line">    buffer = tf2_ros.Buffer()</span><br><span class="line">    listener = tf2_ros.TransformListener(buffer)</span><br><span class="line">    <span class="comment"># 4.处理订阅到的 TF</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 创建速度发布对象</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;/turtle2/cmd_vel&quot;</span>,Twist,queue_size=<span class="number">1000</span>)  <span class="comment">#控制turtle2运动，所以发布的话题是`turtle2/cmd_vel`, 消息类型是Twist</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        rate.sleep()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 计算两只乌龟之间的直接转换关系：buffer.lookup_transform( )函数</span></span><br><span class="line">            trans = buffer.lookup_transform(<span class="string">&quot;turtle2&quot;</span>,<span class="string">&quot;turtle1&quot;</span>,rospy.Time(<span class="number">0</span>))   </span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 组织Twist消息（见上方Publisher的创建，Twist消息）（通过得到的转换关系，计算目标速度）</span></span><br><span class="line">            twist = Twist()</span><br><span class="line">            twist.linear.x = <span class="number">0.5</span> * math.sqrt(math.<span class="built_in">pow</span>(trans.transform.translation.x,<span class="number">2</span>) + math.<span class="built_in">pow</span>(trans.transform.translation.y,<span class="number">2</span>))   <span class="comment">#线速度</span></span><br><span class="line">            twist.angular.z = <span class="number">4</span> * math.atan2(trans.transform.translation.y, trans.transform.translation.x)  <span class="comment">#角速度</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#发布Twist消息</span></span><br><span class="line">            pub.publish(twist)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            rospy.logwarn(<span class="string">&quot;警告:%s&quot;</span>,e)</span><br></pre></td></tr></table></figure><p><strong>launch文件集成上述节点：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> name=<span class="string">&quot;turtle1&quot;</span> output=<span class="string">&quot;screen&quot;</span> /&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> name=<span class="string">&quot;key_control&quot;</span> output=<span class="string">&quot;screen&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;demo_test_flow_p&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;test01_turtle_spawn_p.py&quot;</span> name=<span class="string">&quot;turtle_spawn&quot;</span> output=<span class="string">&quot;screen&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;demo_test_flow_p&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;test02_turtle_tf_pub_p.py&quot;</span> name=<span class="string">&quot;tf_pub1&quot;</span> args=<span class="string">&quot;turtle1&quot;</span> output=<span class="string">&quot;screen&quot;</span>/&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;demo_test_flow_p&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;test02_turtle_tf_pub_p.py&quot;</span> name=<span class="string">&quot;tf_pub2&quot;</span> args=<span class="string">&quot;turtle2&quot;</span> output=<span class="string">&quot;screen&quot;</span>/&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;demo_test_flow_p&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;test03_turtle_tf_sub_p.py&quot;</span> name=<span class="string">&quot;tf_sub&quot;</span> output=<span class="string">&quot;screen&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>总结：</p><p>乌龟跟随案例的实现完全应用TF功能包，实现了坐标转换计算。实现过程比较复杂、集成度较高，所以对于初学者这是很好的第一个上手项目。在敲代码之前，一定要理清楚<strong>每个节点在做什么事情、通过什么方法什么库来做的</strong>，才能算真正掌握这个项目。</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统学习ROS（二）</title>
    <link href="/2021/04/17/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/04/17/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>ROS运行管理(launch文件等)  &amp;  ROS内置组件之TF功能包</p><span id="more"></span><p><strong>学习地址（全文参考）</strong>：<a href="http://www.autolabor.com.cn/book/ROSTutorials/">http://www.autolabor.com.cn/book/ROSTutorials/</a></p><h4 id="八、ROS运行管理"><a href="#八、ROS运行管理" class="headerlink" title="八、ROS运行管理"></a>八、ROS运行管理</h4><p>1.元功能包</p><p>完成ROS中一个系统性的功能，可能涉及到多个功能包，在ROS中，提供了一种方式可以将不同的功能包打包成一个功能包，当安装某个功能模块时，直接调用打包后的功能包即可，该包又称之为元功能包(metapackage)。</p><p>即：元功能包是<strong>方便安装</strong>的。</p><p>实现：修改<code>package.xml</code> —&gt; 修改<code>CMakeList</code>          需要就查！</p><p><strong>2.launch文件</strong></p><p>launch 文件是一个 <strong>XML 格式</strong>的文件，可以启动本地和远程的多个节点，还可以在参数服务器中设置参数；简化节点的配置与启动，<strong>提高ROS程序的启动效率</strong>。</p><p>实现流程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在功能包下新建launch文件夹</span></span><br><span class="line">      <span class="comment">#梳理一下，此时功能包下有哪些文件夹：include、src(.cpp)、scripts(.py)、launch</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#在launch文件夹下新建demo.launch文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用launch文件</span></span><br><span class="line">roslaunch  功能包名  xxx.launch</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>     name=<span class="string">&quot;myTurtle&quot;</span> output=<span class="string">&quot;screen&quot;</span> /&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span>  name=<span class="string">&quot;myTurtleContro&quot;</span> output=<span class="string">&quot;screen&quot;</span> /&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>（1）<launch>标签：</launch></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">&lt;launch deprecated = <span class="string">&quot;弃用声明&quot;</span>&gt;      <span class="comment">#表示该节点不用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子集标签</span></span><br><span class="line">所有其他标签都是launch的子集</span><br></pre></td></tr></table></figure><p>（2）<node>标签：</node></p><p>用于指定 ROS 节点，是最常见的标签，需要注意的是: roslaunch 命令<strong>不能保证按照 node 的声明顺序</strong>来启动节点(节点的启动是多进程的)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">   pkg=<span class="string">&quot;包名&quot;</span>   <span class="comment">#节点所属的包</span></span><br><span class="line">   <span class="built_in">type</span>=<span class="string">&quot;nodeType&quot;</span>   <span class="comment">#节点类型(与之相同名称的可执行文件) = 节点名</span></span><br><span class="line">   name=<span class="string">&quot;nodeName&quot;</span>   <span class="comment">#节点名称(在 ROS 网络拓扑中节点的名称)，  随便设置，相当于给节点重命名</span></span><br><span class="line">   args=<span class="string">&quot;xxx xxx xxx&quot;</span>       <span class="comment">#(可选)将参数传递给节点</span></span><br><span class="line">   machine=<span class="string">&quot;机器名&quot;</span>      <span class="comment">#在指定机器上启动节点</span></span><br><span class="line">   </span><br><span class="line">   respawn=<span class="string">&quot;true | false&quot;</span>         <span class="comment">#(可选) 如果节点退出，是否自动重启   ---&gt; 例如激光雷达，不能因为意外关闭而停止，所以可为它设置该属性</span></span><br><span class="line">   respawn_delay=<span class="string">&quot; N&quot;</span>         <span class="comment">#(可选) 如果 respawn 为 true, 那么延迟 N 秒后启动节点</span></span><br><span class="line">   </span><br><span class="line">   required=<span class="string">&quot;true | false&quot;</span>        <span class="comment">#(可选)该节点是否必须，如果为 true,那么如果该节点退出，将杀死整个 roslaunch</span></span><br><span class="line">   ns=<span class="string">&quot;xxx&quot;</span>         <span class="comment">#(可选) 在指定命名空间 xxx 中启动节点  ---&gt; 在节点name前面加的前缀，也即命名空间  ---&gt;  避免重名问题</span></span><br><span class="line">   clear_params=<span class="string">&quot;true | false&quot;</span>   <span class="comment"># (可选)在启动前，删除节点的私有空间的所有参数</span></span><br><span class="line">   output=<span class="string">&quot;log | screen&quot;</span>       <span class="comment">#(可选)  日志发送目标，可以设置为 log 日志文件，或 screen 屏幕,默认是 log</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="comment">#子集标签</span></span><br><span class="line">   env  <span class="comment">#环境变量设置</span></span><br><span class="line">   remap  <span class="comment">#重映射节点名称</span></span><br><span class="line">   rosparam  <span class="comment">#参数设置</span></span><br><span class="line">   param  <span class="comment">#参数设置</span></span><br></pre></td></tr></table></figure><p>（3）<include>标签</include></p><p>用于将另一个 xml 格式的 launch 文件导入到当前文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">   file=<span class="string">&quot;$(find 包名)/xxx/xxx.launch&quot;</span>   <span class="comment">#要包含的文件路径  </span></span><br><span class="line">   <span class="comment"># $&#123;find  包名&#125;是一种固定格式，自动寻找功能包所在路径，所以后面只需要给出launch文件在功能包下的相对路径即可</span></span><br><span class="line">  </span><br><span class="line">ns=<span class="string">&quot;xxx&quot;</span>    <span class="comment">#(可选) 在指定命名空间导入文件</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="comment">#子集标签</span></span><br><span class="line">   env  <span class="comment">#环境变量设置</span></span><br><span class="line">   arg   <span class="comment">#将参数传递给被包含的文件</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">   &lt;include file=<span class="string">&quot;$&#123;find  功能包名&#125;/launch/demo1_turtle.launch&quot;</span> /&gt; </span><br><span class="line">       ...</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>（4）<remap>标签（非常实用）</remap></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">   <span class="keyword">from</span>=<span class="string">&quot;xxx&quot;</span>   <span class="comment">#原始话题名称</span></span><br><span class="line">   to=<span class="string">&quot;yyy&quot;</span>   <span class="comment">#目标名称</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#子集标签</span></span><br><span class="line">   无</span><br></pre></td></tr></table></figure><ul><li>举例：乌龟键盘控制节点turtle_teleop_key局限性很大，通常使用<strong>ROS系统内置的键盘控制节点</strong>！</li></ul><p>问题：使用其他键盘控制节点，键盘发布速度控制信息，乌龟订阅信息，但是二者的话题不一样！！无法连接</p><p>​                键盘节点的话题名是/cmd_vel，乌龟节点的话题名是/turtle1/cmd_vel</p><ul><li>中一个话题名称，使用remap标签</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;node pkg=<span class="string">&quot;turtlesim&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>  name=<span class="string">&quot;my_turtle&quot;</span>  output=<span class="string">&quot;screen&quot;</span>&gt;</span><br><span class="line">    &lt;remap <span class="keyword">from</span>=<span class="string">&quot;/turtle1/cmd_vel&quot;</span>  to=<span class="string">&quot;/cmd_vel&quot;</span>  /&gt;  <span class="comment">#重映射话题名</span></span><br><span class="line">        &lt;/node&gt;  #使用了node子标签时，后面要用&lt;/node&gt;</span><br><span class="line"> &lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>（5）<param>标签</p><p>用于在参数服务器上设置参数，参数源可以在标签中通过 <strong>value 指定</strong>，也可以通过<strong>外部文件加载</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">   name=<span class="string">&quot;命名空间/参数名&quot;</span>    <span class="comment">#参数名称</span></span><br><span class="line">   value=<span class="string">&quot;xxx&quot;</span>    <span class="comment">#(可选)定义参数值，如果此处省略，必须指定外部文件作为参数源</span></span><br><span class="line">   <span class="built_in">type</span>=<span class="string">&quot;str | int | double | bool | yaml&quot;</span>    <span class="comment">#(可选)  指定参数类型，如果未指定，roslaunch 会尝试确定参数类型，规则如下:</span></span><br><span class="line">                                                                                 <span class="comment">#如果包含 &#x27;.&#x27; 的数字解析未浮点型，否则为整型</span></span><br><span class="line">                                                                                 <span class="comment">#&quot;true&quot; 和 &quot;false&quot; 是 bool 值(不区分大小写)</span></span><br><span class="line">                                                                                 <span class="comment"># 其他是字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#子集标签</span></span><br><span class="line">   无</span><br></pre></td></tr></table></figure><p>有<strong>两种方式</strong>使用param标签：</p><p>tip: 在node中设置会自动加上<strong>node的名称作为前缀</strong>，该前缀也成为<code>私有命名空间</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式1：在launch下，node外</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;param name=<span class="string">&quot;param_A&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;int&quot;</span>  value=<span class="string">&quot;100&quot;</span> /&gt;   <span class="comment">#参数名称为param_A</span></span><br><span class="line">    &lt;node....&gt;</span><br><span class="line">&lt;/launch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2：node下</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;node pkg=<span class="string">&quot;turtlesim&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>  name=<span class="string">&quot;my_turtle&quot;</span>  output=<span class="string">&quot;screen&quot;</span>&gt;</span><br><span class="line">    &lt;param name=<span class="string">&quot;param_B&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;double&quot;</span>  value=<span class="string">&quot;3.14&quot;</span>  /&gt;   <span class="comment">#参数名称为my_turtle/param_B ,  即以node名称作为前缀</span></span><br><span class="line">        &lt;/node&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>（6）<rosparam>标签</rosparam></p><p>可以从 <strong>YAML 文件导入参数</strong>，或将参数导出到 YAML 文件，也可以用来删除参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">   command=<span class="string">&quot;load | dump | delete&quot;</span>  <span class="comment">#(可选，默认 load)       </span></span><br><span class="line">      <span class="comment">#加载、导出或删除参数</span></span><br><span class="line">   file=<span class="string">&quot;$(find xxxxx)/xxx/yyy....&quot;</span>  <span class="comment">#加载或导出到的 yaml 文件</span></span><br><span class="line">   param=<span class="string">&quot;参数名称&quot;</span></span><br><span class="line">   ns=<span class="string">&quot;命名空间&quot;</span>   <span class="comment">#(可选)</span></span><br></pre></td></tr></table></figure><p>rosparam也有两种方式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式1：在launch下，node外</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;rosparam  command=<span class="string">&quot;load&quot;</span>  file= <span class="string">&quot;$&#123;find  demo_launch1&#125;/launch/param_test.yaml&quot;</span> /&gt;   <span class="comment">#从yaml文件加载参数</span></span><br><span class="line">    &lt;node....&gt;</span><br><span class="line">&lt;/launch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式2：node下</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;node pkg=<span class="string">&quot;turtlesim&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>  name=<span class="string">&quot;my_turtle&quot;</span>  output=<span class="string">&quot;screen&quot;</span>&gt;</span><br><span class="line">    &lt;rosparam  command=<span class="string">&quot;load&quot;</span>  file=<span class="string">&quot;$&#123;find  demo_launch1&#125;/launch/param_test.yaml&quot;</span>  /&gt;   </span><br><span class="line">        &lt;/node&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导出参数dump</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;rosparam  command=<span class="string">&quot;dump&quot;</span>  file= <span class="string">&quot;$&#123;find  demo_launch1&#125;/launch/param_out.yaml&quot;</span> /&gt;   </span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>注：导出文件的rosparam标签不能放在节点启动文件中，因为rosparam启动的优先级最高，所以会在node启动之前就导出参数，使得很多参数无法导出；因此通常做法：将dump<strong>写入一个新的launch文件</strong>。</p><p>（8）<group>标签</group></p><p>对<strong>节点分组</strong>，具有 ns 属性，可以让节点归属某个命名空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">   ns=<span class="string">&quot;名称空间&quot;</span>   <span class="comment">#(可选)</span></span><br><span class="line">   clear_params=<span class="string">&quot;true | false&quot;</span>   <span class="comment">#(可选)启动前，是否删除组名称空间的所有参数(慎用....此功能危险)</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">#子标签</span></span><br><span class="line">   除了launch 标签外的其他标签</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动两对乌龟、键盘控制节点，使他们不产生命名冲突</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;group  ns=<span class="string">&quot;first&quot;</span>&gt;   <span class="comment">#第一个分组，命名空间是first</span></span><br><span class="line">    &lt;node  pkg=<span class="string">&quot;turtlesim&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>  name=<span class="string">&quot;my_turtle&quot;</span>  output=<span class="string">&quot;screen&quot;</span>  /&gt;</span><br><span class="line">        &lt;node  pkg=<span class="string">&quot;turtlesim&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span>  name=<span class="string">&quot;my_key&quot;</span>  output=<span class="string">&quot;screen&quot;</span>  /&gt;</span><br><span class="line">        &lt;/group&gt;</span><br><span class="line">        &lt;group  ns=<span class="string">&quot;second&quot;</span>&gt;   <span class="comment">#第二个分组，命名空间是second</span></span><br><span class="line">        &lt;node  pkg=<span class="string">&quot;turtlesim&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>  name=<span class="string">&quot;my_turtle&quot;</span>  output=<span class="string">&quot;screen&quot;</span>  /&gt;</span><br><span class="line">            &lt;node  pkg=<span class="string">&quot;turtlesim&quot;</span>  <span class="built_in">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span>  name=<span class="string">&quot;my_key&quot;</span>  output=<span class="string">&quot;screen&quot;</span>  /&gt;</span><br><span class="line">        &lt;/group&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p>（9）<arg>标签</arg></p><p>用于<strong>动态传参</strong>，类似于<strong>函数的参数</strong>，可以增强launch文件的灵活性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#属性</span></span><br><span class="line">   name=<span class="string">&quot;参数名称&quot;</span></span><br><span class="line">   default=<span class="string">&quot;默认值&quot;</span>    <span class="comment">#(可选)</span></span><br><span class="line">   value=<span class="string">&quot;数值&quot;</span>    <span class="comment">#(可选) 不可以与 default 并存</span></span><br><span class="line">   doc=<span class="string">&quot;描述&quot;</span>   <span class="comment">#参数说明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#子标签</span></span><br><span class="line">   无</span><br></pre></td></tr></table></figure><p>arg的作用：可以理解为方便<strong>参数复用</strong>，在小程序中无法体现其优越性，在<strong>复杂的机器人项目中其优势才得以体现</strong></p><p>假如我现在要设置三个参数A、B、C，它们都记录了同一个小车的尺寸：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不使用arg标签</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;param  name=<span class="string">&quot;A&quot;</span>  value=<span class="string">&quot;0.6&quot;</span>   /&gt;</span><br><span class="line">     &lt;param  name=<span class="string">&quot;B&quot;</span>  value=<span class="string">&quot;0.6&quot;</span>   /&gt;</span><br><span class="line">       &lt;param  name=<span class="string">&quot;C&quot;</span>  value=<span class="string">&quot;0.6&quot;</span>   /&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用arg标签</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line">&lt;arg  name=<span class="string">&quot;car_length&quot;</span>  default=<span class="string">&quot;0.5&quot;</span>  /&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;param  name=<span class="string">&quot;A&quot;</span>  value=<span class="string">&quot;$(arg  car_length)&quot;</span>   /&gt;  <span class="comment">#调用参数car_length</span></span><br><span class="line">     &lt;param  name=<span class="string">&quot;B&quot;</span>  value=<span class="string">&quot;$(arg  car_length)&quot;</span>   /&gt;</span><br><span class="line">       &lt;param  name=<span class="string">&quot;C&quot;</span>  value=<span class="string">&quot;$(arg  car_length)&quot;</span>   /&gt;</span><br><span class="line"> &lt;/launch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#体会arg的好处： 如果要更改小车尺寸，不用到冗长的launch文件里一个一个找、一个一个改，</span></span><br><span class="line">                                    <span class="comment">#只用修改arg一处即可！</span></span><br></pre></td></tr></table></figure><p><strong>3.重名问题</strong></p><p>（1）功能包重名 —— “工作空间覆盖”</p><ul><li><p>说明：</p><p>自定义工作空间的功能包与<strong>内置的功能包</strong>可以重名或者<strong>不同的自定义的工作空间中</strong>也可以出现重名的功能包；</p><p>优先级：ROS 会解析 .bashrc 文件，并生成 ROS_PACKAGE_PATH ROS包路径，该变量中按照 .bashrc  中配置设置工作空间优先级，在设置时需要遵循一定的原则:ROS_PACKAGE_PATH 中的值，和 .bashrc  的配置顺序相反—&gt;后配置的优先级更高</p><p>功能包重名时，会按照 ROS_PACKAGE_PATH 查找，配置在前的会优先执行。</p></li></ul><p>每种问题都有3种途径：<strong>1.rosrun命令  2.launch文件  3.编码实现</strong></p><p><strong>（2）节点重名</strong></p><p>解决方法：1.重映射  2.加前缀(命名空间)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rosrun命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.设置命名空间  __ns:=</span></span><br><span class="line">rosrun 包名 节点名 __ns:=新名称</span><br><span class="line">rosrun  turtlesim  turtlesim_node   __ns:=/xxx</span><br><span class="line">    </span><br><span class="line"><span class="comment">#2.重映射别名  __name:=</span></span><br><span class="line">rosrun 包名 节点名   __name:=新名称</span><br><span class="line">rosrun turtlesim  turtlesim_node   __name:=t1</span><br><span class="line">rosrun turtlesim  turtlesim_node   __name:=t2 </span><br><span class="line">    </span><br><span class="line"><span class="comment">#3.同时命名空间+重映射  __ns:=      __name:=</span></span><br><span class="line"> rosrun 包名 节点名   __ns:=新名称   __name:=新名称</span><br><span class="line"> rosrun  turtlesim  turtlesim_node   __ns:=/xxx   __name:=tn</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#launch文件</span></span><br><span class="line">在 node 标签中有两个属性: name 和 ns，二者分别是用于实现名称重映射与命名空间设置的</span><br><span class="line"></span><br><span class="line">&lt;launch&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> name=<span class="string">&quot;t1&quot;</span> /&gt;  <span class="comment">#重映射</span></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> name=<span class="string">&quot;t2&quot;</span> /&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> name=<span class="string">&quot;t1&quot;</span> ns=<span class="string">&quot;hello&quot;</span>/&gt;   <span class="comment">#重映射+命名空间</span></span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编码实现</span></span><br><span class="line">如果自定义节点，则以更灵活的设置命名空间与重映射实现</span><br><span class="line">rospy.init_node(<span class="string">&quot;lisi&quot;</span>,anonymous=<span class="literal">True</span>)  <span class="comment">#会在节点名称后缀时间戳</span></span><br></pre></td></tr></table></figure><p><strong>（3）话题重名</strong></p><p>两个节点是<strong>可以通信</strong>的，两个节点之间使用了相同的消息类型，但是由于，话题名称不同，导致通信失败</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rosrun命令</span></span><br><span class="line"> rorun 包名 节点名 话题名:=新话题名称</span><br><span class="line"> rosrun  turtlesim  turtlesim_node   /turtle1/cmd_vel:=/cmd_vel</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#launch文件</span></span><br><span class="line">&lt;launch&gt;</span><br><span class="line"></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> name=<span class="string">&quot;t1&quot;</span> /&gt;</span><br><span class="line">    &lt;node pkg=<span class="string">&quot;teleop_twist_keyboard&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;teleop_twist_keyboard.py&quot;</span> name=<span class="string">&quot;key&quot;</span>&gt;</span><br><span class="line">        &lt;remap <span class="keyword">from</span>=<span class="string">&quot;/cmd_vel&quot;</span> to=<span class="string">&quot;/turtle1/cmd_vel&quot;</span> /&gt;   <span class="comment">#&lt;remap from=&quot;原话题&quot; to=&quot;新话题&quot; /&gt;</span></span><br><span class="line">    &lt;/node&gt;</span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><p><strong>话题名称</strong>的分类：</p><p>补充知识点（重要）：话题的名称与节点的命名空间、节点的名称是有一定关系的，<strong>话题名称</strong>大致可以分为三种类型</p><p>（如果有一个话题叫<code>liaotian</code>）：</p><ul><li>全局：参考ROS系统，<code>/liaotian</code>  /代表的是根目录  </li><li>相对：参考节点的命名空间， <code>/ergouzi/liaotian</code>  ergouzi是节点的命名空间  —&gt; 会以<code>节点的命名空间</code>作为前缀</li><li>私有：参考节点名称， <code>/ergouzi/wangqiang/liaotian</code>  wangqiang是节点名  —&gt; 会以<code>节点的命名空间+节点名</code>作为前缀</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编码设置</span></span><br><span class="line">假设现在初始化节点时，传递一个 __ns:= xxx</span><br><span class="line">    </span><br><span class="line"><span class="comment">#1.全局</span></span><br><span class="line"><span class="comment">#话题命名为：以/开头的名称</span></span><br><span class="line">pub = rospy.Publisher(<span class="string">&quot;/chatter&quot;</span>,String,queue_size=<span class="number">1000</span>)  <span class="comment">#/chatter</span></span><br><span class="line">pub = rospy.Publisher(<span class="string">&quot;/chatter/money&quot;</span>,String,queue_size=<span class="number">1000</span>)  <span class="comment">#/chatter/money</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.相对</span></span><br><span class="line"><span class="comment">#话题命名为：非/开头的名称</span></span><br><span class="line">pub = rospy.Publisher(<span class="string">&quot;chatter&quot;</span>,String,queue_size=<span class="number">1000</span>)   <span class="comment">#xxx/chatter</span></span><br><span class="line">pub = rospy.Publisher(<span class="string">&quot;chatter/money&quot;</span>,String,queue_size=<span class="number">1000</span>)   <span class="comment">#xxx/chatter/money</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.私有</span></span><br><span class="line"><span class="comment">#话题命名为：以~开头的名称</span></span><br><span class="line">pub = rospy.Publisher(<span class="string">&quot;~chatter&quot;</span>,String,queue_size=<span class="number">1000</span>)   <span class="comment">#/xxx/hello/chatter</span></span><br><span class="line">pub = rospy.Publisher(<span class="string">&quot;~chatter/money&quot;</span>,String,queue_size=<span class="number">1000</span>)   <span class="comment">#/xxx/hello/chatter/money</span></span><br></pre></td></tr></table></figure><p><strong>（4）参数重名</strong></p><p>没有重映射实现，为了尽量的避免参数重名，都是使用为参数名<strong>添加前缀</strong>的方式，实现类似于话题名称。</p><p><strong>参数名称</strong>：也有<strong>全局、相对</strong>、和<strong>私有</strong>三种类型之分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rosrun</span></span><br><span class="line">rosrun 包名 节点名称 _参数名:=参数值</span><br><span class="line">rosrun turtlesim turtlesim_node _A:=<span class="number">100</span>   <span class="comment">#/turtlesim/A=100</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#说名：执行rosrun时设置参数参数名使用的是私有模式</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#launch文件</span></span><br><span class="line">前面已经介绍过，可以在 node 标签外，或 node 标签中通过 param 或 rosparam 来设置参数。</span><br><span class="line">在 node 标签外设置的参数是全局性质的，参考的是 / </span><br><span class="line">在 node 标签中设置的参数是私有性质的，参考的是 /命名空间/节点名称</span><br><span class="line"></span><br><span class="line">&lt;launch&gt;</span><br><span class="line"></span><br><span class="line">    &lt;param name=<span class="string">&quot;p1&quot;</span> value=<span class="string">&quot;100&quot;</span> /&gt;      <span class="comment">#/p1=100</span></span><br><span class="line">    &lt;node pkg=<span class="string">&quot;turtlesim&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> name=<span class="string">&quot;ergouzi&quot;</span>&gt;</span><br><span class="line">         &lt;param name=<span class="string">&quot;p2&quot;</span> value=<span class="string">&quot;100&quot;</span> /&gt;   <span class="comment">#/erigouzi/p1=100</span></span><br><span class="line">    &lt;/node&gt;</span><br><span class="line"></span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编码方式</span></span><br><span class="line">编码的方式可以更方便的设置:全局、相对与私有参数</span><br><span class="line">    </span><br><span class="line">rospy.set_param函数中，参数<span class="number">1</span>传入参数名称，参数<span class="number">2</span>是传入参数值。参数<span class="number">1</span>中参数名称设置时：</span><br><span class="line">如果以 / 开头，那么就是全局参数</span><br><span class="line">如果以 ~ 开头，那么就是私有参数</span><br><span class="line">既不以 / 也不以 ~ 开头，那么就是相对参数</span><br><span class="line"></span><br><span class="line">rospy.set_param(<span class="string">&quot;/py_A&quot;</span>,<span class="number">100</span>)  <span class="comment">#全局</span></span><br><span class="line">rospy.set_param(<span class="string">&quot;py_B&quot;</span>,<span class="number">100</span>)  <span class="comment">#相对</span></span><br><span class="line">rospy.set_param(<span class="string">&quot;~py_C&quot;</span>,<span class="number">100</span>)  <span class="comment">#私有</span></span><br></pre></td></tr></table></figure><p><strong>4.ROS分布式通信</strong></p><p>一个运行中的ROS系统可以包含分布在<strong>多台计算机上多个节点</strong>。根据系统的配置方式，任何节点可能随时需要与任何其他节点进行通信。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置ip等等操作，需要就查</span></span><br></pre></td></tr></table></figure><h4 id="九、ROS内置组件"><a href="#九、ROS内置组件" class="headerlink" title="九、ROS内置组件"></a>九、ROS内置组件</h4><p>常用的内置组件：TF坐标变换、rosbag、rqt 工具箱</p><p><strong>1.TF坐标变换</strong></p><p>明确了不同坐标系之间的的相对关系，就可以实现任何坐标点在不同坐标系之间的转换，但是该计算实现是较为常用的，且算法也有点复杂。因此在 **ROS 中直接封装了相关的模块: 坐标变换(TF)**，我们不需要关心坐标变换是如何实现的，直接调用即可。</p><p>（1）坐标message</p><p>TF转换实现中常用的 msg:</p><p>注：<strong>最好记住这两个消息类型</strong>！因为TF中实现坐标转换都是使用这样的message</p><ul><li><code>geometry_msgs/TransformStamped</code>用于传输坐标系<strong>相对位置</strong>信息（涉及<strong>四元数</strong>概念，较难） </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">std_msgs/Header header</span><br><span class="line">  uint32 seq</span><br><span class="line">  time stamp</span><br><span class="line">  string frame_id</span><br><span class="line">string child_frame_id</span><br><span class="line">geometry_msgs/Transform transform</span><br><span class="line">  geometry_msgs/Vector3 translation</span><br><span class="line">    float64 x</span><br><span class="line">    float64 y</span><br><span class="line">    float64 z</span><br><span class="line">  geometry_msgs/Quaternion rotation</span><br><span class="line">    float64 x</span><br><span class="line">    float64 y</span><br><span class="line">    float64 z</span><br><span class="line">    float64 w</span><br></pre></td></tr></table></figure><ul><li><code>geometry_msgs/PointStamped</code>用于传输某个坐标系内坐标点的信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">std_msgs/Header header</span><br><span class="line">  uint32 seq</span><br><span class="line">  time stamp</span><br><span class="line">  string frame_id</span><br><span class="line">geometry_msgs/Point point</span><br><span class="line">  float64 x</span><br><span class="line">  float64 y</span><br><span class="line">  float64 z</span><br></pre></td></tr></table></figure><p>在坐标变换中，频繁的需要使用到坐标系的相对关系以及坐标点信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看两种消息类型</span></span><br><span class="line">rosmsg info geometry_msgs/TransformStamped</span><br><span class="line">rosmsg info geometry_msgs/PointStamped</span><br></pre></td></tr></table></figure><p>（2）静态坐标变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建功能包</span></span><br><span class="line">依赖有： tf2、tf2_ros、tf2_geometry_msgs、roscpp rospy std_msgs geometry_msgs</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Publisher实现</span></span><br><span class="line"><span class="comment">#发布两个坐标系关系</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="keyword">import</span> tf     <span class="comment">#将欧拉角转换为四元数</span></span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> TransformStamped</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;static_tf_pub_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建 静态坐标广播器</span></span><br><span class="line">    broadcaster = tf2_ros.StaticTransformBroadcaster()</span><br><span class="line">    <span class="comment"># 4.创建并组织发布的消息</span></span><br><span class="line">    tfs = TransformStamped()</span><br><span class="line">    <span class="comment"># --- 头信息Header  （这些都与消息类型有关）</span></span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;base_link&quot;</span></span><br><span class="line">    tfs.header.stamp = rospy.Time.now()</span><br><span class="line">    tfs.header.seq = <span class="number">101</span></span><br><span class="line">    <span class="comment"># --- 子坐标系</span></span><br><span class="line">    tfs.child_frame_id = <span class="string">&quot;radar&quot;</span></span><br><span class="line">    <span class="comment"># --- 坐标系相对信息</span></span><br><span class="line">    <span class="comment"># ------ 偏移量  (平移量)</span></span><br><span class="line">    tfs.transform.translation.x = <span class="number">0.2</span></span><br><span class="line">    tfs.transform.translation.y = <span class="number">0.0</span></span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.5</span></span><br><span class="line">    <span class="comment"># ------ 四元数  (角度偏转量，四元数是一个较难的概念，需要就查)</span></span><br><span class="line">    qtn = tf.transformations.quaternion_from_euler(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#先从欧拉角转换为四元数</span></span><br><span class="line">    tfs.transform.rotation.x = qtn[<span class="number">0</span>]    <span class="comment">#再设置四元数</span></span><br><span class="line">    tfs.transform.rotation.y = qtn[<span class="number">1</span>]</span><br><span class="line">    tfs.transform.rotation.z = qtn[<span class="number">2</span>]</span><br><span class="line">    tfs.transform.rotation.w = qtn[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.广播器发送消息</span></span><br><span class="line">    broadcaster.sendTransform(tfs)</span><br><span class="line">    <span class="comment"># 6.spin</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Subcriber实现</span></span><br><span class="line"><span class="comment"># 1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="comment"># 不要使用 geometry_msgs,需要使用 tf2 内置的消息类型</span></span><br><span class="line"><span class="keyword">from</span> tf2_geometry_msgs <span class="keyword">import</span> PointStamped</span><br><span class="line"><span class="comment"># from geometry_msgs.msg import PointStamped</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;static_sub_tf_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建 TF 订阅对象</span></span><br><span class="line">    buffer = tf2_ros.Buffer()   <span class="comment">#3.1缓存对象</span></span><br><span class="line">    listener = tf2_ros.TransformListener(buffer)  <span class="comment">#3.2订阅对象</span></span><br><span class="line"></span><br><span class="line">    rate = rospy.Rate(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():    </span><br><span class="line">    <span class="comment"># 4.创建一个 radar 坐标系中的坐标点（等待被转换的坐标点）</span></span><br><span class="line">        point_source = PointStamped()</span><br><span class="line">        point_source.header.frame_id = <span class="string">&quot;radar&quot;</span></span><br><span class="line">        point_source.header.stamp = rospy.Time.now()</span><br><span class="line">        point_source.point.x = <span class="number">10</span>  <span class="comment">#被转换的坐标点必须已知</span></span><br><span class="line">        point_source.point.y = <span class="number">2</span></span><br><span class="line">        point_source.point.z = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#     5.用buffer中转换函数，完成坐标转换！</span></span><br><span class="line">            point_target = buffer.transform(point_source,<span class="string">&quot;base_link&quot;</span>)   <span class="comment">#缓存buffer中有转换的方法</span></span><br><span class="line">                                                                                                                                <span class="comment">#参数：待转换的坐标点、目标坐标系</span></span><br><span class="line">            rospy.loginfo(<span class="string">&quot;转换结果:x = %.2f, y = %.2f, z = %.2f&quot;</span>,</span><br><span class="line">                            point_target.point.x,</span><br><span class="line">                            point_target.point.y,</span><br><span class="line">                            point_target.point.z)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            rospy.logerr(<span class="string">&quot;异常:%s&quot;</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#     6.spin</span></span><br><span class="line">        rate.sleep()</span><br></pre></td></tr></table></figure><ul><li>拓：静态坐标系的实现流程很固定，所以ROS也考虑到这一点，为我们<strong>封装好了专门的节点</strong>——实现静态坐标变换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#rosrun tf2_ros static_transform_publisher x偏移量 y偏移量 z偏移量 z偏航角度 y俯仰角度 x翻滚角度 父级坐标系 子级坐标系</span></span><br><span class="line">rosrun tf2_ros static_transform_publisher <span class="number">0.2</span> <span class="number">0</span> <span class="number">0.5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> /baselink /laser</span><br></pre></td></tr></table></figure><ul><li>拓：在rviz中显示坐标系关系：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#操作流程：</span></span><br><span class="line">   新建窗口输入命令:rviz;</span><br><span class="line">   在启动的 rviz 中设置Fixed Frame 为 base_link;</span><br><span class="line">   点击左下的 add 按钮，在弹出的窗口中选择 TF 组件，即可显示坐标关系。</span><br></pre></td></tr></table></figure><p>（3）动态坐标变换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建功能包</span></span><br><span class="line">依赖有： tf2、tf2_ros、tf2_geometry_msgs、roscpp rospy std_msgs geometry_msgs、turtlesim</span><br></pre></td></tr></table></figure><p><strong>解释下面这段代码的思路：</strong></p><p>1.在Publisher节点中创建subscriber订阅话题<code>/turtle1/pose</code>（消息类型为<code>Pose</code>，回调函数为<code>doPose</code>）</p><p>2.在回调函数中处理消息，父系<code>world</code>，子系<code>turtle1</code>；通过**TransformStamped对象 (geometry_msgs.msg库)**的方法得到转换关系：3偏移量+四元数</p><p>3.通过<strong>TransformBroadcaster对象 (tf2_ros库)<strong>将转换关系广播（</strong>发布到TF中</strong>，在rviz中添加TF可以直接看到已经发布的信息）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Publisher：负责订阅乌龟位姿信息，转换成坐标系的相对关系，再发布</span></span><br><span class="line"><span class="comment">#（由于乌龟坐标不再是静态的，所以需要发布方节点实时读取，才能找到坐标关系进行发布）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="keyword">import</span> tf</span><br><span class="line"><span class="keyword">from</span> turtlesim.msg <span class="keyword">import</span> Pose</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> TransformStamped</span><br><span class="line"></span><br><span class="line"><span class="comment">#     4.回调函数处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doPose</span>(<span class="params">pose</span>):</span></span><br><span class="line">    <span class="comment">#         4-1.创建 TF 广播器</span></span><br><span class="line">    broadcaster = tf2_ros.TransformBroadcaster()</span><br><span class="line">    <span class="comment">#         4-2.创建 广播的数据(通过 pose 设置)，发布坐标系相对关系</span></span><br><span class="line">    tfs = TransformStamped()</span><br><span class="line">    tfs.header.frame_id = <span class="string">&quot;world&quot;</span></span><br><span class="line">    tfs.header.stamp = rospy.Time.now()</span><br><span class="line">    tfs.child_frame_id = <span class="string">&quot;turtle1&quot;</span></span><br><span class="line">    tfs.transform.translation.x = pose.x   <span class="comment">#偏移量</span></span><br><span class="line">    tfs.transform.translation.y = pose.y</span><br><span class="line">    tfs.transform.translation.z = <span class="number">0.0</span></span><br><span class="line">    qtn = tf.transformations.quaternion_from_euler(<span class="number">0</span>,<span class="number">0</span>,pose.theta)   <span class="comment">#四元数</span></span><br><span class="line">                                                                        <span class="comment">#乌龟是2D运动，不存在X、Y上的偏角，只有Z上的偏航，所以传pose.theta即可</span></span><br><span class="line">    tfs.transform.rotation.x = qtn[<span class="number">0</span>]</span><br><span class="line">    tfs.transform.rotation.y = qtn[<span class="number">1</span>]</span><br><span class="line">    tfs.transform.rotation.z = qtn[<span class="number">2</span>]</span><br><span class="line">    tfs.transform.rotation.w = qtn[<span class="number">3</span>]</span><br><span class="line">    <span class="comment">#         4-3.广播器发布数据</span></span><br><span class="line">    broadcaster.sendTransform(tfs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;dynamic_tf_pub_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建订阅对象，订阅 /turtle1/pose 话题消息</span></span><br><span class="line">    sub = rospy.Subscriber(<span class="string">&quot;/turtle1/pose&quot;</span>,Pose,doPose)</span><br><span class="line">    <span class="comment">#     4.回调函数处理</span></span><br><span class="line">    <span class="comment">#         4-1.创建 TF 广播器</span></span><br><span class="line">    <span class="comment">#         4-2.创建 广播的数据(通过 pose 设置)</span></span><br><span class="line">    <span class="comment">#         4-3.广播器发布数据</span></span><br><span class="line">    <span class="comment">#     5.spin</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Subscriber：与静态几乎一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">import</span> tf2_ros</span><br><span class="line"><span class="comment"># 不要使用 geometry_msgs,需要使用 tf2 内置的消息类型</span></span><br><span class="line"><span class="keyword">from</span> tf2_geometry_msgs <span class="keyword">import</span> PointStamped</span><br><span class="line"><span class="comment"># from geometry_msgs.msg import PointStamped</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;static_sub_tf_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建 TF 订阅对象</span></span><br><span class="line">    buffer = tf2_ros.Buffer()</span><br><span class="line">    listener = tf2_ros.TransformListener(buffer)</span><br><span class="line"></span><br><span class="line">    rate = rospy.Rate(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():    </span><br><span class="line">    <span class="comment"># 4.创建一个 radar 坐标系中的坐标点</span></span><br><span class="line">        point_source = PointStamped()</span><br><span class="line">        point_source.header.frame_id = <span class="string">&quot;turtle1&quot;</span></span><br><span class="line">        point_source.header.stamp = rospy.Time.now()</span><br><span class="line">        point_source.point.x = <span class="number">10</span></span><br><span class="line">        point_source.point.y = <span class="number">2</span></span><br><span class="line">        point_source.point.z = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#     5.调研订阅对象的 API 将 4 中的点坐标转换成相对于 world 的坐标</span></span><br><span class="line">            point_target = buffer.transform(point_source,<span class="string">&quot;world&quot;</span>,rospy.Duration(<span class="number">1</span>))  <span class="comment">#缓存buffer中有转换的方法</span></span><br><span class="line">            rospy.loginfo(<span class="string">&quot;转换结果:x = %.2f, y = %.2f, z = %.2f&quot;</span>,</span><br><span class="line">                            point_target.point.x,</span><br><span class="line">                            point_target.point.y,</span><br><span class="line">                            point_target.point.z)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            rospy.logerr(<span class="string">&quot;异常:%s&quot;</span>,e)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#     6.spin</span></span><br><span class="line">        rate.sleep()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>系统学习ROS（一）</title>
    <link href="/2021/04/14/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/04/14/%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0ROS%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>入门的概念已经了解，本系列是我在系统学习ROS中的笔记。ROS知识点繁多，有些内容用到的时候google或者wiki查询，不做记录。</p><span id="more"></span><p>同时，只记录python实现版本。</p><p><strong>学习地址（全文参考）</strong>：<a href="http://www.autolabor.com.cn/book/ROSTutorials/">http://www.autolabor.com.cn/book/ROSTutorials/</a></p><h3 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h3><h4 id="1-基本开发流程"><a href="#1-基本开发流程" class="headerlink" title="1.基本开发流程"></a>1.基本开发流程</h4><ol><li>创建工作空间；</li><li>创建功能包；</li><li>编辑源文件；（.cpp、.py）</li><li>编辑配置文件；</li><li>编译并执行。</li></ol><h4 id="2-workspace以及功能包的编译与使用"><a href="#2-workspace以及功能包的编译与使用" class="headerlink" title="2.workspace以及功能包的编译与使用"></a>2.workspace以及功能包的编译与使用</h4><p>（1）创建workspace：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p test_ws&#x2F;src</span><br><span class="line">cd test_ws</span><br><span class="line">catkin_make  #编译工作空间</span><br></pre></td></tr></table></figure><p>（2）创建功能包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd src</span><br><span class="line">catkin_create_pkg &lt;depend&gt; roscpp rospy std_msgs  # 通常都需要roscpp、rospy</span><br></pre></td></tr></table></figure><p><strong>学习过程中：</strong></p><p>ubuntu工作空间创建好后，可以一直用；例如创建了test_ws工作空间，该空间已经编译完成，有自动生成的devel、build文件夹，则后续可以在该workspace下添加功能包。</p><p>在src文件夹下：有多个功能包，在学习过程中直接将源码功能包放进来;</p><p>编译功能包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#在根目录下</span><br><span class="line">catkin_make</span><br><span class="line">source devel&#x2F;setup.bash   #此命令只对当前终端有效，要想一劳永逸，见下面方法</span><br></pre></td></tr></table></figure><p>然后就可以roslaunch执行launch文件啦！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">直接使用 gedit 或 vi 编辑 .bashrc 文件，最后添加该内容</span><br><span class="line"></span><br><span class="line">#方法二</span><br><span class="line">echo &quot;source ~&#x2F;工作空间&#x2F;devel&#x2F;setup.bash&quot; &gt;&gt; ~&#x2F;.bashrc</span><br><span class="line"></span><br><span class="line">最后在终端中执行：</span><br><span class="line">source .bashrc  #之后在所有终端中都可以一劳永逸了！</span><br></pre></td></tr></table></figure><h4 id="3-集成开发环境："><a href="#3-集成开发环境：" class="headerlink" title="3.集成开发环境："></a>3.集成开发环境：</h4><p>选择VS Code，有了集成开发环境，可以不用再在记事本当中写代码了！</p><p>（1）集成开发环境提供了图形化界面，可以可视化地创建功能包、程序文件等；</p><p>（2）为VScode安装如下插件：C++、Python、Cmake、ROS</p><p>（3）进行一些配置，将作者的配置文件直接复制，此后可以通过<code>Ctrl+Shift+B</code>直接完成编译（相当与<code>catkin_make</code>）</p><p>（4）无论是C++还是python程序，都需要在CMakeList文件中做配置，再编译；</p><h4 id="4-launch文件"><a href="#4-launch文件" class="headerlink" title="4.launch文件"></a>4.launch文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">    &lt;node pkg&#x3D;&quot;helloworld&quot; type&#x3D;&quot;demo_hello&quot; name&#x3D;&quot;hello&quot; output&#x3D;&quot;screen&quot; &#x2F;&gt;</span><br><span class="line">    &lt;node pkg&#x3D;&quot;turtlesim&quot; type&#x3D;&quot;turtlesim_node&quot; name&#x3D;&quot;t1&quot;&#x2F;&gt;</span><br><span class="line">    &lt;node pkg&#x3D;&quot;turtlesim&quot; type&#x3D;&quot;turtle_teleop_key&quot; name&#x3D;&quot;key1&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;launch&gt;</span><br><span class="line"></span><br><span class="line">roslaunch 包名 launch文件名</span><br><span class="line"></span><br><span class="line"># node ---&gt; 包含的某个节点</span><br><span class="line"># pkg -----&gt; 功能包</span><br><span class="line"># type ----&gt; 被运行的节点文件</span><br><span class="line"># name --&gt; 为节点命名</span><br><span class="line"># output-&gt; 设置日志的输出目标</span><br></pre></td></tr></table></figure><h4 id="5-文件系统架构："><a href="#5-文件系统架构：" class="headerlink" title="5.文件系统架构："></a>5.文件系统架构：</h4><img src="/images/image-20210414142652602.png" alt="image-20210414142652602" style="zoom:67%;"><p>经常编辑这些功能包就会熟悉起来</p><h4 id="6-ROS文件系统常用命令"><a href="#6-ROS文件系统常用命令" class="headerlink" title="6.ROS文件系统常用命令"></a>6.ROS文件系统常用命令</h4><p>ROS专门提供了一些类似于Linux的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xxx   #安装 ROS功能包</span><br><span class="line">sudo apt purge xxx    #删除某个功能包</span><br><span class="line"></span><br><span class="line">rospack list   #列出所有功能包</span><br><span class="line">rospack find 包名   #查找某个功能包是否存在，如果存在返回安装路径</span><br><span class="line">apt search xxx    # 在网上搜索某个功能包</span><br></pre></td></tr></table></figure><h4 id="7-ROS计算图"><a href="#7-ROS计算图" class="headerlink" title="7.ROS计算图"></a>7.ROS计算图</h4><p>rqt_graph能够创建一个显示当前系统运行情况的动态图形</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rqt_graph</span><br></pre></td></tr></table></figure><h4 id="二、话题通信"><a href="#二、话题通信" class="headerlink" title="二、话题通信"></a>二、话题通信</h4><p>话题通信是基于<strong>发布订阅</strong>模式的，也即:一个节点发布消息，另一个节点订阅该消息。</p><p>例如：机器人在执行导航功能，使用的传感器是激光雷达，机器人会采集激光雷达感知到的信息并计算，然后生成运动控制信息驱动机器人底盘运动。</p><p>上述过程涉及多次话题通信：</p><p>（1）以激光雷达信息的采集处理为例，在 ROS 中有一个节点需要时时的<strong>发布</strong>当前雷达采集到的数据，导航模块中也有节点会<strong>订阅</strong>并解析雷达数据；</p><p>（2）再以运动消息的发布为例，导航模块会根据传感器采集的数据时时的计算出运动控制信息并<strong>发布</strong>给底盘，底盘也可以有一个节点<strong>订阅</strong>运动信息并最终转换成控制电机的脉冲信号；</p><p>以此类推，像雷达、摄像头、GPS…. 等等一些传感器数据的采集，也都是使用了话题通信，换言之，话题通信适用于<strong>不断更新的、少逻辑处理的数据传输相</strong>关的应用场景。</p><p>1.C++</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#在订阅者实现中：</span><br><span class="line">ros : : spin( )     # 回调函数：处理订阅的数据</span><br><span class="line"></span><br><span class="line">#发布者需要等待回调函数：</span><br><span class="line">ros : : spinOnce( ) </span><br></pre></td></tr></table></figure><p>2.python实现：（发布最简单的<code>hello</code>信息）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Publisher</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.导包 </span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String    <span class="comment">#发布消息的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#2.初始化 ROS 节点:命名(唯一)</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;talker_p&quot;</span>)      <span class="comment">#直接传入节点名称</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#3.实例化 发布者 对象</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;chatter&quot;</span>,String,queue_size=<span class="number">10</span>)  <span class="comment">#话题名称、消息类型、缓存队列长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#4.组织被发布的数据，并编写逻辑发布数据</span></span><br><span class="line">    msg = String()  <span class="comment">#创建 msg 对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置循环频率</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">1</span>)   <span class="comment"># 1Hz</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():   <span class="comment">#使用rospy中的函数，判断节点没有关闭</span></span><br><span class="line">        msg.data = <span class="string">&quot;hello&quot;</span>   <span class="comment">#定义发布的消息</span></span><br><span class="line">        pub.publish(msg)</span><br><span class="line">        rate.sleep()  <span class="comment">#每隔rate秒醒过来</span></span><br><span class="line">        rospy.loginfo(<span class="string">&quot;发布的数据是:%s&quot;</span>,msg.data）</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编译python文件流程：(以配置好的VS Code为例)          以后所有运行的python程序都要经过这一步</span></span><br><span class="line"><span class="number">1.</span>终端添加可执行权限：chmod  +x  *.py</span><br><span class="line"><span class="number">2.</span>修改CmakeList文件：</span><br><span class="line">    catkin_install_python(PROGRAMS</span><br><span class="line">        scripts/demo_pubpy.py</span><br><span class="line">        DESTINATION $&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span><br><span class="line">         )</span><br><span class="line"><span class="number">3.</span> Ctrl+Shift+B编译</span><br><span class="line"><span class="number">4.</span> roscore+rosrun运行即可</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Subscriber</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.导包 </span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doMsg</span>(<span class="params">msg</span>):</span>  <span class="comment">#定义回调函数</span></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;我订阅的数据：%s&quot;</span>,msg.data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#2.初始化 ROS 节点:命名(唯一)</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;listener_p&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#3.实例化 订阅者 对象</span></span><br><span class="line">    sub = rospy.Subscriber(<span class="string">&quot;chatter&quot;</span>,String, doMsg, queue_size=<span class="number">10</span>)  <span class="comment">#话题名称、消息类型、回调函数、队列长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#4.处理订阅的消息(回调函数)</span></span><br><span class="line">    <span class="comment">#5.设置循环调用回调函数</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><p>3.自定义消息</p><p>ROS 中通过 std_msgs 封装了一些原生的数据类型,比如:String、Int32、Int64、Char、Bool、Empty…. 但是，这些数据一般只包含一个 data 字段—&gt;用于接受消息</p><p>应用场景：传递一些复杂数据时</p><ul><li><strong>流程：</strong></li></ul><p>（1）定义msg文件：功能包下新建 msg 目录，添加文件 Person.msg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string name</span><br><span class="line">uint16 age</span><br><span class="line">float64 height</span><br></pre></td></tr></table></figure><p>（2）编辑配置文件package.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;build_depend&gt;message_generation&lt;/build_depend&gt;   #message_generation</span><br><span class="line">&lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;   #message_runtime</span><br></pre></td></tr></table></figure><p>（3）<strong>CMakeLists.txt</strong>编辑 msg 相关配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 需要加入 message_generation,必须有 std_msgs</span></span><br><span class="line"></span><br><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Person.msg</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行时依赖</span></span><br><span class="line">catkin_package(</span><br><span class="line"><span class="comment">#  INCLUDE_DIRS include</span></span><br><span class="line"><span class="comment">#  LIBRARIES demo02_talker_listener</span></span><br><span class="line">  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime</span><br><span class="line"><span class="comment">#  DEPENDS system_lib</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>python实现发布、订阅自定义消息</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Publisher发布自定义的Person类型消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo02_talker_listener.msg <span class="keyword">import</span> Person  <span class="comment">#自定义的消息类型文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#1.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;talker_person_p&quot;</span>)</span><br><span class="line">    <span class="comment">#2.创建发布者对象</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;chatter_person&quot;</span>,Person,queue_size=<span class="number">10</span>)</span><br><span class="line">    <span class="comment">#3.组织消息  （自定义的Person类型）</span></span><br><span class="line">    p = Person()</span><br><span class="line">    p.name = <span class="string">&quot;葫芦瓦&quot;</span></span><br><span class="line">    p.age = <span class="number">18</span></span><br><span class="line">    p.height = <span class="number">0.75</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#4.编写消息发布逻辑</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        pub.publish(p)  <span class="comment">#发布消息</span></span><br><span class="line">        rate.sleep()  <span class="comment">#休眠</span></span><br><span class="line">        rospy.loginfo(<span class="string">&quot;姓名:%s, 年龄:%d, 身高:%.2f&quot;</span>,p.name, p.age, p.height)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Subscriber订阅自定义的Person类型消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo02_talker_listener.msg <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doPerson</span>(<span class="params">p</span>):</span>  <span class="comment">#定义回调函数</span></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;接收到的人的信息:%s, %d, %.2f&quot;</span>,p.name, p.age, p.height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#1.初始化节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;listener_person_p&quot;</span>)</span><br><span class="line">    <span class="comment">#2.创建订阅者对象</span></span><br><span class="line">    sub = rospy.Subscriber(<span class="string">&quot;chatter_person&quot;</span>,Person, doPerson, queue_size=<span class="number">10</span>)</span><br><span class="line">    rospy.spin() <span class="comment">#4.循环</span></span><br></pre></td></tr></table></figure><h4 id="三、服务通信"><a href="#三、服务通信" class="headerlink" title="三、服务通信"></a>三、服务通信</h4><p>无论是话题还是服务通信，都是以来于<strong>话题</strong>的！</p><p>基于<strong>请求响应</strong>模式，适用于<strong>对时时性有要求、具有一定逻辑处理</strong>的应用场景。</p><p>ROS Master 负责保管 Server 和 Client 注册的信息，并匹配<strong>话题相同</strong>的 Server 与 Client ，帮助 Server 与 Client 建立连接，连接建立后，Client 发送请求信息，Server 返回响应信息。</p><p>对<strong>时序</strong>有严格要求：客户端发起请求时，必须保证服务端已经启动。</p><p>1.自定义服务消息类型srv文件：</p><p>功能包下新建 srv 目录，添加 xxx.srv 文件，内容:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 客户端请求时发送的两个数字</span></span><br><span class="line">int32 num1</span><br><span class="line">int32 num2</span><br><span class="line">---                                                       <span class="comment">#在 srv 文件中请求和响应使用---分割</span></span><br><span class="line"><span class="comment"># 服务器响应发送的数据</span></span><br><span class="line">int32 <span class="built_in">sum</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编辑配置文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#package.xml</span></span><br><span class="line"></span><br><span class="line">  &lt;build_depend&gt;message_generation&lt;/build_depend&gt;</span><br><span class="line">  &lt;exec_depend&gt;message_runtime&lt;/exec_depend&gt;</span><br><span class="line">  &lt;!-- </span><br><span class="line">  exce_depend 以前对应的是 run_depend 现在非法</span><br><span class="line">  --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CMakeList</span></span><br><span class="line"></span><br><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 需要加入 message_generation,必须有 std_msgs</span></span><br><span class="line"></span><br><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  AddInts.srv</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2.Server、Client的python实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Server ： 解析客户端请求，产生响应</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo03_server_client.srv <span class="keyword">import</span> AddInts,AddIntsRequest,AddIntsResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回调函数的参数是请求对象，返回值是响应对象</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doReq</span>(<span class="params">req</span>):</span></span><br><span class="line">    <span class="comment"># 解析提交的数据</span></span><br><span class="line">    <span class="built_in">sum</span> = req.num1 + req.num2</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;提交的数据:num1 = %d, num2 = %d, sum = %d&quot;</span>,req.num1, req.num2, <span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将结果封装进响应</span></span><br><span class="line">    <span class="comment"># 创建响应对象，赋值并返回</span></span><br><span class="line">    <span class="comment"># resp = AddIntsResponse()</span></span><br><span class="line">    <span class="comment"># resp.sum = sum</span></span><br><span class="line">    resp = AddIntsResponse(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">return</span> resp </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;addints_server_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建服务对象</span></span><br><span class="line">    server = rospy.Service(<span class="string">&quot;AddInts&quot;</span>,AddInts,doReq)    <span class="comment">#话题名称，消息类型，回调函数</span></span><br><span class="line">    <span class="comment"># 4.回调函数处理请求并产生响应</span></span><br><span class="line">    <span class="comment"># 5.spin 函数</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Client：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.导包</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> demo03_server_client.srv <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#优化实现</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>:    <span class="comment">#判断动态传入的参数是否为3个</span></span><br><span class="line">        rospy.logerr(<span class="string">&quot;请正确提交参数&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;AddInts_Client_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建Client对象</span></span><br><span class="line">    client = rospy.ServiceProxy(<span class="string">&quot;AddInts&quot;</span>,AddInts)   <span class="comment">#话题名称、消息类型</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 请求前，等待服务已经就绪：防止启动顺序出错（鲁棒性设置）</span></span><br><span class="line">    <span class="comment"># 方式1:</span></span><br><span class="line">     rospy.wait_for_service(<span class="string">&quot;AddInts&quot;</span>)</span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">    client.wait_for_service()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4.发送请求,接收并处理响应</span></span><br><span class="line">    <span class="comment"># 方式1</span></span><br><span class="line">    resp = client(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="comment"># 方式2</span></span><br><span class="line">     resp = client(AddIntsRequest(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="comment"># 方式3</span></span><br><span class="line">    req = AddIntsRequest()</span><br><span class="line">     req.num1 = <span class="number">100</span></span><br><span class="line">     req.num2 = <span class="number">200</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">#优化：可以在执行节点时，动态传入参数</span></span><br><span class="line">    req.num1 = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])    <span class="comment"># sys.argv表示：命令行参数列表</span></span><br><span class="line">    req.num2 = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]) </span><br><span class="line"></span><br><span class="line">    resp = client.call(req)</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;响应结果:%d&quot;</span>,resp.<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h4 id="四、参数服务器"><a href="#四、参数服务器" class="headerlink" title="四、参数服务器"></a>四、参数服务器</h4><p>实现不同节点之间的数据共享，参数服务器相当于是独立于所有节点的一个公共容器，可以将数据存储在该容器中，被不同的节点调用，当然不同的节点也可以往其中存储数据。类似于<strong>全局变量</strong>。</p><p>举例：导航实现时，全局、本地路径规划都要考虑小车自身的尺寸，而小车尺寸就存储在参数服务器中。</p><p>注意:参数服务器使用RPC协议，不是为高性能而设计的，因此最好用于存储静态的非二进制的简单数据</p><p>参数以<strong>键值对</strong>的形式存储在参数服务器中。</p><ul><li><p>参数服务器操作的python实现：</p><p>（1）增、改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#初始化节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;set_update_paramter_p&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置各种类型参数</span></span><br><span class="line">    rospy.set_param(<span class="string">&quot;p_int&quot;</span>,<span class="number">10</span>)   <span class="comment">#键、值</span></span><br><span class="line">    rospy.set_param(<span class="string">&quot;p_double&quot;</span>,<span class="number">3.14</span>)</span><br><span class="line">    rospy.set_param(<span class="string">&quot;p_bool&quot;</span>,<span class="literal">True</span>)</span><br><span class="line">    rospy.set_param(<span class="string">&quot;p_string&quot;</span>,<span class="string">&quot;hello python&quot;</span>)</span><br><span class="line">    rospy.set_param(<span class="string">&quot;p_list&quot;</span>,[<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;haha&quot;</span>,<span class="string">&quot;xixi&quot;</span>])</span><br><span class="line">    rospy.set_param(<span class="string">&quot;p_dict&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;hulu&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">8</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改</span></span><br><span class="line">    rospy.set_param(<span class="string">&quot;p_int&quot;</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>（2）查询参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;get_param_p&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取参数: get_param</span></span><br><span class="line">    int_value = rospy.get_param(<span class="string">&quot;p_int&quot;</span>,<span class="number">10000</span>)</span><br><span class="line">    double_value = rospy.get_param(<span class="string">&quot;p_double&quot;</span>)</span><br><span class="line">    bool_value = rospy.get_param(<span class="string">&quot;p_bool&quot;</span>)</span><br><span class="line">    string_value = rospy.get_param(<span class="string">&quot;p_string&quot;</span>)</span><br><span class="line">    p_list = rospy.get_param(<span class="string">&quot;p_list&quot;</span>)</span><br><span class="line">    p_dict = rospy.get_param(<span class="string">&quot;p_dict&quot;</span>)</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;获取的数据:%d,%.2f,%d,%s&quot;</span>,</span><br><span class="line">                int_value,</span><br><span class="line">                double_value,</span><br><span class="line">                bool_value,</span><br><span class="line">                string_value)</span><br><span class="line">    <span class="keyword">for</span> ele <span class="keyword">in</span> p_list:</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;ele = %s&quot;</span>, ele)</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;name = %s, age = %d&quot;</span>,p_dict[<span class="string">&quot;name&quot;</span>],p_dict[<span class="string">&quot;age&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get_param_cached（效率比get_param高）</span></span><br><span class="line">    int_cached = rospy.get_param_cached(<span class="string">&quot;p_int&quot;</span>)</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;缓存数据:%d&quot;</span>,int_cached)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get_param_names</span></span><br><span class="line">    names = rospy.get_param_names()</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;name = %s&quot;</span>,name)</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;-&quot;</span>*<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断某个键是否存在：has_param</span></span><br><span class="line">    flag = rospy.has_param(<span class="string">&quot;p_int&quot;</span>)</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;包含p_int吗？%d&quot;</span>,flag)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断键是否存在，存在则返回键名：search_param</span></span><br><span class="line">    key = rospy.search_param(<span class="string">&quot;p_int&quot;</span>)</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;搜索的键 = %s&quot;</span>,key)</span><br></pre></td></tr></table></figure><p>（3）删除参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># delete_param</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;delete_param_p&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        rospy.delete_param(<span class="string">&quot;p_int&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;删除失败&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="五、常用命令"><a href="#五、常用命令" class="headerlink" title="五、常用命令"></a>五、常用命令</h4><p>以下介绍的命令都可以<strong>直接在命令行中实现</strong>，不需要创建节点；但缺点是<strong>不能包含太复杂的逻辑</strong>，只能做一些简单的实现（比如往参数服务器里添加参数、rostopic pub发布简单的话题）</p><p>1.rosnode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rosnode ping  xxx   <span class="comment">#测试到节点的连接状态</span></span><br><span class="line">rosnode <span class="built_in">list</span>    <span class="comment">#列出活动节点</span></span><br><span class="line">rosnode info  xxx    <span class="comment">#打印节点信息</span></span><br><span class="line">rosnode machine    <span class="comment">#列出指定设备上节点</span></span><br><span class="line">rosnode kill  xxx    <span class="comment">#杀死某个节点</span></span><br><span class="line">rosnode cleanup     <span class="comment">#清除不可连接的节点</span></span><br></pre></td></tr></table></figure><p>2.rostopic</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rostopic <span class="built_in">list</span>   <span class="comment">#显示所有活动状态下的主题</span></span><br><span class="line">rostopic echo   <span class="comment">#打印话题消息到屏幕  rostopic  echo  /turtle1/cmd_vel</span></span><br><span class="line">rostopic pub    <span class="comment">#将数据发布到主题</span></span><br><span class="line">rostopic bw     <span class="comment">#显示主题使用的带宽</span></span><br><span class="line">rostopic delay  <span class="comment">#显示带有 header 的主题延迟</span></span><br><span class="line">rostopic find   <span class="comment">#根据类型查找主题</span></span><br><span class="line">rostopic hz     <span class="comment">#显示主题的发布频率</span></span><br><span class="line">rostopic info   <span class="comment">#显示主题相关信息</span></span><br><span class="line">rostopic <span class="built_in">type</span>   <span class="comment">#打印主题类型</span></span><br></pre></td></tr></table></figure><p>3.rosmsg</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show   <span class="comment"># 显示消息描述</span></span><br><span class="line">rosmsg info    <span class="comment">#显示消息信息</span></span><br><span class="line">rosmsg <span class="built_in">list</span>    <span class="comment">#列出所有消息</span></span><br><span class="line">rosmsg md5    <span class="comment">#显示 md5 加密后的消息</span></span><br><span class="line">rosmsg package    <span class="comment">#显示某个功能包下的所有消息</span></span><br><span class="line">rosmsg packages    <span class="comment">#列出包含消息的功能包</span></span><br></pre></td></tr></table></figure><p>4.rosservice</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rosservice args  <span class="comment">#打印服务参数</span></span><br><span class="line">rosservice call    <span class="comment">#使用提供的参数调用服务</span></span><br><span class="line">rosservice find    <span class="comment">#按照服务类型查找服务</span></span><br><span class="line">rosservice info    <span class="comment">#打印有关服务的信息</span></span><br><span class="line">rosservice <span class="built_in">list</span>     <span class="comment">#列出所有活动的服务</span></span><br><span class="line">rosservice <span class="built_in">type</span>    <span class="comment">#打印服务类型</span></span><br><span class="line">rosservice uri     <span class="comment">#打印服务的 ROSRPC uri</span></span><br></pre></td></tr></table></figure><p>5.rossrv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rossrv show    <span class="comment">#显示服务消息详情</span></span><br><span class="line">rossrv info    <span class="comment">#显示服务消息相关信息</span></span><br><span class="line">rossrv <span class="built_in">list</span>    <span class="comment">#列出所有服务信息</span></span><br><span class="line">rossrv md5    <span class="comment">#显示 md5 加密后的服务消息</span></span><br><span class="line">rossrv package    <span class="comment">#显示某个包下所有服务消息</span></span><br><span class="line">rossrv packages    <span class="comment">#显示包含服务消息的所有包</span></span><br></pre></td></tr></table></figure><p>6.rosparam</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rosparam <span class="built_in">set</span>    <span class="comment">#设置参数  rosparam set name xiaohuang</span></span><br><span class="line">rosparam get    <span class="comment">#获取参数</span></span><br><span class="line">rosparam load    <span class="comment">#从外部文件加载参数  ---&gt;反序列化</span></span><br><span class="line">rosparam dump    <span class="comment">#将参数写出到外部文件(yaml文件) ---&gt;序列化</span></span><br><span class="line">rosparam delete    <span class="comment">#删除参数</span></span><br><span class="line">rosparam <span class="built_in">list</span>    <span class="comment">#列出所有参数</span></span><br></pre></td></tr></table></figure><h4 id="六、实操"><a href="#六、实操" class="headerlink" title="六、实操"></a>六、实操</h4><p>1.乌龟<strong>控制节点</strong>实操举例：</p><ul><li>自己编写乌龟控制节点，实现乌龟的圆周运动。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rqt_graph   <span class="comment">#通过计算图查看话题名称</span></span><br><span class="line">rostopic <span class="built_in">type</span> /turtle1/cmd_vel  <span class="comment">#查看话题信息，获知消息类型为geometry_msgs/Twist</span></span><br><span class="line">rosmsg info geometry_msgs/Twist  <span class="comment">#查看消息格式</span></span><br></pre></td></tr></table></figure><p>消息格式：</p><p>geometry_msgs/Vector3 linear<br>  float64 x<br>  float64 y<br>  float64 z<br>geometry_msgs/Vector3 angular<br>  float64 x<br>  float64 y<br>  float64 z</p><p>linear线速度，xyz分别对应在x、y和z方向上的速度(单位是 m/s)；</p><p>angular角速度，xyz分别对应x轴上的<strong>翻滚</strong>、y轴上<strong>俯仰</strong>和z轴上<strong>偏航</strong>的速度(单位是rad/s)</p><p>偏航、翻滚与俯仰（RPY）：</p><img src="/images/image-20210414142557153.png" alt="image-20210414142557153" style="zoom:50%;"><ul><li>实现控制节点（话题发布节点）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">##将控制乌龟做圆周运动</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">#1.获取topic(已知: /turtle1/cmd_vel)</span></span><br><span class="line">  <span class="comment">#2.获取消息类型(已知: geometry_msgs/Twist)</span></span><br><span class="line">  <span class="comment">#3.运行前，注意先启动 turtlesim_node 节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Twist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;control_circle_p&quot;</span>)</span><br><span class="line">    <span class="comment"># 3.创建发布者对象</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;/turtle1/cmd_vel&quot;</span>,Twist,queue_size=<span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># 4.循环发布运动控制消息</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>)</span><br><span class="line">    msg = Twist()</span><br><span class="line">    msg.linear.x = <span class="number">1.0</span>    <span class="comment">#不能横着走</span></span><br><span class="line">    msg.linear.y = <span class="number">0.0</span></span><br><span class="line">    msg.linear.z = <span class="number">0.0</span></span><br><span class="line">    msg.angular.x = <span class="number">0.0</span></span><br><span class="line">    msg.angular.y = <span class="number">0.0</span></span><br><span class="line">    msg.angular.z = <span class="number">0.5</span>   <span class="comment">#只能偏航        </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        pub.publish(msg)</span><br><span class="line">        rate.sleep()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自定义的节点编写好之后：</span></span><br><span class="line"><span class="comment">#三个终端中：</span></span><br><span class="line">roscore</span><br><span class="line">rosrun  turtlesim  turtlesim_node  </span><br><span class="line">rosrun  &lt;自定义的功能包&gt;  &lt;编写的节点文件名&gt;</span><br></pre></td></tr></table></figure><p>2.乌龟<strong>位姿信息订阅</strong>节点实操</p><p>已知turtlesim_node的位姿消息类型为：turtlesim/Pose</p><p>float32 x<br>float32 y<br>float32 theta<br>float32 linear_velocity<br>float32 angular_velocity</p><p>位姿信息订阅节点的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#1.获取话题名称 /turtle1/pose</span></span><br><span class="line"> <span class="comment">#2.获取消息类型 turtlesim/Pose</span></span><br><span class="line"> <span class="comment">#3.运行前启动 turtlesim_node 与 turtle_teleop_key 节点</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> turtlesim.msg <span class="keyword">import</span> Pose</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doPose</span>(<span class="params">data</span>):</span></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;乌龟坐标:x=%.2f, y=%.2f,theta=%.2f&quot;</span>,data.x,data.y,data.theta)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.初始化 ROS 节点</span></span><br><span class="line">    rospy.init_node(<span class="string">&quot;sub_pose_p&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.创建订阅者对象</span></span><br><span class="line">    sub = rospy.Subscriber(<span class="string">&quot;/turtle1/pose&quot;</span>,Pose,doPose,queue_size=<span class="number">1000</span>)</span><br><span class="line">    <span class="comment">#     4.回调函数处理订阅的数据</span></span><br><span class="line">    <span class="comment">#     5.spin</span></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><p>3.（服务通信）指定位置添加turtle的<strong>服务端请求</strong>实现：</p><p>服务也是基于话题的，所以首先是查看话题的消息类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新增乌龟的话题是/spawn</span></span><br><span class="line">rosservice <span class="built_in">type</span> /spawn  <span class="comment">#获取消息类型为turtlesim/Spawn</span></span><br><span class="line">rossrv info turtlesim/Spawn  <span class="comment">#获取消息格式</span></span><br></pre></td></tr></table></figure><p>节点的实现大同小异，略</p><p>4.（参数服务器）参数设置</p><p>可通过launch文件传参，后面再介绍。</p><h4 id="七、常用API（python实现）"><a href="#七、常用API（python实现）" class="headerlink" title="七、常用API（python实现）"></a>七、常用API（python实现）</h4><p>1.节点初始化</p><p>重点在于anonymous参数的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rospy.init_node(<span class="string">&quot;happy_node&quot;</span>, anonymous=<span class="literal">True</span>)    <span class="comment">#anonymous = true 时，为节点名称后缀随机编号</span></span><br><span class="line">                                                                                                             <span class="comment">#这样就可重复启动节点了！</span></span><br></pre></td></tr></table></figure><p>2.话题与服务相关对象</p><p>Publisher、Subscriber、Server、Client的创建，publish操作等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#需要就查</span></span><br></pre></td></tr></table></figure><p>3.回调函数</p><p>相比C++，没有spinOnce( )函数，只有spin( )函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospy.spin( )</span><br></pre></td></tr></table></figure><p>4.时间</p><p>（1）获取、设置时刻</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前时刻</span></span><br><span class="line">right_now = rospy.Time.now()  <span class="comment">#rospy中有Time库，获取的是相对于1970年1月1日的时间</span></span><br><span class="line">rospy.loginfo(<span class="string">&quot;当前时刻:%.2f&quot;</span>,right_now.to_sec())  <span class="comment">#设置输出日志log</span></span><br><span class="line">rospy.loginfo(<span class="string">&quot;当前时刻:%.2f&quot;</span>,right_now.to_nsec())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义时刻</span></span><br><span class="line">some_time1 = rospy.Time(<span class="number">1234.567891011</span>)  <span class="comment">#some_time1是从1970.1.1的0时0分0秒开始往后1234.567891011秒</span></span><br><span class="line">some_time2 = rospy.Time(<span class="number">1234</span>,<span class="number">567891011</span>)</span><br><span class="line">rospy.loginfo(<span class="string">&quot;设置时刻1:%.2f&quot;</span>,some_time1.to_sec())</span><br><span class="line">rospy.loginfo(<span class="string">&quot;设置时刻2:%.2f&quot;</span>,some_time2.to_sec())</span><br></pre></td></tr></table></figure><p>（2）持续时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">du = rospy.Duration(<span class="number">3.3</span>)</span><br><span class="line"></span><br><span class="line">rospy.loginfo(<span class="string">&quot;du1 持续时间:%.2f&quot;</span>,du.to_sec())</span><br><span class="line">rospy.sleep(du) <span class="comment">#休眠函数</span></span><br><span class="line">rospy.loginfo(<span class="string">&quot;持续时间测试结束.....&quot;</span>)</span><br></pre></td></tr></table></figure><p>（3）持续时间与时刻的运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">now = rospy.Time.now()</span><br><span class="line">du1 = rospy.Duration(<span class="number">10</span>)</span><br><span class="line">du2 = rospy.Duration(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运算</span></span><br><span class="line">before_now = now - du1</span><br><span class="line">after_now = now + du1</span><br><span class="line">dd = du1 + du2</span><br><span class="line"><span class="comment"># now = now + now  #非法</span></span><br><span class="line">rospy.loginfo(<span class="string">&quot;之前时刻:%.2f&quot;</span>,before_now.to_sec())</span><br><span class="line">rospy.loginfo(<span class="string">&quot;之后时刻:%.2f&quot;</span>,after_now.to_sec())</span><br><span class="line">rospy.loginfo(<span class="string">&quot;持续时间相加:%.2f&quot;</span>,dd.to_sec())</span><br></pre></td></tr></table></figure><p><strong>（4）设置运行频率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过rate.sleep( )实现，隔某段时间执行某种操作</span></span><br><span class="line"></span><br><span class="line">rate = rospy.Rate(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">    rate.sleep() <span class="comment">#休眠</span></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;+++++++++++++++&quot;</span>)</span><br></pre></td></tr></table></figure><p>（5）定时器，类似于rospy.Rate的功能：<strong>隔某段时间执行某种操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rospy.Timer(rospy.Duration(<span class="number">1</span>),doMsg)   <span class="comment">#每隔1s，执行回调函数doMsg</span></span><br><span class="line">rospy.spin()</span><br><span class="line"></span><br><span class="line">rospy.Timer(rospy.Duration(<span class="number">1</span>),doMsg,<span class="literal">True</span>)  <span class="comment"># 只执行一次</span></span><br><span class="line">rospy.spin()</span><br></pre></td></tr></table></figure><p>（6）节点判断与关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#节点状态判断</span></span><br><span class="line">rospy.is_shutdown()</span><br><span class="line"></span><br><span class="line"><span class="comment">#节点关闭函数</span></span><br><span class="line">rospy.signal_shutdown(<span class="string">&quot;不想用了&quot;</span>)  <span class="comment">#传参是字符串，说明关闭原因</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭节点，同时执行回调函数</span></span><br><span class="line">rospy.on_shutdown(doMsg)</span><br></pre></td></tr></table></figure><p><strong>（7）日志函数</strong>：相当于实时打印一些提示信息</p><p>日志相关的函数也是极其常用的，在ROS中日志被划分成如下级别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rospy.logdebug(<span class="string">&quot;hello,debug&quot;</span>)  <span class="comment">#不会输出到控制台，调试时常用</span></span><br><span class="line">rospy.loginfo(<span class="string">&quot;hello,info&quot;</span>)  <span class="comment">#标准消息，默认白色字体</span></span><br><span class="line">rospy.logwarn(<span class="string">&quot;hello,warn&quot;</span>)  <span class="comment">#提醒一些异常情况，默认黄色字体</span></span><br><span class="line">rospy.logerr(<span class="string">&quot;hello,error&quot;</span>)  <span class="comment">#提示错误信息，默认红色字体</span></span><br><span class="line">rospy.logfatal(<span class="string">&quot;hello,fatal&quot;</span>) <span class="comment">#此类错误将阻止节点继续运行，默认红色字体</span></span><br></pre></td></tr></table></figure><p><strong>5.python模块导入</strong></p><p>先编写自定义模块文件（相当于C++头文件）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tools.py文件</span></span><br><span class="line"></span><br><span class="line">num=<span class="number">1000</span></span><br></pre></td></tr></table></figure><p>另一个python文件中调用模块A：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tools</span><br><span class="line">rospy.loginfo(<span class="string">&quot;num = %d&quot;</span>,tools.num)</span><br></pre></td></tr></table></figure><p>如果直接import新写的模块，会报错</p><p>原因：rosrun执行时，参考路径是workspace的路径，在workspace下无法查找到依赖的模块</p><p>解决：先声明环境变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment">#为了增加代码的可移植性，用os自动获取当前路径的前一级</span></span><br><span class="line">path = os.path.abspath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, path + <span class="string">&quot;/src/plumbing_pub_sub/scripts&quot;</span>)  <span class="comment">#将模块文件所在路径添加到sys.path中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools    </span><br><span class="line">rospy.loginfo(<span class="string">&quot;num = %d&quot;</span>,tools.num)  </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ROS学习笔记：古月居入门21讲</title>
    <link href="/2021/04/12/ROS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8F%A4%E6%9C%88%E5%B1%85%E5%85%A5%E9%97%A821%E8%AE%B2/"/>
    <url>/2021/04/12/ROS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%9A%E5%8F%A4%E6%9C%88%E5%B1%85%E5%85%A5%E9%97%A821%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<p>本文记录<strong>热度最高</strong>的ROS入门教程——古月居入门21讲学习笔记，该教程确实非常基础，学完只能了解ROS的基本概念，要想完成项目开发，还需要很多更深入的学习与实战。</p><span id="more"></span><h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><p>1.节点Node：如上层的图像处理（python）、底层的设备驱动（C）</p><p>2.节点管理器ROS Master：节点需要找ros master进行注册（registration）</p><img src="/images/image-20210402080956710.png" alt="image-20210402080956710" style="zoom: 67%;"><p>Camera将data传给图像处理节点，处理完后又将data传给远端的图像显示节点（<strong>上位机</strong>），这些传输都由ROS Master协助完成</p><p>3.节点之间的通信方式：</p><p>（1）话题Topic：node分为publisher、subscriber</p><p>​                            消息Message：data的数据结构</p><p>（2）服务Service：node分为server、client</p><p>4.参数：全局共享字典</p><p>5.文件系统:</p><img src="/images/image-20210402081825526.png" alt="image-20210402081825526" style="zoom:50%;"><h3 id="二、ROS命令行基础"><a href="#二、ROS命令行基础" class="headerlink" title="二、ROS命令行基础"></a>二、ROS命令行基础</h3><p>1.常用命令</p><img src="/images/image-20210402162010648.png" alt="image-20210402162010648" style="zoom:50%;"><ol start="2"><li><p>roscore 启动</p><p>rosrun *** 启动节点</p><p>rqt_gragh 基于qt平台的节点关系可视化</p><p>rosnode 显示所有可使用的rosnode命令   如rosnode list显示所有节点信息</p><p>rostopic 显示所有可使用的rostopic命令    如rostopic pub *** ***发布话题内容</p><p>rosmsg show *** 查看消息内容（即话题的数据结构）</p><p>rosservice list 查看所有服务（海龟窗口是服务器，我们的计算机是客户，对其发送请求）</p><p>rosbag record -a *** 保存ros系统的所有数据</p></li><li><p>创建工作空间（<strong>workspace</strong>）与功能包（）</p><p>（1）workspace相当于编程中的一个project，包括四个子空间：</p><img src="/images/image-20210402163435233.png" alt="image-20210402163435233" style="zoom:50%;"><p>（2）workspace创建方法:</p><img src="/images/image-20210402163628877.png" alt="image-20210402163628877" style="zoom: 67%;"><p>其中install空间需要自己添加：catkin_make install</p><p>（3）功能包创建方法:</p><p>​        在workspace中的src文件夹下进行创建</p><img src="/images/image-20210402164016861.png" alt="image-20210402164016861" style="zoom:50%;"><p><strong>catkin_create_pkg</strong>  <name>  依赖包 依赖包 </name></p></li></ol><h3 id="三、基本Topic模型的编程实现"><a href="#三、基本Topic模型的编程实现" class="headerlink" title="三、基本Topic模型的编程实现"></a>三、基本Topic模型的编程实现</h3><p>（以海龟运动为例）</p><ol><li><p>发布者Publisher编程实现：（C++）</p><p>（1）在功能包下的src文件夹下创建cpp文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch xxx.cpp</span><br><span class="line">sudo gedit xxx.cpp</span><br></pre></td></tr></table></figure><p>（2）文件中内容：</p><img src="/images/image-20210402170454195.png" alt="image-20210402170454195" style="zoom:67%;"><p>（3）流程：</p><img src="/images/image-20210402170612567.png" alt="image-20210402170612567" style="zoom:67%;"><p>创建Publisher，即向ROS Master注册节点信息，需要指定Topic名称和message信息</p><p>while循环内部：创建message数据、按照一定频率循环发布消息</p><p>（4）配置Cmake文件中的代码编译：</p><p>在功能包中CMakeLlist.txt中添加两行内容</p><img src="/images/image-20210402171124849.png" alt="image-20210402171124849" style="zoom:50%;"></li><li><p>Publisher的 Python实现：</p></li></ol><img src="/images/image-20210402171918479.png" alt="image-20210402171918479" style="zoom:67%;"><p>​        python是脚本语言，不需要在CMakeList中进行编译，<strong>直接rosrun运行.py文件即可</strong></p><p>Tips1：</p><p>通常编译后需要添加环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source devel&#x2F;setup.bash</span><br></pre></td></tr></table></figure><p>为了避免每一次编译后都更新环境变量，可以将上述语句直接添加到系统环境变量中，一劳永逸：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在&#x2F;home目录下 Ctrl+h 显示隐藏文件</span><br><span class="line">打开.barshc文件</span><br><span class="line">在文件末尾添加上述语句 ”source xxx(绝对路径)“ </span><br><span class="line">保存退出即可</span><br></pre></td></tr></table></figure><p>3.Subscriber的python实现：</p><p><img src="/images/image-20210403091717518.png" alt="image-20210403091717518"></p><p>4.自定义话题消息：</p><p>上述publisher中的Twist消息、subscriber中的Pose消息，都是ROS中已经定义好的message，直接用即可</p><p>如果ROS中现成的消息不满足需求，则需要自己定义话题消息</p><img src="/images/image-20210403092312179.png" alt="image-20210403092312179" style="zoom:50%;"><p>（1）首先写.msg文件，其中语法不是C++或者python，而是在编译时自适应；消息的定义就是在.msg文件中实现</p><p>（2）package.xml中固定添加上述两行</p><p>（3）重点难点是.msg文件的编译</p><p>（4）消息定义好后，看看在此消息基础上的话题模型：</p><img src="/images/image-20210403094303816.png" alt="image-20210403094303816" style="zoom:67%;"><p>​        publisher：之前的.msg文件编译后生成了Person头文件，所以可以import Person；可以看到，消息类型使用了自定义的Person</p><img src="/images/image-20210403094414267.png" alt="image-20210403094414267" style="zoom:67%;"><p>​        subscriber：订阅的topic与上面一致，消息类型也是使用自定义的Person</p><h3 id="四、基本Service模型的编程实现"><a href="#四、基本Service模型的编程实现" class="headerlink" title="四、基本Service模型的编程实现"></a>四、基本Service模型的编程实现</h3><p>1.Client</p><p><img src="/images/image-20210403095623267.png" alt="image-20210403095623267"></p><p>2.Server</p><p><img src="/images/image-20210403100135793.png" alt="image-20210403100135793"></p><p>3.服务数据的定义</p><img src="/images/image-20210403100745236.png" alt="image-20210403100745236" style="zoom:67%;"><p>创建.srv文件，上面是request，下面是response</p><p>Tip2：</p><p>ros master中有参数共享器，所以每次运行新的程序之前最好重启roscore：Ctrl+c退出roscore，再重新roscore</p><p>Tip3：</p><p>话题模型中，publisher和subscriber建立连接后，不再需要roscore；roscore的作用相当于“婚介所”</p><h3 id="五、参数使用与编程"><a href="#五、参数使用与编程" class="headerlink" title="五、参数使用与编程"></a>五、参数使用与编程</h3><p>1.参数模型</p><img src="/images/image-20210403102415841.png" alt="image-20210403102415841" style="zoom:50%;"><p>2.命令行</p><img src="/images/image-20210403102822696.png" alt="image-20210403102822696" style="zoom:67%;"><p>3.参数设置python实现:</p><p><img src="/images/image-20210403103225844.png" alt="image-20210403103225844"></p><p>get获取、set设置，创建client端请求service修改</p><h3 id="六、ROS中的坐标管理系统"><a href="#六、ROS中的坐标管理系统" class="headerlink" title="六、ROS中的坐标管理系统"></a>六、ROS中的坐标管理系统</h3><p>1.初识</p><p>机器人中的坐标变换</p><p>一个机器人身上有多种坐标系，如机器人上<strong>摄像头有坐标系</strong>，机器人<strong>底盘亦有坐标系</strong>；如果用原始办法计算二者之间的坐标关系，可能需要几十次的矩阵运算</p><img src="/images/image-20210403103841705.png" alt="image-20210403103841705" style="zoom:67%;"><p>变换矩阵：平移变换、旋转变换</p><p>2.ROS中的 <strong>tf功能包</strong>（<strong>transform</strong>）</p><p>重要用途：<strong>管理所有坐标系</strong>；通过查询的方式就可以轻松找到两个坐标系之间的关系</p><p>实现方式：广播与监听机制；只要启动ros master和 tf， 就会在后台维护一个<strong>tf tree</strong>，所有坐标系都保存在树的节点上</p><p>3.举例</p><p>激光雷达与机器人</p><img src="/images/image-20210403104844895.png" alt="image-20210403104844895" style="zoom:67%;"><p>移动机器人搭载激光雷达获取物体的“深度”信息，但是我们关心的是小车底盘到物体的举例，所以由激光雷达检测到的距离需要经过一个坐标变换</p><p>4.tf坐标系广播与监听的编程实现</p><p>（1）实现 tf广播器（Broadcaster）：</p><p>（2）实现tf监听器（Listener）：</p><p><img src="/images/image-20210403111805593.png" alt="image-20210403111805593"></p><p>广播器实时subscribe订阅海龟的位置信息，并TF坐标变换信息广播出去</p><h3 id="七、Launch启动文件"><a href="#七、Launch启动文件" class="headerlink" title="七、Launch启动文件"></a>七、Launch启动文件</h3><p>1.初识</p><img src="/images/image-20210403112318960.png" alt="image-20210403112318960" style="zoom:67%;"><p>实现多节点的配置和启动，不需要再使用多个终端进行不同节点的启动；一个复杂机器人系统中的节点非常繁多，所以不可能都用终端来启动</p><p>2.Launch文件常用语法</p><img src="/images/image-20210403112620983.png" alt="image-20210403112620983" style="zoom:67%;"><p>在一个话题中节点名字不能重复，因此采用“重映射”使相同功能包使用不同的节点名字，在Launch中用<strong>name参数</strong>实现</p><p><img src="/images/image-20210403112941517.png" alt="image-20210403112941517"></p><p>param指定存在ros master内部的参数；arg指定仅存在Launch文件中的参数，可以作为函数的参数使用</p><p><img src="/images/image-20210403113151035.png" alt="image-20210403113151035"></p><p>3.后续学习时，尤其是和真实机器人做结合时，Launch文件的使用非常频繁</p><p>在做ROS中已有资源的整合时，尤其是将导航、SLAM的一些功能（ROS中都已有这些功能）与机器人做结合，基本上不用写太多代码，基本上都是在改各种Launch文件；Launch文件相当于是我们搭积木的平台，通过Launch文件中节点的运行、接口的变化和配置，最终可以将功能很快的实现</p><h3 id="八、ROS常用可视化工具"><a href="#八、ROS常用可视化工具" class="headerlink" title="八、ROS常用可视化工具"></a>八、ROS常用可视化工具</h3><p>1.QT工具箱</p><p>综合性工具， 可作为开发机器人的上位机</p><p>2.Rviz</p><p>数据显示平台——必须有实际的数据</p><p><img src="/images/image-20210403144643000.png" alt="image-20210403144643000"></p><p><img src="/images/image-20210403144906971.png" alt="image-20210403144906971"></p><p>在rviz中添加image，可以选择话题，实时显示摄像头拍摄内容</p><p>3.Gazebo</p><p>三维物理仿真平台——不需要真实数据</p><h3 id="九、ROS进阶"><a href="#九、ROS进阶" class="headerlink" title="九、ROS进阶"></a>九、ROS进阶</h3><p>1.ros_control + gazebo 进行机器人控制与仿真，继承了PID等控制算法，可以让小车搭载GPS、雷达、IMU等进行障碍物仿真；没有实物也可进行仿真；也可模拟小车搭载摄像头，将摄像头拍摄的内容在rviz中进行显示（如下图）</p><img src="/images/image-20210403145938507.png" alt="image-20210403145938507" style="zoom:50%;"><p>在仿真环境中学习机器人相关理论、验证相关的算法</p><p>wiki.ros.org/ros_control</p><p>2.移动机器人</p><p>SLAM建图与导航 主流算法：gmapping、hector</p><p><img src="/images/image-20210403150428016.png" alt="image-20210403150428016"></p><p>（1）深度信息：雷达、相机（单目/双目）、RGBD相机</p><p>（2）IMU信息（三轴姿态角及加速度）：陀螺仪、加速计</p><p>（3）里程计信息：编码器上的累计信息</p><p>算法功能集成得很好，只要将ROS提供的功能包与机器人结合，可能不需要自己写一行代码就能让机器人跑起来，但是会遇到很多问题，因为这些算法不一定能完全适配你的硬件平台：如建图精度不够、导航上避障效果不好。</p><p>所以除了会使用ROS外，还要深入了解其功能包内部的实现原理。即用ROS可以很快地实现原型，但是要深入地了解自己研究方向的算法原理，例如研究SLAM，要知道gmapping、hector内部的实现机理，甚至对代码做优化</p><p>3.机械臂</p><p>机械臂运动规划、避障、抓取等</p><p>ROS中moveit框架可以完成</p><p>总结：若未来研究机器人，研究ROS中很多功能包，这些功能包内的具体算法用到了“机器人学”的基本理论</p>]]></content>
    
    
    <categories>
      
      <category>ROS</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>神经网络：Faster R-CNN详解（二）</title>
    <link href="/2021/04/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9AFaster-R-CNN%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/04/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9AFaster-R-CNN%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本节介绍Conv Layers和RPN网络</p><p>在原论文中，作者多次强调了RPN的重要性。R-CNN和Fast R-CNN都是selective search花费大量时间，而RPN实现了由CNN自己做区域建议，效率奇高。</p><span id="more"></span><h3 id="三、Faster-R-CNN"><a href="#三、Faster-R-CNN" class="headerlink" title="三、Faster R-CNN"></a>三、Faster R-CNN</h3><p>相比于Fast R-CNN，它的进步在于区域建议网络：RPN</p><p>1.Faster R-CNN将特征提取、区域建议、bbox回归、分类都整合在一个网络中，也即输入一张图像后所有操作都在CNN中完成，因此它是真正意义上实现了<strong>“end-to-end”</strong>！</p><p>2.整体框架：</p><img src="/images/image-20210411154919630.png" alt="image-20210411154919630" style="zoom:50%;"><p>（1）Conv layers，完成特征提取，后续的操作都在feature map上进行，所以具有“特征共享”的特点；通常使用VGG16、Resnet等；</p><p>（2）Region Proposal Networks (RPN)：生成候选区域，通过FC层 (Softmax)判断anchors属于positive或者negative，再利用bbox regression修正anchors获得精确的proposals；</p><p>（3）Roi Pooling：收集输入的feature maps和proposals，综合这些信息后提取<strong>proposal feature maps</strong>，送入后续全连接层判定目标类别；</p><p>（4）Classification：利用proposal feature maps计算proposal的类别，同时再次bounding box regression获得检测框最终的精确位置。</p><p>3.Conv layers:</p><p>实际代码操作中，采用了一个小<strong>trick</strong>：通过padding使得所有卷积层的结果不改变长度和宽度，而所有pooling层都将长宽减半，因此最终输出的长宽为原始图像的1/16倍。这样，Conv layers生成的feature map中都可以和原图对应起来！</p><p><strong>4.RPN:</strong></p><img src="/images/v2-1908feeaba591d28bee3c4a754cca282_r.jpg" alt="preview" style="zoom:67%;"><ul><li>feature map中每个点上有k个anchor，每个anhcor要分positive和negative；</li><li>如果k=9，则总共有20000+anchors，所以全部anchors拿去训练太多了，训练程序会在合适的anchors中<strong>随机</strong>选取128个postive anchors+128个negative anchors进行训练；</li><li>流程：生成anchors -&gt; softmax分类器提取positvie anchors -&gt; bbox reg回归positive anchors -&gt; Proposal Layer生成proposals</li></ul><p><strong>（1）softmax判定positive与negative：（W×H×2k）</strong></p><p>现讨论如何对每个anchors分positive和negative：</p><p>其实RPN最终就是在原图尺度上，设置了密密麻麻的候选Anchor。然后用cnn去判断哪些Anchor是里面有目标的positive anchor，哪些是没目标的negative anchor。所以，仅仅是个二分类而已！</p><img src="/images/image-20210411163229689.png" alt="image-20210411163229689" style="zoom:67%;"><p>（流程：3×3卷积 → 1×1卷积 →Softmax）</p><p><strong>疑问</strong>：3×3卷积是在feature map上进行的，每个点就一次，得到1×1×256向量，这是<strong>怎么牵扯到9个anchors的？</strong>很多人都会在初次学习时产生这个疑问！ 我在阅读了数十条博文大神的评论之后终于看到一种合理的解释：</p><p>这里的3x3卷积输出256dfeature map, 卷积后(c,w,h)均未改变，这里的3x3卷积只是在进一步提取特征，与后面两路1x1卷积相配合，共同输出对foreground/background和anchor_pred的预测值，真正体现Anchor数量 和其在map中的维度的地方是两路1×1卷积后的输出。</p><p>特征图的每个像素位置都能看成一个向量 [1，channels]（卷积基本原理：这个像素可不简单，它代表的是高级语义，其信息量远不只一个像素那么简单，而是包含有周边好几大圈的信息）。<strong>所以这个向量 [1，channels]是能代表一个位置上的9个anchors的</strong>，理解这一点后就好办了，利用1x1卷积分别将通道数压缩到2x9（代表分类）以及4x9（代表坐标回归值）建立一种抽象的映射（这其实和全连接是一个道理的都是建立映射的过程嘛）。所以就可以通过损失函数来指导RPN的训练啦。</p><p>经过softmax分类后，就可以提取出<strong>positive anchors</strong>了。</p><ul><li>解释一下这里的18维：</li></ul><p>​      前9维对应9个anchor属于foreground的概率，后9维对应9个anchor属于background的概率；这里面最大概率的那个就决定是foreground还是background，也决定了是属于9个anchors里面的哪一个</p><p><strong>（2）对Proposals进行bbox regression：（W×H×4k）</strong></p><img src="/images/image-20210411172715373.png" alt="image-20210411172715373" style="zoom:67%;"><p>（流程：3×3卷积 → 1×1卷积 ）</p><p>feature maps每个点都有9个anchors，每个anchors又都有4个用于回归的</p><p><img src="https://www.zhihu.com/equation?tex=%5Bd_%7Bx%7D(A),d_%7By%7D(A),d_%7Bw%7D(A),d_%7Bh%7D(A)%5D+%5Ctag%7B11%7D" alt="[公式]"></p><p>变换量。</p><ul><li><p>综上，2k和4k可以理解为用来<strong>“占位的”</strong>，因为无论是3×3卷积、1×1卷积都没涉及anchors，要通过1×1卷积为k个anchors预留2k、4k的位置，用于后面的“针对anchors”的操作！</p><img src="/images/image-20210411173320250.png" alt="image-20210411173320250" style="zoom:50%;"></li></ul><p><strong>（3）bbox regerssion回归positive anchors ：（bbox reg原理）</strong></p><p>（注：由于数学原理较复杂，且思路比较绕，所以此处直接参考博文：<a href="https://zhuanlan.zhihu.com/p/31426458%EF%BC%89">https://zhuanlan.zhihu.com/p/31426458）</a></p><img src="/images/v2-ea7e6e48662bfa68ec73bdf32f36bb85_720w.jpg" alt="img" style="zoom:67%;"><p>红色的框A代表原始的positive Anchors，绿色的框G代表目标的GT，我们的目标是寻找一种关系，使得输入原始的anchor A经过映射得到一个跟真实窗口G更接近的回归窗口G’</p><p>那么经过何种变换<strong>F</strong>才能从图10中的anchor A变为G’呢？ 比较简单的思路就是:</p><ul><li>先做平移</li></ul><p><img src="https://www.zhihu.com/equation?tex=G_x%27=A_w%5Ccdot+d_x(A)++A_x%5Ctag%7B2%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=G_y%27=A_h%5Ccdot+d_y(A)++A_y%5Ctag%7B3%7D" alt="[公式]"></p><ul><li>再做缩放</li></ul><p><img src="https://www.zhihu.com/equation?tex=G_w%27=A_w%5Ccdot+%5Cexp(d_w(A))+%5Ctag%7B4%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=G_h%27=A_h%5Ccdot+%5Cexp(d_h(A))%5Ctag%7B5%7D" alt="[公式]"></p><p>观察上面4个公式发现，需要学习的是 <img src="https://www.zhihu.com/equation?tex=d_%7Bx%7D(A),d_%7By%7D(A),d_%7Bw%7D(A),d_%7Bh%7D(A)" alt="[公式]"> 这四个变换。当输入的anchor A与GT相差较小时，可以认为这种变换是一种线性变换， 那么就可以用线性回归来建模对窗口进行微调（注意，只有当anchors A和GT比较接近时，才能使用线性回归模型，否则就是复杂的非线性问题了）。</p><p>接下来的问题就是如何通过线性回归获得 <img src="https://www.zhihu.com/equation?tex=d_%7Bx%7D(A),d_%7By%7D(A),d_%7Bw%7D(A),d_%7Bh%7D(A)" alt="[公式]"> 了。线性回归就是给定输入的特征向量X, 学习一组参数W, 使得经过线性回归后的值跟真实值Y非常接近，即<img src="https://www.zhihu.com/equation?tex=Y=WX" alt="[公式]">。对于该问题，输入X是cnn feature map，定义为Φ；同时还有训练传入A与GT之间的变换量，即<img src="https://www.zhihu.com/equation?tex=(t_%7Bx%7D,+t_%7By%7D,+t_%7Bw%7D,+t_%7Bh%7D)" alt="[公式]">。输出是<img src="https://www.zhihu.com/equation?tex=d_%7Bx%7D(A),d_%7By%7D(A),d_%7Bw%7D(A),d_%7Bh%7D(A)" alt="[公式]">四个变换。那么目标函数可以表示为：</p><p><img src="https://www.zhihu.com/equation?tex=d_*(A)=W_*%5ET%5Ccdot+%5Cphi(A)%5Ctag%7B6%7D" alt="[公式]"></p><p>其中 <img src="https://www.zhihu.com/equation?tex=%5Cphi(A)" alt="[公式]"> 是对应anchor的feature map组成的特征向量， <img src="https://www.zhihu.com/equation?tex=W_*" alt="[公式]"> 是需要学习的参数， <img src="https://www.zhihu.com/equation?tex=d_*(A)" alt="[公式]"> 是得到的预测值（*表示 x，y，w，h，也就是每一个变换对应一个上述目标函数）。为了让预测值 <img src="https://www.zhihu.com/equation?tex=d_*(A)" alt="[公式]"> 与真实值 <img src="https://www.zhihu.com/equation?tex=t_*" alt="[公式]"> 差距最小，设计L1损失函数：</p><p><img src="https://www.zhihu.com/equation?tex=%5Ctext%7BLoss%7D=%5Csum_%7Bi%7D%5E%7BN%7D%7B%7Ct_*%5Ei-W_*%5ET%5Ccdot+%5Cphi(A%5Ei)%7C%7D+%5Ctag%7B7%7D" alt="[公式]"></p><p>函数优化目标为：</p><p><img src="https://www.zhihu.com/equation?tex=%5Chat%7BW%7D_*=%5Ctext%7Bargmin%7D_%7BW_*%7D%5Csum_%7Bi%7D%5E%7Bn%7D%7Ct_*%5Ei-+W_*%5ET%5Ccdot+%5Cphi(A%5Ei)%7C+%5Clambda%7C%7CW_*%7C%7C++%5Ctag%7B8%7D" alt="[公式]"></p><p>为了方便描述，这里以L1损失为例介绍，而真实情况中一般使用soomth-L1损失。</p><p>需要说明，只有在GT与需要回归框位置比较接近时，才可近似认为上述线性变换成立。<br>说完原理，对应于Faster RCNN原文，positive anchor与ground truth之间的平移量 <img src="https://www.zhihu.com/equation?tex=(t_x,+t_y)" alt="[公式]"> 与尺度因子 <img src="https://www.zhihu.com/equation?tex=(t_w,+t_h)" alt="[公式]"> 如下：（<strong>原文给出的映射关系真实值</strong>，目标是训练参数W，使得WX的结果Y更接近与下面给出的值，这个Y就是预测的映射变换值）</p><p><img src="https://www.zhihu.com/equation?tex=t_x=(x-x_a)/w_a%5C+%5C+%5C+%5C++t_y=(y-y_a)/h_a+%5Ctag%7B9%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=t_w=%5Clog(w/w_a)%5C+%5C+%5C+%5C+t_h=%5Clog(h/h_a)+%5Ctag%7B10%7D" alt="[公式]"></p><p>对于训练bouding box regression网络回归分支，输入是cnn feature Φ，监督信号是Anchor与GT的差距 <img src="https://www.zhihu.com/equation?tex=(t_x,+t_y,+t_w,+t_h)" alt="[公式]">，即训练目标是：输入 Φ的情况下使网络输出与监督信号尽可能接近。那么当bouding box regression工作时，再输入Φ时，回归网络分支的输出就是每个Anchor的平移量和变换尺度 <img src="https://www.zhihu.com/equation?tex=(t_x,+t_y,+t_w,+t_h)" alt="[公式]">，显然即可用来修正Anchor位置了。</p><p>（4）<strong>Proposal Layer整合信息</strong>，生成RPN网络最终的feature proposals：</p><p>流程如下：</p><ol><li>生成anchors，利用<img src="https://www.zhihu.com/equation?tex=%5Bd_%7Bx%7D(A),d_%7By%7D(A),d_%7Bw%7D(A),d_%7Bh%7D(A)%5D" alt="[公式]">对所有的anchors做bbox regression回归（这里的anchors生成和训练时完全一致）</li><li>按照输入的positive softmax scores由大到小排序anchors，提取前pre_nms_topN(e.g. 6000)个anchors，即提取修正位置后的positive anchors</li><li>限定超出图像边界的positive anchors为图像边界，防止后续roi pooling时proposal超出图像边界（见文章底部QA部分图21）</li><li>剔除尺寸非常小的positive anchors</li><li>对剩余的positive anchors进行NMS（nonmaximum suppression）</li><li>Proposal Layer有3个输入：positive和negative anchors分类器结果rpn_cls_prob_reshape，对应的bbox reg的(e.g. 300)结果作为proposal输出</li></ol><p>参考博文：<a href="https://zhuanlan.zhihu.com/p/31426458">https://zhuanlan.zhihu.com/p/31426458</a></p>]]></content>
    
    
    <categories>
      
      <category>Deep Learning-Objects Detection</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>神经网络：Faster R-CNN详解（一）</title>
    <link href="/2021/04/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9AFaster-R-CNN%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/04/11/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%9AFaster-R-CNN%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>Faster R-CNN是早期经典的目标检测网络，虽然如今已经有YOLO等更强大的检测网络，但其思想都是基于Faster R-CNN的，本系列记录我在学习Faster R-CNN中的体会。</p><span id="more"></span><p>如果囫囵吞枣式地学习Faster R-CNN，会觉得很顺利。但是当我最近dive into到其中的细节时，着实让我花费了很多功夫。</p><p>在阅读了原始论文后，我产生了很多疑惑，于是在阅读博文的过程中，尝试一点一点解开这些疑惑，现将我阅读完后的综合产出记录于此。由于内容较长，分为多篇文章记录。</p><p>要想彻底理解Faster RCNN的流程与思想，有必要从R-CNN和SPP-net开始解读：</p><h3 id="一、R-CNN"><a href="#一、R-CNN" class="headerlink" title="一、R-CNN"></a>一、R-CNN</h3><img src="/images/webp" alt="img" style="zoom:67%;"><p>流程：</p><p>Input Image → Crop/warp(候选区域的生成并<strong>resize为固定尺寸</strong>) → 将统一尺寸的图片输入到Conv layer提取特征 → 将特征向量输入FC层 → out</p><p>特点：</p><p>（1）直接在原图像上卷积</p><p>（2）必须保证输入Conv layer的图像尺寸大小一致，即必须采用resize操作；但resize操作         会使原图像产生一定的扭曲、拉伸，使结果变差；</p><p>（3）对于2000个候选区域，分别要进行一次卷积，也即要进行2000次卷积的前向传播；</p><h3 id="二、SPP-net"><a href="#二、SPP-net" class="headerlink" title="二、SPP-net"></a>二、SPP-net</h3><p>针对RCNN的缺点进行优化</p><p>1.目标：可以使用不同尺寸的原图输入，经过Conv layer之后输出不同尺寸的feature map</p><p>2.关键做法：在Conv layer提取完特征后（由于输入图像尺寸不一，所以此时的feature map尺寸也不同），<strong>先经过一个spp层</strong>，再输入FC层。</p><p>​    试想，如果没有spp层，直接输入到FC层，由于每张图片的feature map尺寸都不同，那就要针对每张图片都设计FC层的节点个数，这显然是不实际的！所以要想让输入尺寸任意，必须在Conv layer之后经过一个spp层！</p><p>3.流程：</p><p>Input Image → Conv layer(输出不同尺寸的feature map) → <strong>spp</strong> → 统一尺寸的特征向量输入FC → out</p><p>4.<strong>spp层</strong>（Spatial Pyramid Pooling layer, <strong>空间金字塔池化层</strong>）：</p><img src="/images/image-20210411113820201.png" alt="image-20210411113820201" style="zoom:67%;"><ul><li>比例池化</li></ul><p>对于任何尺寸的feature map，我都做同一件事情：将feature map等分成三种比例，分别进行池化(max pooling)。三种比例分别为：4×4、2×2、1×1，这样直接规定分成几份，至于一份的大小就是可变的了！三种比例的池化输出特征个数分别为：16、4、1</p><p>这样，无论来的feature map是多大的，我都能通过上述三种比例使池化后的输出个数为16+4+1=21个，再考虑上feature map的通道数，则为21×256个特征。将这些特征组成向量，就实现了尺寸统一了，然后再输入FC层，就不会存在任何问题了！</p><p>再品，我如何对不同尺寸的输入图像都有较好的效果呢？其实在spp的不同比例中可以实现：如果输入尺寸特别大，则4×4比例的池化可以“站出来”完成任务；如果输入尺寸特别小，则1×1比例可以“站出来”完成任务！对于大图片来说，1×1比例可能没啥用， 但无非就是在特征向量里有一些无用信息而已，可以由网络自己学习去判别这些信息是“无用”的，实现输出维度的统一才是更要紧的事情！</p><ul><li>特征共享 (卷积共享)</li></ul><p>不同于R-CNN中，每一个候选区域分别卷积；SPP-net直接对原图进行一次卷积，后续的操作都在feature map上进行，大大节省了前向传播的时间！</p><p>除此以外，由于SPP-net采用金字塔池化来适应不同尺寸，没有用resize对原图区域进行扭曲、拉伸，所以网络的表现甚至更好！</p><p>5.RCNN与SPP-net的流程比较：</p><p>（上R-CNN，下SPP-net）</p><img src="/images/image-20210411120210657.png" alt="image-20210411120210657" style="zoom:67%;">]]></content>
    
    
    <categories>
      
      <category>Deep Learning-Objects Detection</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记（二）</title>
    <link href="/2021/04/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/04/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>除了基本的操作外，Git最强大之处在于本地库与远程库的连接管理。我们熟悉的Github其实就是一个开源的远端服务器，本文就介绍Git的进阶知识。</p><span id="more"></span><h4 id="五、远程仓库（Git牛逼之处一）"><a href="#五、远程仓库（Git牛逼之处一）" class="headerlink" title="五、远程仓库（Git牛逼之处一）"></a>五、远程仓库（Git牛逼之处一）</h4><ol><li><strong>由本地库推送至远程库</strong></li></ol><p>远程库搭建方式：</p><p>（a）借助GitHub账户搭建( 可以把Github看成一个“远端服务器”， 这样Github上创建的所有仓库都可以看作<strong>“远程库”</strong>)； </p><p>（b）用自己的电脑搭建一个Git服务器</p><p>借助Github搭建远程Git仓库步骤：</p><p>（1）创建SSH Key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;   #一路回车默认</span><br></pre></td></tr></table></figure><p>用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p><p>首次使用，需要在Github账户管理处添加ssh公钥，添加完成后如下：</p><img src="/images/image-20210410150920367.png" alt="image-20210410150920367" style="zoom: 67%;"><p>（2）本地仓库关联Github的远程库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:Ericccccc1022&#x2F;learngit.git  #在本地Git仓库目录下运行</span><br><span class="line">                                                                 #远程库默认名字是origin</span><br><span class="line">                                                               #learngit是刚在github中创建的仓库名</span><br><span class="line">                                                               </span><br><span class="line">git push -u origin master   #第一次推送master分支的所有内容</span><br><span class="line">git push origin master     #此后每次本地提交后，就可以直接推送至远程库，不需要-u参数</span><br></pre></td></tr></table></figure><p>Git在没有网络时，也能完成<strong>本地提交</strong>工作，有网络后只需简单推送至远程库即可，非常方便！</p><p>2.<strong>从远程库克隆</strong></p><p>Github中的仓库都可以看作“远程库”，要克隆到本地，必须先知道仓库的地址，然后使用<code>git clone</code> 命令克隆</p><p>Git支持多种协议，包括<strong>https</strong>和<strong>ssh</strong>，但ssh协议的速度最快。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Ericccccc1022&#x2F;test.git  #使用ssh协议的克隆</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Ericccccc1022&#x2F;test.git  #使用https协议的克隆</span><br><span class="line"></span><br><span class="line">#test是我早前在github账户中创建的一个仓库</span><br></pre></td></tr></table></figure><h4 id="六、分支管理（Git牛逼之处二）"><a href="#六、分支管理（Git牛逼之处二）" class="headerlink" title="六、分支管理（Git牛逼之处二）"></a>六、分支管理（Git牛逼之处二）</h4><p>1.</p><p><strong>一开始</strong>，master指向当前分支，HEAD指向master：</p><p><img src="/images/4" alt="git-br-initial"></p><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p><strong>创建新的分支</strong>，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><p><img src="/images/5" alt="git-br-create"></p><p>从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p><p><img src="/images/6" alt="git-br-dev-fd"></p><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p><p><img src="/images/7" alt="git-br-ff-merge"></p><p>综上，Git创建分支、合并分支，仅仅只是指针的变动，因此速度非常快！</p><p>（1）创建分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch dev   #创建dev分支</span><br><span class="line">git checkout dev  #切换到dev分支上</span><br><span class="line"></span><br><span class="line">git checkout -b dev  #-b参数将上述两步合并，效果相同</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch  #查看当前分支</span><br><span class="line"></span><br><span class="line">git checkout master  #回到master分支</span><br></pre></td></tr></table></figure><p>（2）合并分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge dev  # 合并指定分支到当前分支</span><br></pre></td></tr></table></figure><p>（3）删除分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev  #删除dev分支</span><br></pre></td></tr></table></figure><p>由于操作非常方便，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全！</p><p>（4）切换分支的新命令</p><p>由于撤销修改是<code>git checkout -- &lt;filename&gt;</code> , 因此checkout容易歧义。对此，可用switch命令完成分支切换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev  #创建并切换到新的分支</span><br><span class="line"></span><br><span class="line">git switch master  #直接切换分支</span><br></pre></td></tr></table></figure><p>2.分支冲突</p><p>如果在不同分支下分别进行了修改，在merge时则会发生冲突；</p><p>解决办法：把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><p>3.合并分支的方式</p><p>默认采用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge --no-ff -m &quot;merge with no-ff&quot; dev  # --no-ff参数表明禁用Fast forward</span><br><span class="line">                                    #本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去</span><br></pre></td></tr></table></figure><p>在<strong>实际开发</strong>中，我们应该按照几个基本原则进行分支管理：</p><p>（1）首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>（2）那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>（3）你和你的小伙伴们每个人都从<code>dev</code>分支引出自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><p>（4）合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并</p><p><img src="/images/8" alt="git-br-policy"></p><p>4.<strong>Bug分支</strong></p><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>（1）当手头工作没有完成时，<strong>不能直接提交</strong>，但是又要进入新的分支修复bug，此时需要将<strong>工作现场</strong>保存一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>（2）然后去新的分支修复bug；假设在master分支上修复了bug，想在dev分支上也修复，Git提供了便捷的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#切换到dev分支上</span><br><span class="line"></span><br><span class="line">git cherry-pick 4c805e2   # 4c805e2是在master分支上提交时的id</span><br></pre></td></tr></table></figure><p>（3）修复完成，现在需要继续工作，取出缓存的工作空间：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash list  #查看stash内容</span><br><span class="line"></span><br><span class="line">git stash apply stash@&#123;0&#125;  #取出stash@&#123;0&#125;状态并在stash中删除它</span><br><span class="line">git stash drop stash@&#123;0&#125;</span><br><span class="line"></span><br><span class="line">git stash pop  #取出同时删除</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>Feature分支</strong></li></ol><p>在软件开发中，通常需要开发新功能；每开发一个新功能，最好创建一个feature分支</p><p>例如现在要开发代号为scan_radar的新功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git switch -c feature-scan</span><br><span class="line"></span><br><span class="line">#开发完成后</span><br><span class="line">git add scan.py</span><br><span class="line">git commit -m &quot;add feature scan&quot;</span><br><span class="line"></span><br><span class="line">#切回dev，合并分支</span><br><span class="line">git switch dev</span><br><span class="line">git merge feature-scan</span><br></pre></td></tr></table></figure><p>若要删除还未合并的分支：用大写参数-D，强制删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D feature-scan</span><br></pre></td></tr></table></figure><p>6.<strong>多人协作</strong></p><p>多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><p>本地分支与远程库：</p><p>（1）查看远程库信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>（2）本地新建的分支如果不推送到远程，对其他人就是不可见的</p><p>（3）从本地推送分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch-name&gt;</span><br><span class="line"></span><br><span class="line">#若推送失败，则先抓取远程的新提交：</span><br><span class="line">git pull</span><br><span class="line">#若提示no tracking information,则建立关联：</span><br><span class="line">git branch --set-upstream branch-name origin&#x2F;branch-name</span><br><span class="line">#若推送有冲突，则要先解决冲突</span><br></pre></td></tr></table></figure><p>（4）若远程有多个分支，在本地创建和远程分支对应的分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch-name origin&#x2F;branch-name</span><br></pre></td></tr></table></figure><p>7.Rebase操作</p><p>rebase操作可以把本地未push的分叉提交历史整理成直线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase</span><br></pre></td></tr></table></figure><h4 id="七、标签管理（tag）"><a href="#七、标签管理（tag）" class="headerlink" title="七、标签管理（tag）"></a>七、标签管理（tag）</h4><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><p>实际上tag是指向某个commit的指针，但该指针不能移动！</p><p>1.创建标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#切换到目标分支上</span><br><span class="line"></span><br><span class="line">git tag v1.0   #默认打在最新提交的commit上</span><br><span class="line"></span><br><span class="line">git tag v0.9 f52c63  #如果要给历史版本打标签，则后面添加commit id</span><br></pre></td></tr></table></figure><p>创建带有说明的tag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb  # -a标签名，-m说明文字</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag  #查看所有标签</span><br><span class="line">git show v1.0  #查看标签信息</span><br></pre></td></tr></table></figure><p>2.操作标签</p><p>（1）删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v1.0</span><br><span class="line"></span><br><span class="line">#若已经推送到远程：</span><br><span class="line">git tag -d v1.0</span><br><span class="line">git push origin :refs&#x2F;tags&#x2F;v1.0</span><br></pre></td></tr></table></figure><p>（2）推送tag到远程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.0</span><br><span class="line"></span><br><span class="line">git push origin --tags  #一次性推送全部尚未推送标签</span><br></pre></td></tr></table></figure><h4 id="八、开源社区Github"><a href="#八、开源社区Github" class="headerlink" title="八、开源社区Github"></a>八、开源社区Github</h4><p>参与代码贡献的流程：</p><p>（1）点“Fork”就在自己的账号下克隆了一个bootstrap仓库</p><p>（2）从自己的账号下clone到本地电脑（一定要从自己的账号下clone才能推送修改）</p><p>（3）往自己仓库推送更新，在github上发起一个pull request</p><p>在GitHub上，可以任意Fork开源仓库；自己拥有Fork后的仓库的读写权限；可以推送pull request给官方仓库来贡献代码。</p><p>拓：如果没有梯子，可以使用github“国内版”——Gitee ( gitee.com)</p><h4 id="九、自定义Git配置（简略了解）"><a href="#九、自定义Git配置（简略了解）" class="headerlink" title="九、自定义Git配置（简略了解）"></a>九、自定义Git配置（简略了解）</h4><p>1.忽略某些文件时，需要编写<code>.gitignore</code>文件，放到版本库里</p><p>2.配置别名（为了输入命令时偷懒）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.st status  #status设置别名st</span><br></pre></td></tr></table></figure><p>以下介绍一些常见的别名配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global alias.last &#39;log -1&#39;  # 用git last 就可以直接查看最新一次commit信息</span><br><span class="line"></span><br><span class="line">git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot; </span><br><span class="line"># 用git lg可以查看git log信息，且有颜色配置！！</span><br></pre></td></tr></table></figure><p>3.搭建Git服务器</p><p>如果不想被github的开源性影响，则可以搭建自己的Git服务器；</p><p>用ubuntu系统搭建更简单，具体操作请Google。</p><h4 id="十、Git的图形界面工具——Source-Tree"><a href="#十、Git的图形界面工具——Source-Tree" class="headerlink" title="十、Git的图形界面工具——Source Tree"></a>十、Git的图形界面工具——Source Tree</h4><p>使用SourceTree可以以图形界面操作Git，省去了敲命令的过程，对于常用的提交、分支、推送等操作来说非常方便；</p><p>SourceTree使用Git命令执行操作，出错时，仍然需要阅读Git命令返回的错误信息。</p><h4 id="十一、最后"><a href="#十一、最后" class="headerlink" title="十一、最后"></a>十一、最后</h4><p>以上课程只是Git入门级别的知识，只涉及十余个常用命令，但是掌握这些命令已足够让我们得心应手地使用Git了！</p><p>附资料：</p><p>（1）常用的Git命令表：<a href="https://liaoxuefeng.gitee.io/resource.liaoxuefeng.com/git/git-cheat-sheet.pdf">https://liaoxuefeng.gitee.io/resource.liaoxuefeng.com/git/git-cheat-sheet.pdf</a></p><p>（2）Git官网：<a href="http://git-scm.com/">http://git-scm.com/</a></p><p><strong>全文参考</strong>：廖雪峰Git教程 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Git学习笔记（一）</title>
    <link href="/2021/04/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/04/11/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>众所周知，Git 是一个强大的开源分布式版本控制系统，在团队协作中发挥着尤其重要的作用。本博客就是将本地仓库部署到Github远程库，并通过Git工具进行管理的。</p><span id="more"></span><p>今天就简单介绍一下Git的基本概念和常用语法，掌握这些语法已经足够让我们得心应手地使用Git了！</p><h4 id="一、Git简介"><a href="#一、Git简介" class="headerlink" title="一、Git简介"></a>一、Git简介</h4><p>1.Git是目前世界上最先进的分布式版本控制系统</p><p>2.集中式vs分布式</p><p>（1）CVS、SVN，版本库是集中存放在中央服务器的，这些集中式的版本控制系统不但速度慢，而且必须联网才能使用。</p><p>（2）分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h4 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h4><p>Git可以在Linux、Unix、Mac和Windows这几大平台上使用</p><p>1.Ubuntu安装Git：只需要一条命令，非常简单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p>2.Windows安装Git：</p><p>从Git官网直接<a href="https://git-scm.com/downloads">下载安装程序</a>，然后按默认选项安装即可，</p><p>安装完成后，还需要最后一步设置，在命令行输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;Your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>–global参数表示你这台机器上所有的Git仓库都会使用这个配置了。</p><h4 id="三、创建版本库（Repository）"><a href="#三、创建版本库（Repository）" class="headerlink" title="三、创建版本库（Repository）"></a>三、创建版本库（Repository）</h4><p>简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪。</p><p>1.创建方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir git_learning  #创建一个空目录</span><br><span class="line">cd git_learning</span><br><span class="line"></span><br><span class="line">git init  #把该目录变成Git可以管理的仓库</span><br></pre></td></tr></table></figure><p>2.版本库的管理范围</p><p>所有的版本控制系统，其实只能跟踪<strong>文本文件</strong>的改动，因为文本是有编码的，强烈建议使用标准的<strong>UTF-8编码</strong>，统一方便管理。</p><p>而<strong>二进制文件</strong>，如图片、视频、Word文档等，版本控制系统是没法跟踪的。</p><p>3.将文件添加到仓库中</p><p>注意编写文本文件，使用UTF-8编码；Windows下，不要使用记事本，推荐使用Notepad++（由于某些特殊原因）</p><p>注：以下命令都必须再<strong>Git仓库目录</strong>下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#Step1</span><br><span class="line">编写一个test.txt文件，放到git_learning目录下</span><br><span class="line"></span><br><span class="line">#Step2</span><br><span class="line">git add test.txt    #用git add命令告诉Git，将文件添加到仓库</span><br><span class="line"></span><br><span class="line">#Step3</span><br><span class="line">git commit -m &quot;wrote a test file&quot;   #用git commit命令告诉Git，将文件提交到仓库</span><br><span class="line">                                    #参数-m后面是对本次提交的说明，</span><br><span class="line">                                    </span><br><span class="line">                                    </span><br><span class="line">#可以一次添加多个文件后再统一提交</span><br><span class="line">git add file1.txt</span><br><span class="line">git add file2.txt file3.txt</span><br><span class="line">git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><h4 id="四、修改与管理"><a href="#四、修改与管理" class="headerlink" title="四、修改与管理"></a>四、修改与管理</h4><p>1.<strong>修改文件</strong></p><p>（1）时刻掌握仓库当前的状态：有无文件被修改、有无文件需要提交等等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>（2）查看具体修改了什么内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff test.txt</span><br></pre></td></tr></table></figure><p>（3）得知具体修改的内容后，可以放心地提交到仓库上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br><span class="line">git commit -m &quot;add some words&quot;   #提交修改的文件同样需要两步：add、commit</span><br></pre></td></tr></table></figure><p>2.<strong>版本回退</strong></p><p>（1）查看历史版本记录——回到过去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log   #查看历史版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^   #回退到上一个版本</span><br></pre></td></tr></table></figure><p>​    显示从最近到最远的提交日志，第一行显示的是版本的commit id。</p><p>​    HEAD表示当前版本，HEAD ^表示上一个版本，HEAD^^表示上上一个版本，HEAD~100表示往前100个版本</p><p>（2）查看命令历史——回到未来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reflog   #查看历史命令，可以看到未来版本的commit id</span><br><span class="line"></span><br><span class="line">git reset --hard &lt;commit id&gt;   #id输入前几位即可，让Git自动查寻版本号</span><br></pre></td></tr></table></figure><p>3.<strong>Git的工作区与暂存区</strong></p><p>工作区（Working Directory）：电脑里能看到的目录就是</p><p>版本库（Repository）：<strong>stage暂存区</strong> + <strong>master分支</strong>（创建Git仓库时自动创建）</p><p><img src="/images/1" alt="git-repo"></p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支</p><p><img src="/images/2" alt="git-stage"></p><p><img src="/images/3" alt="git-stage-after-commit"></p><p>4.<strong>撤销修改</strong></p><p>（1）还未add到暂存区，仅撤销工作区的修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>（2）已经add到暂存区，要撤销暂存区的修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;filename&gt;   #丢弃暂存区修改</span><br><span class="line"></span><br><span class="line">git checkout -- &lt;filename&gt;   #再丢弃工作区修改</span><br></pre></td></tr></table></figure><p>（3）已经commit到版本库，要撤销本次提交：</p><p>​        用前述的版本回退方法；</p><p>​        ps：如果已经推送到远程库，则没有办法撤销了！</p><p>5.<strong>删除文件 &amp; 恢复删除</strong></p><p>假设你在工作区中删除了某文件（例如ubuntu中用<code>sudo rm</code> 命令删除了某文件）</p><p>（1）从版本库中删除该文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>（2）从版本库中恢复该文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;   #只能恢复文件到最新版本</span><br></pre></td></tr></table></figure><p><strong>全文参考</strong>：廖雪峰Git教程 <a href="https://www.liaoxuefeng.com/wiki/896043488029600">https://www.liaoxuefeng.com/wiki/896043488029600</a></p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo博客+Typora文件部署</title>
    <link href="/2021/04/10/Hexo%E5%8D%9A%E5%AE%A2-Typora%E6%96%87%E4%BB%B6%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/04/10/Hexo%E5%8D%9A%E5%AE%A2-Typora%E6%96%87%E4%BB%B6%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>博客的第一篇正式文章，简介用Typora编写文件并且部署到Hexo博客的方法：</p><span id="more"></span><h4 id="1-创建文章"><a href="#1-创建文章" class="headerlink" title="1.创建文章"></a>1.创建文章</h4><p>在站点文件夹下右键打开git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;title&quot;</span><br></pre></td></tr></table></figure><h4 id="2-编辑文章（使用Typora）"><a href="#2-编辑文章（使用Typora）" class="headerlink" title="2.编辑文章（使用Typora）"></a>2.编辑文章（使用Typora）</h4><p>在Typora中打开站点文件夹，即可编辑刚创建好的新文件，编辑好后保存</p><h4 id="3-部署与发布"><a href="#3-部署与发布" class="headerlink" title="3.部署与发布"></a>3.部署与发布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">hexo g  #生成部署文件</span><br><span class="line">hexo s  #运行本站点</span><br><span class="line">        #然后打开localhost:4000进行预览</span><br><span class="line">hexo d  #确认无误后发布到github远端，登录Ericccccc1022.github.io可查看</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#方法二</span><br><span class="line">hexo g -d #部署+发布一并完成</span><br></pre></td></tr></table></figure><p>如果在<code>hexo g -d</code>过程中遇到<code>error：spawn failed</code>的问题，解决办法：</p><p>（1）删除<code>.deploy_git</code>文件夹</p><p>（2）输入<code>git config --global core.autocrlf false</code></p><p>（3）依次执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>直接暴力解决！</p><p>暂时简单介绍这么多，今天用了2个小时左右搭建起Hexo博客+理清楚如何攥写与部署文章。当然，能先写文章是最重要的，博客美化都是后话。</p><p>这里应该相当长一段时间都会是一个比较静谧的空间，可以寄存一下最近的学习笔记，或者随便写写最近的心得与迷茫。</p>]]></content>
    
    
    <categories>
      
      <category>Others</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Test message</title>
    <link href="/2021/04/10/Test-message/"/>
    <url>/2021/04/10/Test-message/</url>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>This is a test file.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pytorch</span><br><span class="line"><span class="keyword">import</span> cv2</span><br></pre></td></tr></table></figure><p>测试<strong>加粗</strong>功能</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/10/hello-world/"/>
    <url>/2021/04/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
